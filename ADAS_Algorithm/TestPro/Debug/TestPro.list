
TestPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec24  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  0800edd8  0800edd8  0001edd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5e8  0800f5e8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5e8  0800f5e8  0001f5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5f0  0800f5f0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5f0  0800f5f0  0001f5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5f4  0800f5f4  0001f5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f5f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          000087a4  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000898c  2000898c  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018839  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003420  00000000  00000000  00038a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  0003be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  0003d378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b99  00000000  00000000  0003e730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d73  00000000  00000000  000652c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8266  00000000  00000000  0007c03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001642a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000729c  00000000  00000000  001642f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800edbc 	.word	0x0800edbc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	0800edbc 	.word	0x0800edbc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <vApplicationGetIdleTaskMemory>:
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);
extern TIM_HandleTypeDef htim1;

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <vApplicationGetIdleTaskMemory+0x2c>)
 8001028:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <vApplicationGetIdleTaskMemory+0x30>)
 800102e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001036:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000204 	.word	0x20000204
 8001048:	20000268 	.word	0x20000268

0800104c <vApplicationIdleHook>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
__weak void vApplicationIdleHook( void )
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <configureTimerForRunTimeStats>:
void configureTimerForRunTimeStats(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	 HAL_TIM_Base_Stop(&htim1);
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <configureTimerForRunTimeStats+0x1c>)
 8001086:	f003 fe41 	bl	8004d0c <HAL_TIM_Base_Stop>
	 htim1.Instance->CNT = 0;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <configureTimerForRunTimeStats+0x1c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
	 	HAL_TIM_Base_Start(&htim1);
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <configureTimerForRunTimeStats+0x1c>)
 8001094:	f003 fdd2 	bl	8004c3c <HAL_TIM_Base_Start>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000690 	.word	0x20000690

080010a0 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
return htim1.Instance->CNT;;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <getRunTimeCounterValue+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	20000690 	.word	0x20000690

080010b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010be:	f001 ffeb 	bl	8003098 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010c2:	f000 f8fd 	bl	80012c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010c6:	f000 fa1b 	bl	8001500 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80010ca:	f000 f9ef 	bl	80014ac <MX_USART1_UART_Init>
	MX_CAN1_Init();
 80010ce:	f000 f967 	bl	80013a0 <MX_CAN1_Init>
	MX_TIM1_Init();
 80010d2:	f000 f99b 	bl	800140c <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	sFilterConfig.FilterBank = 0;
 80010d6:	4b61      	ldr	r3, [pc, #388]	; (800125c <main+0x1a4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010dc:	4b5f      	ldr	r3, [pc, #380]	; (800125c <main+0x1a4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010e2:	4b5e      	ldr	r3, [pc, #376]	; (800125c <main+0x1a4>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = (0x123 << 5);
 80010e8:	4b5c      	ldr	r3, [pc, #368]	; (800125c <main+0x1a4>)
 80010ea:	f242 4260 	movw	r2, #9312	; 0x2460
 80010ee:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80010f0:	4b5a      	ldr	r3, [pc, #360]	; (800125c <main+0x1a4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFE0;
 80010f6:	4b59      	ldr	r3, [pc, #356]	; (800125c <main+0x1a4>)
 80010f8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80010fc:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80010fe:	4b57      	ldr	r3, [pc, #348]	; (800125c <main+0x1a4>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001104:	4b55      	ldr	r3, [pc, #340]	; (800125c <main+0x1a4>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800110a:	4b54      	ldr	r3, [pc, #336]	; (800125c <main+0x1a4>)
 800110c:	2201      	movs	r2, #1
 800110e:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001110:	4b52      	ldr	r3, [pc, #328]	; (800125c <main+0x1a4>)
 8001112:	220e      	movs	r2, #14
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001116:	4951      	ldr	r1, [pc, #324]	; (800125c <main+0x1a4>)
 8001118:	4851      	ldr	r0, [pc, #324]	; (8001260 <main+0x1a8>)
 800111a:	f002 f8fb 	bl	8003314 <HAL_CAN_ConfigFilter>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <main+0x70>
	{
		/* Filter configuration Error */
		Error_Handler();
 8001124:	f001 fd12 	bl	8002b4c <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001128:	484d      	ldr	r0, [pc, #308]	; (8001260 <main+0x1a8>)
 800112a:	f002 f9d3 	bl	80034d4 <HAL_CAN_Start>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <main+0x80>
	{
		/* Start Error */
		Error_Handler();
 8001134:	f001 fd0a 	bl	8002b4c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001138:	2103      	movs	r1, #3
 800113a:	4849      	ldr	r0, [pc, #292]	; (8001260 <main+0x1a8>)
 800113c:	f002 fb20 	bl	8003780 <HAL_CAN_ActivateNotification>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <main+0x92>
	{
		/* Notification Error */
		Error_Handler();
 8001146:	f001 fd01 	bl	8002b4c <Error_Handler>
	}

	TxHeader.StdId = 0x321;
 800114a:	4b46      	ldr	r3, [pc, #280]	; (8001264 <main+0x1ac>)
 800114c:	f240 3221 	movw	r2, #801	; 0x321
 8001150:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x01;
 8001152:	4b44      	ldr	r3, [pc, #272]	; (8001264 <main+0x1ac>)
 8001154:	2201      	movs	r2, #1
 8001156:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8001158:	4b42      	ldr	r3, [pc, #264]	; (8001264 <main+0x1ac>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 800115e:	4b41      	ldr	r3, [pc, #260]	; (8001264 <main+0x1ac>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8001164:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <main+0x1ac>)
 8001166:	2208      	movs	r2, #8
 8001168:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 800116a:	4b3e      	ldr	r3, [pc, #248]	; (8001264 <main+0x1ac>)
 800116c:	2200      	movs	r2, #0
 800116e:	751a      	strb	r2, [r3, #20]
	/* USER CODE END 2 */

	/* USER CODE BEGIN RTOS_MUTEX */
	myMutexUARTHandle = xSemaphoreCreateMutex();
 8001170:	2001      	movs	r0, #1
 8001172:	f005 f8a2 	bl	80062ba <xQueueCreateMutex>
 8001176:	4603      	mov	r3, r0
 8001178:	4a3b      	ldr	r2, [pc, #236]	; (8001268 <main+0x1b0>)
 800117a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	xUARTRecieveDataQueue = xQueueCreate(40, sizeof(InputData_t));
 800117c:	2200      	movs	r2, #0
 800117e:	2178      	movs	r1, #120	; 0x78
 8001180:	2028      	movs	r0, #40	; 0x28
 8001182:	f005 f823 	bl	80061cc <xQueueGenericCreate>
 8001186:	4603      	mov	r3, r0
 8001188:	4a38      	ldr	r2, [pc, #224]	; (800126c <main+0x1b4>)
 800118a:	6013      	str	r3, [r2, #0]
	xMakeAlgorithmQueue   = xQueueCreate(20, sizeof(flags_t));
 800118c:	2200      	movs	r2, #0
 800118e:	2108      	movs	r1, #8
 8001190:	2014      	movs	r0, #20
 8001192:	f005 f81b 	bl	80061cc <xQueueGenericCreate>
 8001196:	4603      	mov	r3, r0
 8001198:	4a35      	ldr	r2, [pc, #212]	; (8001270 <main+0x1b8>)
 800119a:	6013      	str	r3, [r2, #0]
	xMakeAlgorithmQueue2  = xQueueCreate(40, sizeof(InputData_t));
 800119c:	2200      	movs	r2, #0
 800119e:	2178      	movs	r1, #120	; 0x78
 80011a0:	2028      	movs	r0, #40	; 0x28
 80011a2:	f005 f813 	bl	80061cc <xQueueGenericCreate>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a32      	ldr	r2, [pc, #200]	; (8001274 <main+0x1bc>)
 80011aa:	6013      	str	r3, [r2, #0]
	xUpdateABSQueue       = xQueueCreate(10, sizeof(ControlData_t));
 80011ac:	2200      	movs	r2, #0
 80011ae:	2120      	movs	r1, #32
 80011b0:	200a      	movs	r0, #10
 80011b2:	f005 f80b 	bl	80061cc <xQueueGenericCreate>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a2f      	ldr	r2, [pc, #188]	; (8001278 <main+0x1c0>)
 80011ba:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <main+0x1c4>)
 80011be:	1d3c      	adds	r4, r7, #4
 80011c0:	461d      	mov	r5, r3
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f004 fe91 	bl	8005efa <osThreadCreate>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a29      	ldr	r2, [pc, #164]	; (8001280 <main+0x1c8>)
 80011dc:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* definition and creation of defaultTask */
	xTaskCreate(vTaskReceiveUART  , "Receive UART", configMINIMAL_STACK_SIZE*4  , NULL,4, &Task1Handle);
 80011de:	4b29      	ldr	r3, [pc, #164]	; (8001284 <main+0x1cc>)
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	2304      	movs	r3, #4
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2300      	movs	r3, #0
 80011e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ec:	4926      	ldr	r1, [pc, #152]	; (8001288 <main+0x1d0>)
 80011ee:	4827      	ldr	r0, [pc, #156]	; (800128c <main+0x1d4>)
 80011f0:	f005 fceb 	bl	8006bca <xTaskCreate>
	xTaskCreate(vTaskMakeAlgorithm, "Make Algorithm", configMINIMAL_STACK_SIZE*4, NULL,3, &Task2Handle);
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <main+0x1d8>)
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2303      	movs	r3, #3
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001202:	4924      	ldr	r1, [pc, #144]	; (8001294 <main+0x1dc>)
 8001204:	4824      	ldr	r0, [pc, #144]	; (8001298 <main+0x1e0>)
 8001206:	f005 fce0 	bl	8006bca <xTaskCreate>
	xTaskCreate(vTaskUpdateABS    , "Update ABS", configMINIMAL_STACK_SIZE*4    , NULL,2, &Task3Handle);
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <main+0x1e4>)
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	2302      	movs	r3, #2
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2300      	movs	r3, #0
 8001214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001218:	4921      	ldr	r1, [pc, #132]	; (80012a0 <main+0x1e8>)
 800121a:	4822      	ldr	r0, [pc, #136]	; (80012a4 <main+0x1ec>)
 800121c:	f005 fcd5 	bl	8006bca <xTaskCreate>
	xTaskCreate(vTaskSendUART     , "Send UART", configMINIMAL_STACK_SIZE*4     , NULL,1, &Task4Handle);
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <main+0x1f0>)
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	2301      	movs	r3, #1
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2300      	movs	r3, #0
 800122a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122e:	491f      	ldr	r1, [pc, #124]	; (80012ac <main+0x1f4>)
 8001230:	481f      	ldr	r0, [pc, #124]	; (80012b0 <main+0x1f8>)
 8001232:	f005 fcca 	bl	8006bca <xTaskCreate>
	xTaskCreate(vTaskReceiveCAN   , "Receive CAN", configMINIMAL_STACK_SIZE*4   , NULL,5, &Task5Handle);
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <main+0x1fc>)
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	2305      	movs	r3, #5
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2300      	movs	r3, #0
 8001240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001244:	491c      	ldr	r1, [pc, #112]	; (80012b8 <main+0x200>)
 8001246:	481d      	ldr	r0, [pc, #116]	; (80012bc <main+0x204>)
 8001248:	f005 fcbf 	bl	8006bca <xTaskCreate>
	vTaskSuspend(Task5Handle);
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <main+0x1fc>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f005 fe37 	bl	8006ec4 <vTaskSuspend>
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001256:	f004 fe49 	bl	8005eec <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800125a:	e7fe      	b.n	800125a <main+0x1a2>
 800125c:	20000744 	.word	0x20000744
 8001260:	20000668 	.word	0x20000668
 8001264:	2000076c 	.word	0x2000076c
 8001268:	200007cc 	.word	0x200007cc
 800126c:	200007bc 	.word	0x200007bc
 8001270:	200007c0 	.word	0x200007c0
 8001274:	200007c4 	.word	0x200007c4
 8001278:	200007c8 	.word	0x200007c8
 800127c:	0800ee28 	.word	0x0800ee28
 8001280:	2000071c 	.word	0x2000071c
 8001284:	200007a8 	.word	0x200007a8
 8001288:	0800ede4 	.word	0x0800ede4
 800128c:	080018c9 	.word	0x080018c9
 8001290:	200007ac 	.word	0x200007ac
 8001294:	0800edf4 	.word	0x0800edf4
 8001298:	08001a41 	.word	0x08001a41
 800129c:	200007b0 	.word	0x200007b0
 80012a0:	0800ee04 	.word	0x0800ee04
 80012a4:	08001e01 	.word	0x08001e01
 80012a8:	200007b4 	.word	0x200007b4
 80012ac:	0800ee10 	.word	0x0800ee10
 80012b0:	0800294d 	.word	0x0800294d
 80012b4:	200007b8 	.word	0x200007b8
 80012b8:	0800ee1c 	.word	0x0800ee1c
 80012bc:	080029c5 	.word	0x080029c5

080012c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b094      	sub	sp, #80	; 0x50
 80012c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	2230      	movs	r2, #48	; 0x30
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f007 fa08 	bl	80086e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <SystemClock_Config+0xd8>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	4a2a      	ldr	r2, [pc, #168]	; (8001398 <SystemClock_Config+0xd8>)
 80012ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f2:	6413      	str	r3, [r2, #64]	; 0x40
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <SystemClock_Config+0xd8>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	4b25      	ldr	r3, [pc, #148]	; (800139c <SystemClock_Config+0xdc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a24      	ldr	r2, [pc, #144]	; (800139c <SystemClock_Config+0xdc>)
 800130a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <SystemClock_Config+0xdc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800131c:	2301      	movs	r3, #1
 800131e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001326:	2302      	movs	r3, #2
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001330:	2304      	movs	r3, #4
 8001332:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001334:	23b4      	movs	r3, #180	; 0xb4
 8001336:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001338:	2302      	movs	r3, #2
 800133a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800133c:	2304      	movs	r3, #4
 800133e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001340:	f107 0320 	add.w	r3, r7, #32
 8001344:	4618      	mov	r0, r3
 8001346:	f002 ff5f 	bl	8004208 <HAL_RCC_OscConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001350:	f001 fbfc 	bl	8002b4c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001354:	f002 ff08 	bl	8004168 <HAL_PWREx_EnableOverDrive>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 800135e:	f001 fbf5 	bl	8002b4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2302      	movs	r3, #2
 8001368:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800136e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001372:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001378:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2105      	movs	r1, #5
 8001380:	4618      	mov	r0, r3
 8001382:	f003 f9b9 	bl	80046f8 <HAL_RCC_ClockConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 800138c:	f001 fbde 	bl	8002b4c <Error_Handler>
	}
}
 8001390:	bf00      	nop
 8001392:	3750      	adds	r7, #80	; 0x50
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000

080013a0 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <MX_CAN1_Init+0x64>)
 80013a6:	4a18      	ldr	r2, [pc, #96]	; (8001408 <MX_CAN1_Init+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 18;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_CAN1_Init+0x64>)
 80013ac:	2212      	movs	r2, #18
 80013ae:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_CAN1_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <MX_CAN1_Init+0x64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_CAN1_Init+0x64>)
 80013be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013c2:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_CAN1_Init+0x64>)
 80013c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013ca:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <MX_CAN1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_CAN1_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <MX_CAN1_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_CAN1_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <MX_CAN1_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_CAN1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_CAN1_Init+0x64>)
 80013f2:	f001 fe93 	bl	800311c <HAL_CAN_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 80013fc:	f001 fba6 	bl	8002b4c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000668 	.word	0x20000668
 8001408:	40006400 	.word	0x40006400

0800140c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_TIM1_Init+0x98>)
 800142a:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <MX_TIM1_Init+0x9c>)
 800142c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_TIM1_Init+0x98>)
 800143c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001440:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_TIM1_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001454:	4813      	ldr	r0, [pc, #76]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001456:	f003 fba1 	bl	8004b9c <HAL_TIM_Base_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8001460:	f001 fb74 	bl	8002b4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001468:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	4619      	mov	r1, r3
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001472:	f003 fdeb 	bl	800504c <HAL_TIM_ConfigClockSource>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 800147c:	f001 fb66 	bl	8002b4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001488:	463b      	mov	r3, r7
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_TIM1_Init+0x98>)
 800148e:	f004 f807 	bl	80054a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8001498:	f001 fb58 	bl	8002b4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000690 	.word	0x20000690
 80014a8:	40010000 	.word	0x40010000

080014ac <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_USART1_UART_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014e4:	f004 f86c 	bl	80055c0 <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80014ee:	f001 fb2d 	bl	8002b4c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200006d8 	.word	0x200006d8
 80014fc:	40011000 	.word	0x40011000

08001500 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <MX_GPIO_Init+0x9c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a1f      	ldr	r2, [pc, #124]	; (800159c <MX_GPIO_Init+0x9c>)
 8001520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <MX_GPIO_Init+0x9c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <MX_GPIO_Init+0x9c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <MX_GPIO_Init+0x9c>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <MX_GPIO_Init+0x9c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_GPIO_Init+0x9c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a11      	ldr	r2, [pc, #68]	; (800159c <MX_GPIO_Init+0x9c>)
 8001558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_GPIO_Init+0x9c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001570:	480b      	ldr	r0, [pc, #44]	; (80015a0 <MX_GPIO_Init+0xa0>)
 8001572:	f002 fddf 	bl	8004134 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	4619      	mov	r1, r3
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_GPIO_Init+0xa0>)
 8001590:	f002 fc24 	bl	8003ddc <HAL_GPIO_Init>

}
 8001594:	bf00      	nop
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	40021800 	.word	0x40021800
 80015a4:	00000000 	.word	0x00000000

080015a8 <LaneMarkerSteeringAngle>:

/* USER CODE BEGIN 4 */

void LaneMarkerSteeringAngle(float LMX1,float LMY1,float LMX2,float LMY2,float WX1,float WY1,float WX2,float WY2,float LM_Left,float LM_Right,uint32_t roadID)
{
 80015a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015ac:	b0a6      	sub	sp, #152	; 0x98
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 80015b4:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 80015b8:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 80015bc:	edc7 1a08 	vstr	s3, [r7, #32]
 80015c0:	ed87 2a07 	vstr	s4, [r7, #28]
 80015c4:	edc7 2a06 	vstr	s5, [r7, #24]
 80015c8:	ed87 3a05 	vstr	s6, [r7, #20]
 80015cc:	edc7 3a04 	vstr	s7, [r7, #16]
 80015d0:	ed87 4a03 	vstr	s8, [r7, #12]
 80015d4:	edc7 4a02 	vstr	s9, [r7, #8]
 80015d8:	6078      	str	r0, [r7, #4]
    double LMV[3] = {(LMX2 - LMX1),(LMY2 - LMY1),0};
 80015da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e6:	ee17 0a90 	vmov	r0, s15
 80015ea:	f7fe ffbd 	bl	8000568 <__aeabi_f2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80015f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80015fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001602:	ee17 0a90 	vmov	r0, s15
 8001606:	f7fe ffaf 	bl	8000568 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    double WV[3]  = {(WX2 - WX1),(WY2 - WY1),0};
 800161e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001622:	edd7 7a07 	vldr	s15, [r7, #28]
 8001626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162a:	ee17 0a90 	vmov	r0, s15
 800162e:	f7fe ff9b 	bl	8000568 <__aeabi_f2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800163a:	ed97 7a04 	vldr	s14, [r7, #16]
 800163e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001646:	ee17 0a90 	vmov	r0, s15
 800164a:	f7fe ff8d 	bl	8000568 <__aeabi_f2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    double crossProduct[3] = {(LMV[1] * WV[2] - LMV[2] * WV[1]),(-(LMV[0] * WV[2] - LMV[2] * WV[0])),(LMV[0] * WV[1] - LMV[1] * WV[0])};
 8001662:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001666:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800166a:	f7fe ffd5 	bl	8000618 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4692      	mov	sl, r2
 8001674:	469b      	mov	fp, r3
 8001676:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800167a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800167e:	f7fe ffcb 	bl	8000618 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4650      	mov	r0, sl
 8001688:	4659      	mov	r1, fp
 800168a:	f7fe fe0d 	bl	80002a8 <__aeabi_dsub>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001696:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800169a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800169e:	f7fe ffbb 	bl	8000618 <__aeabi_dmul>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4692      	mov	sl, r2
 80016a8:	469b      	mov	fp, r3
 80016aa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80016ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016b2:	f7fe ffb1 	bl	8000618 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4650      	mov	r0, sl
 80016bc:	4659      	mov	r1, fp
 80016be:	f7fe fdf3 	bl	80002a8 <__aeabi_dsub>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4690      	mov	r8, r2
 80016c8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80016cc:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 80016d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80016d8:	f7fe ff9e 	bl	8000618 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4690      	mov	r8, r2
 80016e2:	4699      	mov	r9, r3
 80016e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80016e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016ec:	f7fe ff94 	bl	8000618 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4640      	mov	r0, r8
 80016f6:	4649      	mov	r1, r9
 80016f8:	f7fe fdd6 	bl	80002a8 <__aeabi_dsub>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double norm = sqrt((crossProduct[0] * crossProduct[0]) + (crossProduct[1] * crossProduct[1]) + (crossProduct[2] * crossProduct[2]));
 8001704:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001708:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800170c:	f7fe ff84 	bl	8000618 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4690      	mov	r8, r2
 8001716:	4699      	mov	r9, r3
 8001718:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800171c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001720:	f7fe ff7a 	bl	8000618 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4640      	mov	r0, r8
 800172a:	4649      	mov	r1, r9
 800172c:	f7fe fdbe 	bl	80002ac <__adddf3>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4690      	mov	r8, r2
 8001736:	4699      	mov	r9, r3
 8001738:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800173c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001740:	f7fe ff6a 	bl	8000618 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4640      	mov	r0, r8
 800174a:	4649      	mov	r1, r9
 800174c:	f7fe fdae 	bl	80002ac <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	ec43 2b17 	vmov	d7, r2, r3
 8001758:	eeb0 0a47 	vmov.f32	s0, s14
 800175c:	eef0 0a67 	vmov.f32	s1, s15
 8001760:	f00c fa5f 	bl	800dc22 <sqrt>
 8001764:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
    double dotProduct = (LMV[0] * WV[0]) + (LMV[1] * WV[1]) + (LMV[2] * WV[2]);
 8001768:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800176c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001770:	f7fe ff52 	bl	8000618 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4690      	mov	r8, r2
 800177a:	4699      	mov	r9, r3
 800177c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001780:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001784:	f7fe ff48 	bl	8000618 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4640      	mov	r0, r8
 800178e:	4649      	mov	r1, r9
 8001790:	f7fe fd8c 	bl	80002ac <__adddf3>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4690      	mov	r8, r2
 800179a:	4699      	mov	r9, r3
 800179c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017a4:	f7fe ff38 	bl	8000618 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4640      	mov	r0, r8
 80017ae:	4649      	mov	r1, r9
 80017b0:	f7fe fd7c 	bl	80002ac <__adddf3>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    double angularError = atan(norm / dotProduct);
 80017bc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80017c0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80017c4:	f7ff f852 	bl	800086c <__aeabi_ddiv>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	ec43 2b17 	vmov	d7, r2, r3
 80017d0:	eeb0 0a47 	vmov.f32	s0, s14
 80017d4:	eef0 0a67 	vmov.f32	s1, s15
 80017d8:	f00c f826 	bl	800d828 <atan>
 80017dc:	ed87 0b24 	vstr	d0, [r7, #144]	; 0x90

    if(crossProduct[2] < 0)
 80017e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	f7ff f986 	bl	8000afc <__aeabi_dcmplt>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <LaneMarkerSteeringAngle+0x25e>
    {
    	angularError = angularError * (-1);
 80017f6:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80017fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017fe:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001802:	e9c7 4524 	strd	r4, r5, [r7, #144]	; 0x90
    }

    angularError = angularError * 1250;
 8001806:	a32e      	add	r3, pc, #184	; (adr r3, 80018c0 <LaneMarkerSteeringAngle+0x318>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001810:	f7fe ff02 	bl	8000618 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

    double laneMonitoring = LM_Left + LM_Right;
 800181c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001820:	edd7 7a02 	vldr	s15, [r7, #8]
 8001824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001828:	ee17 0a90 	vmov	r0, s15
 800182c:	f7fe fe9c 	bl	8000568 <__aeabi_f2d>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    laneMonitoring = LM_Right / laneMonitoring;
 8001838:	68b8      	ldr	r0, [r7, #8]
 800183a:	f7fe fe95 	bl	8000568 <__aeabi_f2d>
 800183e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001842:	f7ff f813 	bl	800086c <__aeabi_ddiv>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    laneMonitoring = (laneMonitoring - 0.5) * (-250);
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <LaneMarkerSteeringAngle+0x310>)
 8001854:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001858:	f7fe fd26 	bl	80002a8 <__aeabi_dsub>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	a312      	add	r3, pc, #72	; (adr r3, 80018b0 <LaneMarkerSteeringAngle+0x308>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe fed5 	bl	8000618 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

    if(roadID != 0)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00f      	beq.n	800189c <LaneMarkerSteeringAngle+0x2f4>
    {
    	angle = angularError + laneMonitoring;
 800187c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001880:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001884:	f7fe fd12 	bl	80002ac <__adddf3>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff f972 	bl	8000b78 <__aeabi_d2iz>
 8001894:	4603      	mov	r3, r0
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <LaneMarkerSteeringAngle+0x314>)
 8001898:	6013      	str	r3, [r2, #0]

    else
    {
    	angle = 0;
    }
}
 800189a:	e002      	b.n	80018a2 <LaneMarkerSteeringAngle+0x2fa>
    	angle = 0;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <LaneMarkerSteeringAngle+0x314>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
}
 80018a2:	bf00      	nop
 80018a4:	3798      	adds	r7, #152	; 0x98
 80018a6:	46bd      	mov	sp, r7
 80018a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ac:	f3af 8000 	nop.w
 80018b0:	00000000 	.word	0x00000000
 80018b4:	c06f4000 	.word	0xc06f4000
 80018b8:	3fe00000 	.word	0x3fe00000
 80018bc:	20000730 	.word	0x20000730
 80018c0:	00000000 	.word	0x00000000
 80018c4:	40938800 	.word	0x40938800

080018c8 <vTaskReceiveUART>:


void vTaskReceiveUART(void * argument)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b0fc      	sub	sp, #496	; 0x1f0
 80018cc:	af1c      	add	r7, sp, #112	; 0x70
 80018ce:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80018d2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80018d6:	6018      	str	r0, [r3, #0]
	char BufferUARTReceive[255];
	InputData_t ReceivedData;

	while(1)
	{
		if( xSemaphoreTake( myMutexUARTHandle, ( TickType_t ) portMAX_DELAY) == pdTRUE )
 80018d8:	4b54      	ldr	r3, [pc, #336]	; (8001a2c <vTaskReceiveUART+0x164>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	4618      	mov	r0, r3
 80018e2:	f004 fee1 	bl	80066a8 <xQueueSemaphoreTake>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	f040 809b 	bne.w	8001a24 <vTaskReceiveUART+0x15c>
		{
			HAL_UART_Receive(&huart1, (uint8_t*)BufferUARTReceive,207, 200);
 80018ee:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80018f2:	23c8      	movs	r3, #200	; 0xc8
 80018f4:	22cf      	movs	r2, #207	; 0xcf
 80018f6:	484e      	ldr	r0, [pc, #312]	; (8001a30 <vTaskReceiveUART+0x168>)
 80018f8:	f003 ff41 	bl	800577e <HAL_UART_Receive>

			sscanf(BufferUARTReceive, "*%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%d#",
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	1d19      	adds	r1, r3, #4
 8001902:	f107 0208 	add.w	r2, r7, #8
 8001906:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	3374      	adds	r3, #116	; 0x74
 8001910:	931b      	str	r3, [sp, #108]	; 0x6c
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	3370      	adds	r3, #112	; 0x70
 8001918:	931a      	str	r3, [sp, #104]	; 0x68
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	336c      	adds	r3, #108	; 0x6c
 8001920:	9319      	str	r3, [sp, #100]	; 0x64
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	3368      	adds	r3, #104	; 0x68
 8001928:	9318      	str	r3, [sp, #96]	; 0x60
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	3364      	adds	r3, #100	; 0x64
 8001930:	9317      	str	r3, [sp, #92]	; 0x5c
 8001932:	f107 0308 	add.w	r3, r7, #8
 8001936:	3360      	adds	r3, #96	; 0x60
 8001938:	9316      	str	r3, [sp, #88]	; 0x58
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	335c      	adds	r3, #92	; 0x5c
 8001940:	9315      	str	r3, [sp, #84]	; 0x54
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	3358      	adds	r3, #88	; 0x58
 8001948:	9314      	str	r3, [sp, #80]	; 0x50
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	3354      	adds	r3, #84	; 0x54
 8001950:	9313      	str	r3, [sp, #76]	; 0x4c
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	3350      	adds	r3, #80	; 0x50
 8001958:	9312      	str	r3, [sp, #72]	; 0x48
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	334c      	adds	r3, #76	; 0x4c
 8001960:	9311      	str	r3, [sp, #68]	; 0x44
 8001962:	f107 0308 	add.w	r3, r7, #8
 8001966:	3348      	adds	r3, #72	; 0x48
 8001968:	9310      	str	r3, [sp, #64]	; 0x40
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	3344      	adds	r3, #68	; 0x44
 8001970:	930f      	str	r3, [sp, #60]	; 0x3c
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	3340      	adds	r3, #64	; 0x40
 8001978:	930e      	str	r3, [sp, #56]	; 0x38
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	333c      	adds	r3, #60	; 0x3c
 8001980:	930d      	str	r3, [sp, #52]	; 0x34
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	332c      	adds	r3, #44	; 0x2c
 8001988:	930c      	str	r3, [sp, #48]	; 0x30
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	3328      	adds	r3, #40	; 0x28
 8001990:	930b      	str	r3, [sp, #44]	; 0x2c
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	3324      	adds	r3, #36	; 0x24
 8001998:	930a      	str	r3, [sp, #40]	; 0x28
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	3320      	adds	r3, #32
 80019a0:	9309      	str	r3, [sp, #36]	; 0x24
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	331c      	adds	r3, #28
 80019a8:	9308      	str	r3, [sp, #32]
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	3318      	adds	r3, #24
 80019b0:	9307      	str	r3, [sp, #28]
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	3338      	adds	r3, #56	; 0x38
 80019b8:	9306      	str	r3, [sp, #24]
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	3334      	adds	r3, #52	; 0x34
 80019c0:	9305      	str	r3, [sp, #20]
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	3330      	adds	r3, #48	; 0x30
 80019c8:	9304      	str	r3, [sp, #16]
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	3314      	adds	r3, #20
 80019d0:	9303      	str	r3, [sp, #12]
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	3310      	adds	r3, #16
 80019d8:	9302      	str	r3, [sp, #8]
 80019da:	f107 0308 	add.w	r3, r7, #8
 80019de:	330c      	adds	r3, #12
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	3308      	adds	r3, #8
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	460b      	mov	r3, r1
 80019ec:	4911      	ldr	r1, [pc, #68]	; (8001a34 <vTaskReceiveUART+0x16c>)
 80019ee:	f007 fd21 	bl	8009434 <siscanf>
					&ReceivedData.rightWorldCoordX_D1, &ReceivedData.rightWorldCoordY_D1,
					&ReceivedData.laneMarkerLeftIntersection_D1, &ReceivedData.laneMarkerRightIntersection_D1,
					&ReceivedData.roadIDunderLaneMarker);


			xQueueSend(xUARTRecieveDataQueue, &ReceivedData, portMAX_DELAY);
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <vTaskReceiveUART+0x170>)
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	f107 0108 	add.w	r1, r7, #8
 80019fa:	2300      	movs	r3, #0
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	f004 fc74 	bl	80062ec <xQueueGenericSend>
			xQueueSend(xMakeAlgorithmQueue2,  &ReceivedData, portMAX_DELAY);
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <vTaskReceiveUART+0x174>)
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	f107 0108 	add.w	r1, r7, #8
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a12:	f004 fc6b 	bl	80062ec <xQueueGenericSend>

			xSemaphoreGive( myMutexUARTHandle );
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <vTaskReceiveUART+0x164>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	f004 fc64 	bl	80062ec <xQueueGenericSend>
		}

		vTaskDelay(pdMS_TO_TICKS(60));
 8001a24:	203c      	movs	r0, #60	; 0x3c
 8001a26:	f005 fa19 	bl	8006e5c <vTaskDelay>
		if( xSemaphoreTake( myMutexUARTHandle, ( TickType_t ) portMAX_DELAY) == pdTRUE )
 8001a2a:	e755      	b.n	80018d8 <vTaskReceiveUART+0x10>
 8001a2c:	200007cc 	.word	0x200007cc
 8001a30:	200006d8 	.word	0x200006d8
 8001a34:	0800ee44 	.word	0x0800ee44
 8001a38:	200007bc 	.word	0x200007bc
 8001a3c:	200007c4 	.word	0x200007c4

08001a40 <vTaskMakeAlgorithm>:
	}
}


void vTaskMakeAlgorithm(void *argument)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b0a8      	sub	sp, #160	; 0xa0
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	flags_t   Flages_Sets;
	TTCCalculation_t TCC_Data;

	while(1)
	{
		Flages_Sets.Warning_Flag=0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f887 3020 	strb.w	r3, [r7, #32]
		Flages_Sets.Decreasing_Speed_Flag=0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		Flages_Sets.Full_Braking_Flag=0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		Flages_Sets.Turn_Right=0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		Flages_Sets.Turn_Left=0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		Flages_Sets.RangeThresholdFlag=0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		xQueueReceive(xUARTRecieveDataQueue, &RecievedData, portMAX_DELAY);
 8001a6c:	4bb0      	ldr	r3, [pc, #704]	; (8001d30 <vTaskMakeAlgorithm+0x2f0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f004 fd35 	bl	80064e8 <xQueueReceive>

		if((RecievedData.rangeOfLRR>0))
 8001a7e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8a:	dd13      	ble.n	8001ab4 <vTaskMakeAlgorithm+0x74>
		{
			TCC_Data.TTC_LRR = RecievedData.rangeOfLRR / (abs(RecievedData.relativeSpeedOfLRR));
 8001a8c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001a90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a98:	ee17 3a90 	vmov	r3, s15
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bfb8      	it	lt
 8001aa0:	425b      	neglt	r3, r3
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aae:	edc7 7a03 	vstr	s15, [r7, #12]
 8001ab2:	e001      	b.n	8001ab8 <vTaskMakeAlgorithm+0x78>
		}

		else
		{
			TCC_Data.TTC_LRR = 2000;
 8001ab4:	4b9f      	ldr	r3, [pc, #636]	; (8001d34 <vTaskMakeAlgorithm+0x2f4>)
 8001ab6:	60fb      	str	r3, [r7, #12]
		}

		if((RecievedData.rangeOfSRR>0))
 8001ab8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001abc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	dd13      	ble.n	8001aee <vTaskMakeAlgorithm+0xae>
		{
			TCC_Data.TTC_SRR = RecievedData.rangeOfSRR / (abs(RecievedData.relativeSpeedOfSRR));
 8001ac6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001aca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad2:	ee17 3a90 	vmov	r3, s15
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bfb8      	it	lt
 8001ada:	425b      	neglt	r3, r3
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ae8:	edc7 7a02 	vstr	s15, [r7, #8]
 8001aec:	e001      	b.n	8001af2 <vTaskMakeAlgorithm+0xb2>
		}

		else
		{
			TCC_Data.TTC_SRR = 2000;
 8001aee:	4b91      	ldr	r3, [pc, #580]	; (8001d34 <vTaskMakeAlgorithm+0x2f4>)
 8001af0:	60bb      	str	r3, [r7, #8]
		}

		if((RecievedData.rangeOfFLR>0))
 8001af2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001af6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afe:	dd3d      	ble.n	8001b7c <vTaskMakeAlgorithm+0x13c>
		{
			TCC_Data.TTC_FLR = (RecievedData.rangeOfFLR * (cos(RecievedData.azimuthAngleOfFLR * (M_PI / 180.00)))) / (abs(RecievedData.relativeSpeedOfFLR));
 8001b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd30 	bl	8000568 <__aeabi_f2d>
 8001b08:	4604      	mov	r4, r0
 8001b0a:	460d      	mov	r5, r1
 8001b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd2a 	bl	8000568 <__aeabi_f2d>
 8001b14:	a384      	add	r3, pc, #528	; (adr r3, 8001d28 <vTaskMakeAlgorithm+0x2e8>)
 8001b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1a:	f7fe fd7d 	bl	8000618 <__aeabi_dmul>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	ec43 2b17 	vmov	d7, r2, r3
 8001b26:	eeb0 0a47 	vmov.f32	s0, s14
 8001b2a:	eef0 0a67 	vmov.f32	s1, s15
 8001b2e:	f00c f81b 	bl	800db68 <cos>
 8001b32:	ec53 2b10 	vmov	r2, r3, d0
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f7fe fd6d 	bl	8000618 <__aeabi_dmul>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4614      	mov	r4, r2
 8001b44:	461d      	mov	r5, r3
 8001b46:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4e:	ee17 3a90 	vmov	r3, s15
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bfb8      	it	lt
 8001b56:	425b      	neglt	r3, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fcf3 	bl	8000544 <__aeabi_i2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4620      	mov	r0, r4
 8001b64:	4629      	mov	r1, r5
 8001b66:	f7fe fe81 	bl	800086c <__aeabi_ddiv>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7ff f849 	bl	8000c08 <__aeabi_d2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	e001      	b.n	8001b80 <vTaskMakeAlgorithm+0x140>
		}

		else
		{
			TCC_Data.TTC_FLR = 1000;
 8001b7c:	4b6e      	ldr	r3, [pc, #440]	; (8001d38 <vTaskMakeAlgorithm+0x2f8>)
 8001b7e:	61bb      	str	r3, [r7, #24]
		}

		if((RecievedData.rangeOfFRR>0))
 8001b80:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001b84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	dd3d      	ble.n	8001c0a <vTaskMakeAlgorithm+0x1ca>
		{
			TCC_Data.TTC_FRR = (RecievedData.rangeOfFRR * (cos(RecievedData.azimuthAngleOfFRR * (M_PI / 180.00)))) / (abs(RecievedData.relativeSpeedOfFRR));
 8001b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fce9 	bl	8000568 <__aeabi_f2d>
 8001b96:	4604      	mov	r4, r0
 8001b98:	460d      	mov	r5, r1
 8001b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fce3 	bl	8000568 <__aeabi_f2d>
 8001ba2:	a361      	add	r3, pc, #388	; (adr r3, 8001d28 <vTaskMakeAlgorithm+0x2e8>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fd36 	bl	8000618 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	ec43 2b17 	vmov	d7, r2, r3
 8001bb4:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb8:	eef0 0a67 	vmov.f32	s1, s15
 8001bbc:	f00b ffd4 	bl	800db68 <cos>
 8001bc0:	ec53 2b10 	vmov	r2, r3, d0
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe fd26 	bl	8000618 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4614      	mov	r4, r2
 8001bd2:	461d      	mov	r5, r3
 8001bd4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bdc:	ee17 3a90 	vmov	r3, s15
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bfb8      	it	lt
 8001be4:	425b      	neglt	r3, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fcac 	bl	8000544 <__aeabi_i2d>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	f7fe fe3a 	bl	800086c <__aeabi_ddiv>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f7ff f802 	bl	8000c08 <__aeabi_d2f>
 8001c04:	4603      	mov	r3, r0
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	e001      	b.n	8001c0e <vTaskMakeAlgorithm+0x1ce>
		}

		else
		{
			TCC_Data.TTC_FRR = 1000;
 8001c0a:	4b4b      	ldr	r3, [pc, #300]	; (8001d38 <vTaskMakeAlgorithm+0x2f8>)
 8001c0c:	613b      	str	r3, [r7, #16]
		}

		if((RecievedData.rangeOfBRR>0))
 8001c0e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	dd3d      	ble.n	8001c98 <vTaskMakeAlgorithm+0x258>
		{
			TCC_Data.TTC_BRR = (RecievedData.rangeOfBRR * (cos(RecievedData.azimuthAngleOfBRR * (M_PI / 180.00)))) / (abs(RecievedData.relativeSpeedOfBRR));
 8001c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fca2 	bl	8000568 <__aeabi_f2d>
 8001c24:	4604      	mov	r4, r0
 8001c26:	460d      	mov	r5, r1
 8001c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc9c 	bl	8000568 <__aeabi_f2d>
 8001c30:	a33d      	add	r3, pc, #244	; (adr r3, 8001d28 <vTaskMakeAlgorithm+0x2e8>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe fcef 	bl	8000618 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	ec43 2b17 	vmov	d7, r2, r3
 8001c42:	eeb0 0a47 	vmov.f32	s0, s14
 8001c46:	eef0 0a67 	vmov.f32	s1, s15
 8001c4a:	f00b ff8d 	bl	800db68 <cos>
 8001c4e:	ec53 2b10 	vmov	r2, r3, d0
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fcdf 	bl	8000618 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4614      	mov	r4, r2
 8001c60:	461d      	mov	r5, r3
 8001c62:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c6a:	ee17 3a90 	vmov	r3, s15
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bfb8      	it	lt
 8001c72:	425b      	neglt	r3, r3
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc65 	bl	8000544 <__aeabi_i2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4629      	mov	r1, r5
 8001c82:	f7fe fdf3 	bl	800086c <__aeabi_ddiv>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe ffbb 	bl	8000c08 <__aeabi_d2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	e001      	b.n	8001c9c <vTaskMakeAlgorithm+0x25c>
		}

		else
		{
			TCC_Data.TTC_BRR = 1000;
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <vTaskMakeAlgorithm+0x2f8>)
 8001c9a:	617b      	str	r3, [r7, #20]
		}

		if((RecievedData.rangeOfBLR>0))
 8001c9c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001ca0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca8:	dd48      	ble.n	8001d3c <vTaskMakeAlgorithm+0x2fc>
		{
			TCC_Data.TTC_BLR = (RecievedData.rangeOfBLR * (cos(RecievedData.azimuthAngleOfBLR * (M_PI / 180.00)))) / (abs(RecievedData.relativeSpeedOfBLR));
 8001caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc5b 	bl	8000568 <__aeabi_f2d>
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	460d      	mov	r5, r1
 8001cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc55 	bl	8000568 <__aeabi_f2d>
 8001cbe:	a31a      	add	r3, pc, #104	; (adr r3, 8001d28 <vTaskMakeAlgorithm+0x2e8>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe fca8 	bl	8000618 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	ec43 2b17 	vmov	d7, r2, r3
 8001cd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd4:	eef0 0a67 	vmov.f32	s1, s15
 8001cd8:	f00b ff46 	bl	800db68 <cos>
 8001cdc:	ec53 2b10 	vmov	r2, r3, d0
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	f7fe fc98 	bl	8000618 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4614      	mov	r4, r2
 8001cee:	461d      	mov	r5, r3
 8001cf0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf8:	ee17 3a90 	vmov	r3, s15
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bfb8      	it	lt
 8001d00:	425b      	neglt	r3, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc1e 	bl	8000544 <__aeabi_i2d>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	4629      	mov	r1, r5
 8001d10:	f7fe fdac 	bl	800086c <__aeabi_ddiv>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7fe ff74 	bl	8000c08 <__aeabi_d2f>
 8001d20:	4603      	mov	r3, r0
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	e00c      	b.n	8001d40 <vTaskMakeAlgorithm+0x300>
 8001d26:	bf00      	nop
 8001d28:	a2529d39 	.word	0xa2529d39
 8001d2c:	3f91df46 	.word	0x3f91df46
 8001d30:	200007bc 	.word	0x200007bc
 8001d34:	44fa0000 	.word	0x44fa0000
 8001d38:	447a0000 	.word	0x447a0000
		}

		else
		{
			TCC_Data.TTC_BLR = 1000;
 8001d3c:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <vTaskMakeAlgorithm+0x3b8>)
 8001d3e:	61fb      	str	r3, [r7, #28]
		}

		//=================================== setting Flags ===========================================

		if(TCC_Data.TTC_LRR<WARNING_T)
 8001d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d44:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	d502      	bpl.n	8001d58 <vTaskMakeAlgorithm+0x318>
		{
			Flages_Sets.Warning_Flag=1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f887 3020 	strb.w	r3, [r7, #32]
		}

		if(TCC_Data.TTC_LRR<HALF_BRAKE_T)
 8001d58:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d5c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d68:	d502      	bpl.n	8001d70 <vTaskMakeAlgorithm+0x330>
		{
			Flages_Sets.Decreasing_Speed_Flag=1;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		}

		if(TCC_Data.TTC_SRR<FULL_BRAKE_T)
 8001d70:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	d502      	bpl.n	8001d88 <vTaskMakeAlgorithm+0x348>
		{
			Flages_Sets.Full_Braking_Flag=1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		}

		if((TCC_Data.TTC_FRR>TCC_Data.TTC_LRR))
 8001d88:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	dd02      	ble.n	8001da0 <vTaskMakeAlgorithm+0x360>
		{
			Flages_Sets.Turn_Right=1;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}

		if((TCC_Data.TTC_FLR>TCC_Data.TTC_LRR))
 8001da0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001da4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db0:	dd02      	ble.n	8001db8 <vTaskMakeAlgorithm+0x378>
		{
			Flages_Sets.Turn_Left=1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}

		if((RecievedData.rangeOfLRR<THRESHOLD_DISTANCE) &&  (RecievedData.rangeOfLRR!=0))
 8001db8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001dbc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	d509      	bpl.n	8001dde <vTaskMakeAlgorithm+0x39e>
 8001dca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001dce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	d002      	beq.n	8001dde <vTaskMakeAlgorithm+0x39e>
		{
			Flages_Sets.RangeThresholdFlag=1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}

		xQueueSend(xMakeAlgorithmQueue, &Flages_Sets, portMAX_DELAY);
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <vTaskMakeAlgorithm+0x3bc>)
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	f107 0120 	add.w	r1, r7, #32
 8001de6:	2300      	movs	r3, #0
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	f004 fa7e 	bl	80062ec <xQueueGenericSend>

		vTaskDelay(pdMS_TO_TICKS(60));
 8001df0:	203c      	movs	r0, #60	; 0x3c
 8001df2:	f005 f833 	bl	8006e5c <vTaskDelay>
		Flages_Sets.Warning_Flag=0;
 8001df6:	e627      	b.n	8001a48 <vTaskMakeAlgorithm+0x8>
 8001df8:	447a0000 	.word	0x447a0000
 8001dfc:	200007c0 	.word	0x200007c0

08001e00 <vTaskUpdateABS>:
	}
}

void vTaskUpdateABS(void * argument)
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b0aa      	sub	sp, #168	; 0xa8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	ControlData_t Resulted_Data;
	flags_t   Flages_Sets;

	while(1)
	{
		xQueueReceive(xMakeAlgorithmQueue, &Flages_Sets, portMAX_DELAY);
 8001e08:	4ba3      	ldr	r3, [pc, #652]	; (8002098 <vTaskUpdateABS+0x298>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f107 0108 	add.w	r1, r7, #8
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	4618      	mov	r0, r3
 8001e16:	f004 fb67 	bl	80064e8 <xQueueReceive>
		xQueueReceive(xMakeAlgorithmQueue2, &RecievedData, portMAX_DELAY);
 8001e1a:	4ba0      	ldr	r3, [pc, #640]	; (800209c <vTaskUpdateABS+0x29c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001e22:	f04f 32ff 	mov.w	r2, #4294967295
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 fb5e 	bl	80064e8 <xQueueReceive>

		Resulted_Data.laneKeeping = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]

		LaneMarkerSteeringAngle(RecievedData.laneMarkerCoordX_D0,RecievedData.laneMarkerCoordY_D0,RecievedData.laneMarkerCoordX_D1,
 8001e30:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001e34:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001e38:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8001e3c:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8001e40:	edd7 5a23 	vldr	s11, [r7, #140]	; 0x8c
 8001e44:	ed97 5a24 	vldr	s10, [r7, #144]	; 0x90
 8001e48:	ed97 3a25 	vldr	s6, [r7, #148]	; 0x94
 8001e4c:	edd7 3a26 	vldr	s7, [r7, #152]	; 0x98
 8001e50:	ed97 4a27 	vldr	s8, [r7, #156]	; 0x9c
 8001e54:	edd7 4a28 	vldr	s9, [r7, #160]	; 0xa0
				RecievedData.laneMarkerCoordY_D1,RecievedData.rightWorldCoordX_D0,RecievedData.rightWorldCoordY_D0,
				RecievedData.rightWorldCoordX_D1,RecievedData.rightWorldCoordY_D1,RecievedData.laneMarkerLeftIntersection_D1,
				RecievedData.laneMarkerRightIntersection_D1,RecievedData.roadIDunderLaneMarker);
 8001e58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
		LaneMarkerSteeringAngle(RecievedData.laneMarkerCoordX_D0,RecievedData.laneMarkerCoordY_D0,RecievedData.laneMarkerCoordX_D1,
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	eef0 2a45 	vmov.f32	s5, s10
 8001e62:	eeb0 2a65 	vmov.f32	s4, s11
 8001e66:	eef0 1a46 	vmov.f32	s3, s12
 8001e6a:	eeb0 1a66 	vmov.f32	s2, s13
 8001e6e:	eef0 0a47 	vmov.f32	s1, s14
 8001e72:	eeb0 0a67 	vmov.f32	s0, s15
 8001e76:	f7ff fb97 	bl	80015a8 <LaneMarkerSteeringAngle>

		if (laneKeeping_flag == 1)
 8001e7a:	4b89      	ldr	r3, [pc, #548]	; (80020a0 <vTaskUpdateABS+0x2a0>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d10d      	bne.n	8001e9e <vTaskUpdateABS+0x9e>
		{
			if (RecievedData.currentVelocity > 13)
 8001e82:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001e86:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8001e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	dd02      	ble.n	8001e9a <vTaskUpdateABS+0x9a>
			{
				Resulted_Data.brake = 90;
 8001e94:	235a      	movs	r3, #90	; 0x5a
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e001      	b.n	8001e9e <vTaskUpdateABS+0x9e>
			}

			else
			{
				Resulted_Data.brake = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
			}
		}

		if(RxData[0] != 2 && RecievedData.rangeOfLRR == 0 && RecievedData.rangeOfFRR == 0 && RecievedData.rangeOfFLR == 0)
 8001e9e:	4b81      	ldr	r3, [pc, #516]	; (80020a4 <vTaskUpdateABS+0x2a4>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d034      	beq.n	8001f10 <vTaskUpdateABS+0x110>
 8001ea6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001eaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb2:	d12d      	bne.n	8001f10 <vTaskUpdateABS+0x110>
 8001eb4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001eb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec0:	d126      	bne.n	8001f10 <vTaskUpdateABS+0x110>
 8001ec2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ec6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ece:	d11f      	bne.n	8001f10 <vTaskUpdateABS+0x110>
		{
			Resulted_Data.control = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
			SteerringAngle = 0;
 8001ed4:	4974      	ldr	r1, [pc, #464]	; (80020a8 <vTaskUpdateABS+0x2a8>)
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	e9c1 2300 	strd	r2, r3, [r1]
			Resulted_Data.laneKeeping = 1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	623b      	str	r3, [r7, #32]

			if (laneKeeping_flag == 0)
 8001ee6:	4b6e      	ldr	r3, [pc, #440]	; (80020a0 <vTaskUpdateABS+0x2a0>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d110      	bne.n	8001f10 <vTaskUpdateABS+0x110>
			{
				laneKeeping_flag = 1;
 8001eee:	4b6c      	ldr	r3, [pc, #432]	; (80020a0 <vTaskUpdateABS+0x2a0>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]

				if (RecievedData.currentVelocity > 13)
 8001ef4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001ef8:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8001efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	dd02      	ble.n	8001f0c <vTaskUpdateABS+0x10c>
				{
					Resulted_Data.brake = 90;
 8001f06:	235a      	movs	r3, #90	; 0x5a
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e001      	b.n	8001f10 <vTaskUpdateABS+0x110>
				}

				else
				{
					Resulted_Data.brake = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
				}
			}
		}

		if(Lane == MIDDLE_LANE && RxData[0] == 2 && (RecievedData.rangeOfFRR > 80 || RecievedData.rangeOfFRR == 0 || RecievedData.rangeOfFLR > 80 || RecievedData.rangeOfFLR == 0))
 8001f10:	4b66      	ldr	r3, [pc, #408]	; (80020ac <vTaskUpdateABS+0x2ac>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	f040 816d 	bne.w	80021f4 <vTaskUpdateABS+0x3f4>
 8001f1a:	4b62      	ldr	r3, [pc, #392]	; (80020a4 <vTaskUpdateABS+0x2a4>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	f040 8168 	bne.w	80021f4 <vTaskUpdateABS+0x3f4>
 8001f24:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f28:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80020cc <vTaskUpdateABS+0x2cc>
 8001f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	dc17      	bgt.n	8001f66 <vTaskUpdateABS+0x166>
 8001f36:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f42:	d010      	beq.n	8001f66 <vTaskUpdateABS+0x166>
 8001f44:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f48:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80020cc <vTaskUpdateABS+0x2cc>
 8001f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f54:	dc07      	bgt.n	8001f66 <vTaskUpdateABS+0x166>
 8001f56:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f62:	f040 8147 	bne.w	80021f4 <vTaskUpdateABS+0x3f4>
		{
			if(RecievedData.rangeOfFRR > 80 || RecievedData.rangeOfFRR == 0)
 8001f66:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f6a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80020cc <vTaskUpdateABS+0x2cc>
 8001f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f76:	dc07      	bgt.n	8001f88 <vTaskUpdateABS+0x188>
 8001f78:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f84:	f040 80a4 	bne.w	80020d0 <vTaskUpdateABS+0x2d0>
			{
				SteerringAngle = -((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI);
 8001f88:	4947      	ldr	r1, [pc, #284]	; (80020a8 <vTaskUpdateABS+0x2a8>)
 8001f8a:	a341      	add	r3, pc, #260	; (adr r3, 8002090 <vTaskUpdateABS+0x290>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	e9c1 2300 	strd	r2, r3, [r1]
				Resulted_Data.control = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
				steering_on = 1;
 8001f98:	4b45      	ldr	r3, [pc, #276]	; (80020b0 <vTaskUpdateABS+0x2b0>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]

				if (heading_flag == 0)
 8001f9e:	4b45      	ldr	r3, [pc, #276]	; (80020b4 <vTaskUpdateABS+0x2b4>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10b      	bne.n	8001fbe <vTaskUpdateABS+0x1be>
				{
					heading = RecievedData.Heading;
 8001fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fadd 	bl	8000568 <__aeabi_f2d>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4941      	ldr	r1, [pc, #260]	; (80020b8 <vTaskUpdateABS+0x2b8>)
 8001fb4:	e9c1 2300 	strd	r2, r3, [r1]
					heading_flag = 1;
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <vTaskUpdateABS+0x2b4>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
				}

				if (SteerringAngle == -((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI) && RecievedData.Heading < (heading + 10) && Park_flag == 0)
 8001fbe:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <vTaskUpdateABS+0x2a8>)
 8001fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fc4:	a332      	add	r3, pc, #200	; (adr r3, 8002090 <vTaskUpdateABS+0x290>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	f7fe fd8d 	bl	8000ae8 <__aeabi_dcmpeq>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d023      	beq.n	800201c <vTaskUpdateABS+0x21c>
 8001fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fac6 	bl	8000568 <__aeabi_f2d>
 8001fdc:	4604      	mov	r4, r0
 8001fde:	460d      	mov	r5, r1
 8001fe0:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <vTaskUpdateABS+0x2b8>)
 8001fe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b34      	ldr	r3, [pc, #208]	; (80020bc <vTaskUpdateABS+0x2bc>)
 8001fec:	f7fe f95e 	bl	80002ac <__adddf3>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	f7fe fd80 	bl	8000afc <__aeabi_dcmplt>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00c      	beq.n	800201c <vTaskUpdateABS+0x21c>
 8002002:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <vTaskUpdateABS+0x2c0>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d108      	bne.n	800201c <vTaskUpdateABS+0x21c>
				{
					SteerringAngle = -((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI);
 800200a:	4927      	ldr	r1, [pc, #156]	; (80020a8 <vTaskUpdateABS+0x2a8>)
 800200c:	a320      	add	r3, pc, #128	; (adr r3, 8002090 <vTaskUpdateABS+0x290>)
 800200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002012:	e9c1 2300 	strd	r2, r3, [r1]
					Resulted_Data.control = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	e035      	b.n	8002088 <vTaskUpdateABS+0x288>
				}

				else if(SteerringAngle == -((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI) && angle < 1 && angle > -1)
 800201c:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <vTaskUpdateABS+0x2a8>)
 800201e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002022:	a31b      	add	r3, pc, #108	; (adr r3, 8002090 <vTaskUpdateABS+0x290>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	f7fe fd5e 	bl	8000ae8 <__aeabi_dcmpeq>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01d      	beq.n	800206e <vTaskUpdateABS+0x26e>
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <vTaskUpdateABS+0x2c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	dc19      	bgt.n	800206e <vTaskUpdateABS+0x26e>
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <vTaskUpdateABS+0x2c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db15      	blt.n	800206e <vTaskUpdateABS+0x26e>
				{
					Lane_nextState++;
 8002042:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <vTaskUpdateABS+0x2c8>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <vTaskUpdateABS+0x2c8>)
 800204c:	701a      	strb	r2, [r3, #0]
					SteerringAngle = 0;
 800204e:	4916      	ldr	r1, [pc, #88]	; (80020a8 <vTaskUpdateABS+0x2a8>)
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	e9c1 2300 	strd	r2, r3, [r1]
					Resulted_Data.laneKeeping = 1;
 800205c:	2301      	movs	r3, #1
 800205e:	623b      	str	r3, [r7, #32]
					heading_flag = 0;
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <vTaskUpdateABS+0x2b4>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
					Park_flag = 0;
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <vTaskUpdateABS+0x2c0>)
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e00c      	b.n	8002088 <vTaskUpdateABS+0x288>
				}

				else
				{
					SteerringAngle = 0;
 800206e:	490e      	ldr	r1, [pc, #56]	; (80020a8 <vTaskUpdateABS+0x2a8>)
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9c1 2300 	strd	r2, r3, [r1]
					Resulted_Data.laneKeeping = 1;
 800207c:	2301      	movs	r3, #1
 800207e:	623b      	str	r3, [r7, #32]
					Park_flag = 1;
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <vTaskUpdateABS+0x2c0>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
				if (SteerringAngle == -((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI) && RecievedData.Heading < (heading + 10) && Park_flag == 0)
 8002086:	e0b4      	b.n	80021f2 <vTaskUpdateABS+0x3f2>
 8002088:	e0b3      	b.n	80021f2 <vTaskUpdateABS+0x3f2>
 800208a:	bf00      	nop
 800208c:	f3af 8000 	nop.w
 8002090:	cceb9138 	.word	0xcceb9138
 8002094:	c04c0dbe 	.word	0xc04c0dbe
 8002098:	200007c0 	.word	0x200007c0
 800209c:	200007c4 	.word	0x200007c4
 80020a0:	20000741 	.word	0x20000741
 80020a4:	200007a0 	.word	0x200007a0
 80020a8:	20000728 	.word	0x20000728
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000722 	.word	0x20000722
 80020b4:	20000740 	.word	0x20000740
 80020b8:	20000738 	.word	0x20000738
 80020bc:	40240000 	.word	0x40240000
 80020c0:	20000721 	.word	0x20000721
 80020c4:	20000730 	.word	0x20000730
 80020c8:	20000001 	.word	0x20000001
 80020cc:	42a00000 	.word	0x42a00000
				}
			}

			else if(RecievedData.rangeOfFLR > 80 || RecievedData.rangeOfFLR == 0)
 80020d0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80020d4:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80020cc <vTaskUpdateABS+0x2cc>
 80020d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e0:	dc07      	bgt.n	80020f2 <vTaskUpdateABS+0x2f2>
 80020e2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80020e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	f040 81e9 	bne.w	80024c4 <vTaskUpdateABS+0x6c4>
			{
				SteerringAngle = ((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI);
 80020f2:	498b      	ldr	r1, [pc, #556]	; (8002320 <vTaskUpdateABS+0x520>)
 80020f4:	a386      	add	r3, pc, #536	; (adr r3, 8002310 <vTaskUpdateABS+0x510>)
 80020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]
				Resulted_Data.control = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
				steering_on = 1;
 8002102:	4b88      	ldr	r3, [pc, #544]	; (8002324 <vTaskUpdateABS+0x524>)
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]

				if (heading_flag == 0)
 8002108:	4b87      	ldr	r3, [pc, #540]	; (8002328 <vTaskUpdateABS+0x528>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10b      	bne.n	8002128 <vTaskUpdateABS+0x328>
				{
					heading = RecievedData.Heading;
 8002110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa28 	bl	8000568 <__aeabi_f2d>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4983      	ldr	r1, [pc, #524]	; (800232c <vTaskUpdateABS+0x52c>)
 800211e:	e9c1 2300 	strd	r2, r3, [r1]
					heading_flag = 1;
 8002122:	4b81      	ldr	r3, [pc, #516]	; (8002328 <vTaskUpdateABS+0x528>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
				}

				if (SteerringAngle == ((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI) && RecievedData.Heading > (heading - 10)  && Park_flag == 0)
 8002128:	4b7d      	ldr	r3, [pc, #500]	; (8002320 <vTaskUpdateABS+0x520>)
 800212a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800212e:	a378      	add	r3, pc, #480	; (adr r3, 8002310 <vTaskUpdateABS+0x510>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fcd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d023      	beq.n	8002186 <vTaskUpdateABS+0x386>
 800213e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fa11 	bl	8000568 <__aeabi_f2d>
 8002146:	4604      	mov	r4, r0
 8002148:	460d      	mov	r5, r1
 800214a:	4b78      	ldr	r3, [pc, #480]	; (800232c <vTaskUpdateABS+0x52c>)
 800214c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	4b76      	ldr	r3, [pc, #472]	; (8002330 <vTaskUpdateABS+0x530>)
 8002156:	f7fe f8a7 	bl	80002a8 <__aeabi_dsub>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4620      	mov	r0, r4
 8002160:	4629      	mov	r1, r5
 8002162:	f7fe fce9 	bl	8000b38 <__aeabi_dcmpgt>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00c      	beq.n	8002186 <vTaskUpdateABS+0x386>
 800216c:	4b71      	ldr	r3, [pc, #452]	; (8002334 <vTaskUpdateABS+0x534>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d108      	bne.n	8002186 <vTaskUpdateABS+0x386>
				{
					SteerringAngle = ((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI);
 8002174:	496a      	ldr	r1, [pc, #424]	; (8002320 <vTaskUpdateABS+0x520>)
 8002176:	a366      	add	r3, pc, #408	; (adr r3, 8002310 <vTaskUpdateABS+0x510>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	e9c1 2300 	strd	r2, r3, [r1]
					Resulted_Data.control = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	e035      	b.n	80021f2 <vTaskUpdateABS+0x3f2>
				}

				else if(SteerringAngle == ((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI) && angle < 1 && angle > -1)
 8002186:	4b66      	ldr	r3, [pc, #408]	; (8002320 <vTaskUpdateABS+0x520>)
 8002188:	e9d3 0100 	ldrd	r0, r1, [r3]
 800218c:	a360      	add	r3, pc, #384	; (adr r3, 8002310 <vTaskUpdateABS+0x510>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	f7fe fca9 	bl	8000ae8 <__aeabi_dcmpeq>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01d      	beq.n	80021d8 <vTaskUpdateABS+0x3d8>
 800219c:	4b66      	ldr	r3, [pc, #408]	; (8002338 <vTaskUpdateABS+0x538>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	dc19      	bgt.n	80021d8 <vTaskUpdateABS+0x3d8>
 80021a4:	4b64      	ldr	r3, [pc, #400]	; (8002338 <vTaskUpdateABS+0x538>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	db15      	blt.n	80021d8 <vTaskUpdateABS+0x3d8>
				{
					Lane_nextState--;
 80021ac:	4b63      	ldr	r3, [pc, #396]	; (800233c <vTaskUpdateABS+0x53c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	4b61      	ldr	r3, [pc, #388]	; (800233c <vTaskUpdateABS+0x53c>)
 80021b6:	701a      	strb	r2, [r3, #0]
					SteerringAngle = 0;
 80021b8:	4959      	ldr	r1, [pc, #356]	; (8002320 <vTaskUpdateABS+0x520>)
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	e9c1 2300 	strd	r2, r3, [r1]
					Resulted_Data.laneKeeping = 1;
 80021c6:	2301      	movs	r3, #1
 80021c8:	623b      	str	r3, [r7, #32]
					heading_flag = 0;
 80021ca:	4b57      	ldr	r3, [pc, #348]	; (8002328 <vTaskUpdateABS+0x528>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
					Park_flag = 0;
 80021d0:	4b58      	ldr	r3, [pc, #352]	; (8002334 <vTaskUpdateABS+0x534>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	e00c      	b.n	80021f2 <vTaskUpdateABS+0x3f2>
				}

				else
				{
					SteerringAngle = 0;
 80021d8:	4951      	ldr	r1, [pc, #324]	; (8002320 <vTaskUpdateABS+0x520>)
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9c1 2300 	strd	r2, r3, [r1]
					Resulted_Data.laneKeeping = 1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	623b      	str	r3, [r7, #32]
					Park_flag = 1;
 80021ea:	4b52      	ldr	r3, [pc, #328]	; (8002334 <vTaskUpdateABS+0x534>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
			if(RecievedData.rangeOfFRR > 80 || RecievedData.rangeOfFRR == 0)
 80021f0:	e168      	b.n	80024c4 <vTaskUpdateABS+0x6c4>
 80021f2:	e167      	b.n	80024c4 <vTaskUpdateABS+0x6c4>
				}
			}
		}

		else if (((Flages_Sets.Full_Braking_Flag) &&  (Flages_Sets.Decreasing_Speed_Flag)) || ((RecievedData.rangeOfLRR<5) && (RecievedData.rangeOfLRR>0)))
 80021f4:	7abb      	ldrb	r3, [r7, #10]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <vTaskUpdateABS+0x400>
 80021fa:	7a7b      	ldrb	r3, [r7, #9]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d111      	bne.n	8002224 <vTaskUpdateABS+0x424>
 8002200:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002204:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002210:	f140 809a 	bpl.w	8002348 <vTaskUpdateABS+0x548>
 8002214:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002220:	f340 8092 	ble.w	8002348 <vTaskUpdateABS+0x548>
		{
			if((Flages_Sets.Turn_Right) && (RecievedData.relativeSpeedOfBRR>=0) && (brake_flag != 1) && ((Lane == LEFT_LANE) || (Lane == MIDDLE_LANE)) )
 8002224:	7b3b      	ldrb	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d02e      	beq.n	8002288 <vTaskUpdateABS+0x488>
 800222a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800222e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002236:	db27      	blt.n	8002288 <vTaskUpdateABS+0x488>
 8002238:	4b41      	ldr	r3, [pc, #260]	; (8002340 <vTaskUpdateABS+0x540>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d023      	beq.n	8002288 <vTaskUpdateABS+0x488>
 8002240:	4b40      	ldr	r3, [pc, #256]	; (8002344 <vTaskUpdateABS+0x544>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d003      	beq.n	8002250 <vTaskUpdateABS+0x450>
 8002248:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <vTaskUpdateABS+0x544>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d11b      	bne.n	8002288 <vTaskUpdateABS+0x488>
			{
				SteerringAngle = -((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI);
 8002250:	4933      	ldr	r1, [pc, #204]	; (8002320 <vTaskUpdateABS+0x520>)
 8002252:	a331      	add	r3, pc, #196	; (adr r3, 8002318 <vTaskUpdateABS+0x518>)
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	e9c1 2300 	strd	r2, r3, [r1]
				Resulted_Data.control = 1;
 800225c:	2301      	movs	r3, #1
 800225e:	613b      	str	r3, [r7, #16]
				steering_on = 1;
 8002260:	4b30      	ldr	r3, [pc, #192]	; (8002324 <vTaskUpdateABS+0x524>)
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]

				if (heading_flag == 0)
 8002266:	4b30      	ldr	r3, [pc, #192]	; (8002328 <vTaskUpdateABS+0x528>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d14d      	bne.n	800230a <vTaskUpdateABS+0x50a>
				{
					heading = RecievedData.Heading;
 800226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f979 	bl	8000568 <__aeabi_f2d>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	492c      	ldr	r1, [pc, #176]	; (800232c <vTaskUpdateABS+0x52c>)
 800227c:	e9c1 2300 	strd	r2, r3, [r1]
					heading_flag = 1;
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <vTaskUpdateABS+0x528>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
				if (heading_flag == 0)
 8002286:	e040      	b.n	800230a <vTaskUpdateABS+0x50a>
				}
			}

			else if((Flages_Sets.Turn_Left) && (RecievedData.relativeSpeedOfBLR>=0) && (brake_flag != 1) && ((Lane == RIGHT_LANE) || (Lane == MIDDLE_LANE)) )
 8002288:	7b7b      	ldrb	r3, [r7, #13]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d02e      	beq.n	80022ec <vTaskUpdateABS+0x4ec>
 800228e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002292:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229a:	db27      	blt.n	80022ec <vTaskUpdateABS+0x4ec>
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <vTaskUpdateABS+0x540>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d023      	beq.n	80022ec <vTaskUpdateABS+0x4ec>
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <vTaskUpdateABS+0x544>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d003      	beq.n	80022b4 <vTaskUpdateABS+0x4b4>
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <vTaskUpdateABS+0x544>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d11b      	bne.n	80022ec <vTaskUpdateABS+0x4ec>
			{
				SteerringAngle = ((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI);
 80022b4:	491a      	ldr	r1, [pc, #104]	; (8002320 <vTaskUpdateABS+0x520>)
 80022b6:	a316      	add	r3, pc, #88	; (adr r3, 8002310 <vTaskUpdateABS+0x510>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	e9c1 2300 	strd	r2, r3, [r1]
				Resulted_Data.control = 1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
				steering_on = 1;
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <vTaskUpdateABS+0x524>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]

				if (heading_flag == 0)
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <vTaskUpdateABS+0x528>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d11b      	bne.n	800230a <vTaskUpdateABS+0x50a>
				{
					heading = RecievedData.Heading;
 80022d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f947 	bl	8000568 <__aeabi_f2d>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4913      	ldr	r1, [pc, #76]	; (800232c <vTaskUpdateABS+0x52c>)
 80022e0:	e9c1 2300 	strd	r2, r3, [r1]
					heading_flag = 1;
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <vTaskUpdateABS+0x528>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
				if (heading_flag == 0)
 80022ea:	e00e      	b.n	800230a <vTaskUpdateABS+0x50a>
				}
			}

			else
			{
				Resulted_Data.brake =  MAX_FORCE;  // Apply maximum brake force
 80022ec:	2396      	movs	r3, #150	; 0x96
 80022ee:	617b      	str	r3, [r7, #20]
				Resulted_Data.control=3;               // speed = 0;
 80022f0:	2303      	movs	r3, #3
 80022f2:	613b      	str	r3, [r7, #16]
				SteerringAngle=0;
 80022f4:	490a      	ldr	r1, [pc, #40]	; (8002320 <vTaskUpdateABS+0x520>)
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e9c1 2300 	strd	r2, r3, [r1]
				brake_flag = 1;
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <vTaskUpdateABS+0x540>)
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
			if((Flages_Sets.Turn_Right) && (RecievedData.relativeSpeedOfBRR>=0) && (brake_flag != 1) && ((Lane == LEFT_LANE) || (Lane == MIDDLE_LANE)) )
 8002308:	e0dd      	b.n	80024c6 <vTaskUpdateABS+0x6c6>
 800230a:	e0dc      	b.n	80024c6 <vTaskUpdateABS+0x6c6>
 800230c:	f3af 8000 	nop.w
 8002310:	cceb9138 	.word	0xcceb9138
 8002314:	404c0dbe 	.word	0x404c0dbe
 8002318:	cceb9138 	.word	0xcceb9138
 800231c:	c04c0dbe 	.word	0xc04c0dbe
 8002320:	20000728 	.word	0x20000728
 8002324:	20000722 	.word	0x20000722
 8002328:	20000740 	.word	0x20000740
 800232c:	20000738 	.word	0x20000738
 8002330:	40240000 	.word	0x40240000
 8002334:	20000721 	.word	0x20000721
 8002338:	20000730 	.word	0x20000730
 800233c:	20000001 	.word	0x20000001
 8002340:	20000720 	.word	0x20000720
 8002344:	20000000 	.word	0x20000000
			}
		}

		else if  ((Flages_Sets.Decreasing_Speed_Flag) && (!(Flages_Sets.Full_Braking_Flag)))
 8002348:	7a7b      	ldrb	r3, [r7, #9]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d076      	beq.n	800243c <vTaskUpdateABS+0x63c>
 800234e:	7abb      	ldrb	r3, [r7, #10]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d173      	bne.n	800243c <vTaskUpdateABS+0x63c>
		{
			if((Flages_Sets.Turn_Right) && (RecievedData.relativeSpeedOfBRR>=0) && (brake_flag != 1) && ((Lane == LEFT_LANE) || (Lane == MIDDLE_LANE)) )
 8002354:	7b3b      	ldrb	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d02e      	beq.n	80023b8 <vTaskUpdateABS+0x5b8>
 800235a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800235e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002366:	db27      	blt.n	80023b8 <vTaskUpdateABS+0x5b8>
 8002368:	4b93      	ldr	r3, [pc, #588]	; (80025b8 <vTaskUpdateABS+0x7b8>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d023      	beq.n	80023b8 <vTaskUpdateABS+0x5b8>
 8002370:	4b92      	ldr	r3, [pc, #584]	; (80025bc <vTaskUpdateABS+0x7bc>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d003      	beq.n	8002380 <vTaskUpdateABS+0x580>
 8002378:	4b90      	ldr	r3, [pc, #576]	; (80025bc <vTaskUpdateABS+0x7bc>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d11b      	bne.n	80023b8 <vTaskUpdateABS+0x5b8>
			{
				SteerringAngle = -((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI);
 8002380:	498f      	ldr	r1, [pc, #572]	; (80025c0 <vTaskUpdateABS+0x7c0>)
 8002382:	a389      	add	r3, pc, #548	; (adr r3, 80025a8 <vTaskUpdateABS+0x7a8>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	e9c1 2300 	strd	r2, r3, [r1]
				Resulted_Data.control = 1;
 800238c:	2301      	movs	r3, #1
 800238e:	613b      	str	r3, [r7, #16]
				steering_on = 1;
 8002390:	4b8c      	ldr	r3, [pc, #560]	; (80025c4 <vTaskUpdateABS+0x7c4>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]

				if (heading_flag == 0)
 8002396:	4b8c      	ldr	r3, [pc, #560]	; (80025c8 <vTaskUpdateABS+0x7c8>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d14d      	bne.n	800243a <vTaskUpdateABS+0x63a>
				{
					heading = RecievedData.Heading;
 800239e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8e1 	bl	8000568 <__aeabi_f2d>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4988      	ldr	r1, [pc, #544]	; (80025cc <vTaskUpdateABS+0x7cc>)
 80023ac:	e9c1 2300 	strd	r2, r3, [r1]
					heading_flag = 1;
 80023b0:	4b85      	ldr	r3, [pc, #532]	; (80025c8 <vTaskUpdateABS+0x7c8>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
				if (heading_flag == 0)
 80023b6:	e040      	b.n	800243a <vTaskUpdateABS+0x63a>
				}
			}

			else if( (Flages_Sets.Turn_Left) && (RecievedData.relativeSpeedOfBLR>=0) && (brake_flag != 1) && ((Lane == RIGHT_LANE) || (Lane == MIDDLE_LANE)) )
 80023b8:	7b7b      	ldrb	r3, [r7, #13]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d02e      	beq.n	800241c <vTaskUpdateABS+0x61c>
 80023be:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80023c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	db27      	blt.n	800241c <vTaskUpdateABS+0x61c>
 80023cc:	4b7a      	ldr	r3, [pc, #488]	; (80025b8 <vTaskUpdateABS+0x7b8>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d023      	beq.n	800241c <vTaskUpdateABS+0x61c>
 80023d4:	4b79      	ldr	r3, [pc, #484]	; (80025bc <vTaskUpdateABS+0x7bc>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d003      	beq.n	80023e4 <vTaskUpdateABS+0x5e4>
 80023dc:	4b77      	ldr	r3, [pc, #476]	; (80025bc <vTaskUpdateABS+0x7bc>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d11b      	bne.n	800241c <vTaskUpdateABS+0x61c>
			{
				SteerringAngle = ((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI);
 80023e4:	4976      	ldr	r1, [pc, #472]	; (80025c0 <vTaskUpdateABS+0x7c0>)
 80023e6:	a372      	add	r3, pc, #456	; (adr r3, 80025b0 <vTaskUpdateABS+0x7b0>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	e9c1 2300 	strd	r2, r3, [r1]
				Resulted_Data.control = 1;
 80023f0:	2301      	movs	r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
				steering_on = 1;
 80023f4:	4b73      	ldr	r3, [pc, #460]	; (80025c4 <vTaskUpdateABS+0x7c4>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]

				if (heading_flag == 0)
 80023fa:	4b73      	ldr	r3, [pc, #460]	; (80025c8 <vTaskUpdateABS+0x7c8>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11b      	bne.n	800243a <vTaskUpdateABS+0x63a>
				{
					heading = RecievedData.Heading;
 8002402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f8af 	bl	8000568 <__aeabi_f2d>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	496f      	ldr	r1, [pc, #444]	; (80025cc <vTaskUpdateABS+0x7cc>)
 8002410:	e9c1 2300 	strd	r2, r3, [r1]
					heading_flag = 1;
 8002414:	4b6c      	ldr	r3, [pc, #432]	; (80025c8 <vTaskUpdateABS+0x7c8>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
				if (heading_flag == 0)
 800241a:	e00e      	b.n	800243a <vTaskUpdateABS+0x63a>
				}
			}

			else
			{
				Resulted_Data.brake=  0.6 * MAX_FORCE;    // Apply 40% brake force
 800241c:	235a      	movs	r3, #90	; 0x5a
 800241e:	617b      	str	r3, [r7, #20]
				Resulted_Data.control=2;                      // speed = Original speed;
 8002420:	2302      	movs	r3, #2
 8002422:	613b      	str	r3, [r7, #16]
				SteerringAngle=0;
 8002424:	4966      	ldr	r1, [pc, #408]	; (80025c0 <vTaskUpdateABS+0x7c0>)
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	e9c1 2300 	strd	r2, r3, [r1]
				brake_flag = 1;
 8002432:	4b61      	ldr	r3, [pc, #388]	; (80025b8 <vTaskUpdateABS+0x7b8>)
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
			if((Flages_Sets.Turn_Right) && (RecievedData.relativeSpeedOfBRR>=0) && (brake_flag != 1) && ((Lane == LEFT_LANE) || (Lane == MIDDLE_LANE)) )
 8002438:	e045      	b.n	80024c6 <vTaskUpdateABS+0x6c6>
 800243a:	e044      	b.n	80024c6 <vTaskUpdateABS+0x6c6>
			}
		}

		else if ( Flages_Sets.Warning_Flag)
 800243c:	7a3b      	ldrb	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01f      	beq.n	8002482 <vTaskUpdateABS+0x682>
		{
			Resulted_Data.brake= 0;     // No brake force applied
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
			Resulted_Data.laneKeeping = 1;
 8002446:	2301      	movs	r3, #1
 8002448:	623b      	str	r3, [r7, #32]

			if (laneKeeping_flag == 1)
 800244a:	4b61      	ldr	r3, [pc, #388]	; (80025d0 <vTaskUpdateABS+0x7d0>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d10d      	bne.n	800246e <vTaskUpdateABS+0x66e>
			{
				if (RecievedData.currentVelocity > 13)
 8002452:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002456:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800245a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	dd02      	ble.n	800246a <vTaskUpdateABS+0x66a>
				{
					Resulted_Data.brake = 90;
 8002464:	235a      	movs	r3, #90	; 0x5a
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e001      	b.n	800246e <vTaskUpdateABS+0x66e>
				}

				else
				{
					Resulted_Data.brake = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
				}
			}

			if(brake_flag == 1)
 800246e:	4b52      	ldr	r3, [pc, #328]	; (80025b8 <vTaskUpdateABS+0x7b8>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d102      	bne.n	800247c <vTaskUpdateABS+0x67c>
			{
				Resulted_Data.control=4;          // speed = Original speed;
 8002476:	2304      	movs	r3, #4
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	e024      	b.n	80024c6 <vTaskUpdateABS+0x6c6>
			}

			else
			{
				Resulted_Data.control=1;          // speed = Original speed;
 800247c:	2301      	movs	r3, #1
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	e021      	b.n	80024c6 <vTaskUpdateABS+0x6c6>
			}
		}

		else
		{
			if (Resulted_Data.laneKeeping == 0)
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <vTaskUpdateABS+0x68c>
			{
				Resulted_Data.brake= 0;  // No brake force applied
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
			}

			if (laneKeeping_flag == 1)
 800248c:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <vTaskUpdateABS+0x7d0>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d10d      	bne.n	80024b0 <vTaskUpdateABS+0x6b0>
			{
				if (RecievedData.currentVelocity > 13)
 8002494:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002498:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800249c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	dd02      	ble.n	80024ac <vTaskUpdateABS+0x6ac>
				{
					Resulted_Data.brake = 90;
 80024a6:	235a      	movs	r3, #90	; 0x5a
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	e001      	b.n	80024b0 <vTaskUpdateABS+0x6b0>
				}

				else
				{
					Resulted_Data.brake = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
				}
			}

			if(brake_flag == 1)
 80024b0:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <vTaskUpdateABS+0x7b8>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d102      	bne.n	80024be <vTaskUpdateABS+0x6be>
			{
				Resulted_Data.control=4;          // speed = Original speed;
 80024b8:	2304      	movs	r3, #4
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	e003      	b.n	80024c6 <vTaskUpdateABS+0x6c6>
			}

			else
			{
				Resulted_Data.control=0;          // speed = Original speed;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	e000      	b.n	80024c6 <vTaskUpdateABS+0x6c6>
			if(RecievedData.rangeOfFRR > 80 || RecievedData.rangeOfFRR == 0)
 80024c4:	bf00      	nop
			}
		}

		if  (RxData[0] != 2 && steering_on == 1)
 80024c6:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <vTaskUpdateABS+0x7d4>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	f000 8195 	beq.w	80027fa <vTaskUpdateABS+0x9fa>
 80024d0:	4b3c      	ldr	r3, [pc, #240]	; (80025c4 <vTaskUpdateABS+0x7c4>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	f040 8190 	bne.w	80027fa <vTaskUpdateABS+0x9fa>
		{
			if ((Flages_Sets.Decreasing_Speed_Flag == 0))
 80024da:	7a7b      	ldrb	r3, [r7, #9]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f040 818c 	bne.w	80027fa <vTaskUpdateABS+0x9fa>
			{
				if (RecievedData.Heading > heading)
 80024e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f83f 	bl	8000568 <__aeabi_f2d>
 80024ea:	4b38      	ldr	r3, [pc, #224]	; (80025cc <vTaskUpdateABS+0x7cc>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe fb22 	bl	8000b38 <__aeabi_dcmpgt>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80bc 	beq.w	8002674 <vTaskUpdateABS+0x874>
				{
					if (SteerringAngle == -((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI) && RecievedData.Heading < (heading + 10))
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <vTaskUpdateABS+0x7c0>)
 80024fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002502:	a329      	add	r3, pc, #164	; (adr r3, 80025a8 <vTaskUpdateABS+0x7a8>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f7fe faee 	bl	8000ae8 <__aeabi_dcmpeq>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01f      	beq.n	8002552 <vTaskUpdateABS+0x752>
 8002512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe f827 	bl	8000568 <__aeabi_f2d>
 800251a:	4604      	mov	r4, r0
 800251c:	460d      	mov	r5, r1
 800251e:	4b2b      	ldr	r3, [pc, #172]	; (80025cc <vTaskUpdateABS+0x7cc>)
 8002520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <vTaskUpdateABS+0x7d8>)
 800252a:	f7fd febf 	bl	80002ac <__adddf3>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4620      	mov	r0, r4
 8002534:	4629      	mov	r1, r5
 8002536:	f7fe fae1 	bl	8000afc <__aeabi_dcmplt>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <vTaskUpdateABS+0x752>
					{
						SteerringAngle = -((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI);
 8002540:	491f      	ldr	r1, [pc, #124]	; (80025c0 <vTaskUpdateABS+0x7c0>)
 8002542:	a319      	add	r3, pc, #100	; (adr r3, 80025a8 <vTaskUpdateABS+0x7a8>)
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	e9c1 2300 	strd	r2, r3, [r1]
						Resulted_Data.control = 1;
 800254c:	2301      	movs	r3, #1
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	e153      	b.n	80027fa <vTaskUpdateABS+0x9fa>
					}

					else if (SteerringAngle == ((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI) && RecievedData.Heading < (heading + 10))
 8002552:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <vTaskUpdateABS+0x7c0>)
 8002554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002558:	a315      	add	r3, pc, #84	; (adr r3, 80025b0 <vTaskUpdateABS+0x7b0>)
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	f7fe fac3 	bl	8000ae8 <__aeabi_dcmpeq>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d039      	beq.n	80025dc <vTaskUpdateABS+0x7dc>
 8002568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256a:	4618      	mov	r0, r3
 800256c:	f7fd fffc 	bl	8000568 <__aeabi_f2d>
 8002570:	4604      	mov	r4, r0
 8002572:	460d      	mov	r5, r1
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <vTaskUpdateABS+0x7cc>)
 8002576:	e9d3 0100 	ldrd	r0, r1, [r3]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <vTaskUpdateABS+0x7d8>)
 8002580:	f7fd fe94 	bl	80002ac <__adddf3>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4620      	mov	r0, r4
 800258a:	4629      	mov	r1, r5
 800258c:	f7fe fab6 	bl	8000afc <__aeabi_dcmplt>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d022      	beq.n	80025dc <vTaskUpdateABS+0x7dc>
					{
						SteerringAngle = ((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI);
 8002596:	490a      	ldr	r1, [pc, #40]	; (80025c0 <vTaskUpdateABS+0x7c0>)
 8002598:	a305      	add	r3, pc, #20	; (adr r3, 80025b0 <vTaskUpdateABS+0x7b0>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	e9c1 2300 	strd	r2, r3, [r1]
						Resulted_Data.control = 1;
 80025a2:	2301      	movs	r3, #1
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	e128      	b.n	80027fa <vTaskUpdateABS+0x9fa>
 80025a8:	cceb9138 	.word	0xcceb9138
 80025ac:	c04c0dbe 	.word	0xc04c0dbe
 80025b0:	cceb9138 	.word	0xcceb9138
 80025b4:	404c0dbe 	.word	0x404c0dbe
 80025b8:	20000720 	.word	0x20000720
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20000728 	.word	0x20000728
 80025c4:	20000722 	.word	0x20000722
 80025c8:	20000740 	.word	0x20000740
 80025cc:	20000738 	.word	0x20000738
 80025d0:	20000741 	.word	0x20000741
 80025d4:	200007a0 	.word	0x200007a0
 80025d8:	40240000 	.word	0x40240000
					}

					else if(SteerringAngle == -((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI))
 80025dc:	4b7c      	ldr	r3, [pc, #496]	; (80027d0 <vTaskUpdateABS+0x9d0>)
 80025de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e2:	a377      	add	r3, pc, #476	; (adr r3, 80027c0 <vTaskUpdateABS+0x9c0>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	f7fe fa7e 	bl	8000ae8 <__aeabi_dcmpeq>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d014      	beq.n	800261c <vTaskUpdateABS+0x81c>
					{
						Lane_nextState++;
 80025f2:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <vTaskUpdateABS+0x9d4>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b76      	ldr	r3, [pc, #472]	; (80027d4 <vTaskUpdateABS+0x9d4>)
 80025fc:	701a      	strb	r2, [r3, #0]
						Resulted_Data.control = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
						SteerringAngle = 0;
 8002602:	4973      	ldr	r1, [pc, #460]	; (80027d0 <vTaskUpdateABS+0x9d0>)
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9c1 2300 	strd	r2, r3, [r1]
						Resulted_Data.laneKeeping = 1;
 8002610:	2301      	movs	r3, #1
 8002612:	623b      	str	r3, [r7, #32]
						heading_flag = 0;
 8002614:	4b70      	ldr	r3, [pc, #448]	; (80027d8 <vTaskUpdateABS+0x9d8>)
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e0ee      	b.n	80027fa <vTaskUpdateABS+0x9fa>
					}

					else if(SteerringAngle == ((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI))
 800261c:	4b6c      	ldr	r3, [pc, #432]	; (80027d0 <vTaskUpdateABS+0x9d0>)
 800261e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002622:	a369      	add	r3, pc, #420	; (adr r3, 80027c8 <vTaskUpdateABS+0x9c8>)
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	f7fe fa5e 	bl	8000ae8 <__aeabi_dcmpeq>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d014      	beq.n	800265c <vTaskUpdateABS+0x85c>
					{
						Lane_nextState--;
 8002632:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <vTaskUpdateABS+0x9d4>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	3b01      	subs	r3, #1
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4b66      	ldr	r3, [pc, #408]	; (80027d4 <vTaskUpdateABS+0x9d4>)
 800263c:	701a      	strb	r2, [r3, #0]
						Resulted_Data.control = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
						SteerringAngle = 0;
 8002642:	4963      	ldr	r1, [pc, #396]	; (80027d0 <vTaskUpdateABS+0x9d0>)
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9c1 2300 	strd	r2, r3, [r1]
						Resulted_Data.laneKeeping = 1;
 8002650:	2301      	movs	r3, #1
 8002652:	623b      	str	r3, [r7, #32]
						heading_flag = 0;
 8002654:	4b60      	ldr	r3, [pc, #384]	; (80027d8 <vTaskUpdateABS+0x9d8>)
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e0ce      	b.n	80027fa <vTaskUpdateABS+0x9fa>
					}

					else
					{
						SteerringAngle = 0;
 800265c:	495c      	ldr	r1, [pc, #368]	; (80027d0 <vTaskUpdateABS+0x9d0>)
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9c1 2300 	strd	r2, r3, [r1]
						Resulted_Data.control = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
						Resulted_Data.laneKeeping = 1;
 800266e:	2301      	movs	r3, #1
 8002670:	623b      	str	r3, [r7, #32]
 8002672:	e0c2      	b.n	80027fa <vTaskUpdateABS+0x9fa>
					}
				}

				else if (RecievedData.Heading < heading)
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff76 	bl	8000568 <__aeabi_f2d>
 800267c:	4b57      	ldr	r3, [pc, #348]	; (80027dc <vTaskUpdateABS+0x9dc>)
 800267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002682:	f7fe fa3b 	bl	8000afc <__aeabi_dcmplt>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80b6 	beq.w	80027fa <vTaskUpdateABS+0x9fa>
				{
					if (SteerringAngle == -((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI) && RecievedData.Heading > (heading - 10))
 800268e:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <vTaskUpdateABS+0x9d0>)
 8002690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002694:	a34a      	add	r3, pc, #296	; (adr r3, 80027c0 <vTaskUpdateABS+0x9c0>)
 8002696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269a:	f7fe fa25 	bl	8000ae8 <__aeabi_dcmpeq>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01f      	beq.n	80026e4 <vTaskUpdateABS+0x8e4>
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ff5e 	bl	8000568 <__aeabi_f2d>
 80026ac:	4604      	mov	r4, r0
 80026ae:	460d      	mov	r5, r1
 80026b0:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <vTaskUpdateABS+0x9dc>)
 80026b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	4b49      	ldr	r3, [pc, #292]	; (80027e0 <vTaskUpdateABS+0x9e0>)
 80026bc:	f7fd fdf4 	bl	80002a8 <__aeabi_dsub>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4620      	mov	r0, r4
 80026c6:	4629      	mov	r1, r5
 80026c8:	f7fe fa36 	bl	8000b38 <__aeabi_dcmpgt>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <vTaskUpdateABS+0x8e4>
					{
						SteerringAngle = -((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI);
 80026d2:	493f      	ldr	r1, [pc, #252]	; (80027d0 <vTaskUpdateABS+0x9d0>)
 80026d4:	a33a      	add	r3, pc, #232	; (adr r3, 80027c0 <vTaskUpdateABS+0x9c0>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	e9c1 2300 	strd	r2, r3, [r1]
						Resulted_Data.control = 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	e08a      	b.n	80027fa <vTaskUpdateABS+0x9fa>
					}
					else if (SteerringAngle == ((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI) && RecievedData.Heading > (heading - 10))
 80026e4:	4b3a      	ldr	r3, [pc, #232]	; (80027d0 <vTaskUpdateABS+0x9d0>)
 80026e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ea:	a337      	add	r3, pc, #220	; (adr r3, 80027c8 <vTaskUpdateABS+0x9c8>)
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	f7fe f9fa 	bl	8000ae8 <__aeabi_dcmpeq>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01f      	beq.n	800273a <vTaskUpdateABS+0x93a>
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd ff33 	bl	8000568 <__aeabi_f2d>
 8002702:	4604      	mov	r4, r0
 8002704:	460d      	mov	r5, r1
 8002706:	4b35      	ldr	r3, [pc, #212]	; (80027dc <vTaskUpdateABS+0x9dc>)
 8002708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	4b33      	ldr	r3, [pc, #204]	; (80027e0 <vTaskUpdateABS+0x9e0>)
 8002712:	f7fd fdc9 	bl	80002a8 <__aeabi_dsub>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4620      	mov	r0, r4
 800271c:	4629      	mov	r1, r5
 800271e:	f7fe fa0b 	bl	8000b38 <__aeabi_dcmpgt>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <vTaskUpdateABS+0x93a>
					{
						SteerringAngle = ((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI);
 8002728:	4929      	ldr	r1, [pc, #164]	; (80027d0 <vTaskUpdateABS+0x9d0>)
 800272a:	a327      	add	r3, pc, #156	; (adr r3, 80027c8 <vTaskUpdateABS+0x9c8>)
 800272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002730:	e9c1 2300 	strd	r2, r3, [r1]
						Resulted_Data.control = 1;
 8002734:	2301      	movs	r3, #1
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	e05f      	b.n	80027fa <vTaskUpdateABS+0x9fa>
					}

					else if(SteerringAngle == -((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI))
 800273a:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <vTaskUpdateABS+0x9d0>)
 800273c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002740:	a31f      	add	r3, pc, #124	; (adr r3, 80027c0 <vTaskUpdateABS+0x9c0>)
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f7fe f9cf 	bl	8000ae8 <__aeabi_dcmpeq>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d014      	beq.n	800277a <vTaskUpdateABS+0x97a>
					{
						Lane_nextState++;
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <vTaskUpdateABS+0x9d4>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <vTaskUpdateABS+0x9d4>)
 800275a:	701a      	strb	r2, [r3, #0]
						Resulted_Data.control = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
						SteerringAngle = 0;
 8002760:	491b      	ldr	r1, [pc, #108]	; (80027d0 <vTaskUpdateABS+0x9d0>)
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	e9c1 2300 	strd	r2, r3, [r1]
						Resulted_Data.laneKeeping = 1;
 800276e:	2301      	movs	r3, #1
 8002770:	623b      	str	r3, [r7, #32]
						heading_flag = 0;
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <vTaskUpdateABS+0x9d8>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e03f      	b.n	80027fa <vTaskUpdateABS+0x9fa>
					}

					else if(SteerringAngle == ((atan(CAR_LENGTH/LANE_WIDTH) *180) / M_PI))
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <vTaskUpdateABS+0x9d0>)
 800277c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002780:	a311      	add	r3, pc, #68	; (adr r3, 80027c8 <vTaskUpdateABS+0x9c8>)
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002786:	f7fe f9af 	bl	8000ae8 <__aeabi_dcmpeq>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d029      	beq.n	80027e4 <vTaskUpdateABS+0x9e4>
					{
						Lane_nextState--;
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <vTaskUpdateABS+0x9d4>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	3b01      	subs	r3, #1
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <vTaskUpdateABS+0x9d4>)
 800279a:	701a      	strb	r2, [r3, #0]
						Resulted_Data.control = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
						SteerringAngle = 0;
 80027a0:	490b      	ldr	r1, [pc, #44]	; (80027d0 <vTaskUpdateABS+0x9d0>)
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	e9c1 2300 	strd	r2, r3, [r1]
						Resulted_Data.laneKeeping = 1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	623b      	str	r3, [r7, #32]
						heading_flag = 0;
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <vTaskUpdateABS+0x9d8>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	e01f      	b.n	80027fa <vTaskUpdateABS+0x9fa>
 80027ba:	bf00      	nop
 80027bc:	f3af 8000 	nop.w
 80027c0:	cceb9138 	.word	0xcceb9138
 80027c4:	c04c0dbe 	.word	0xc04c0dbe
 80027c8:	cceb9138 	.word	0xcceb9138
 80027cc:	404c0dbe 	.word	0x404c0dbe
 80027d0:	20000728 	.word	0x20000728
 80027d4:	20000001 	.word	0x20000001
 80027d8:	20000740 	.word	0x20000740
 80027dc:	20000738 	.word	0x20000738
 80027e0:	40240000 	.word	0x40240000
					}

					else
					{
						SteerringAngle = 0;
 80027e4:	4952      	ldr	r1, [pc, #328]	; (8002930 <vTaskUpdateABS+0xb30>)
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9c1 2300 	strd	r2, r3, [r1]
						Resulted_Data.control = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
						Resulted_Data.laneKeeping = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	623b      	str	r3, [r7, #32]
					}
				}
			}
		}

		if((brake_flag == 1) && (!Flages_Sets.Decreasing_Speed_Flag) && (!Flages_Sets.Full_Braking_Flag)
 80027fa:	4b4e      	ldr	r3, [pc, #312]	; (8002934 <vTaskUpdateABS+0xb34>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d147      	bne.n	8002892 <vTaskUpdateABS+0xa92>
 8002802:	7a7b      	ldrb	r3, [r7, #9]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d144      	bne.n	8002892 <vTaskUpdateABS+0xa92>
 8002808:	7abb      	ldrb	r3, [r7, #10]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d141      	bne.n	8002892 <vTaskUpdateABS+0xa92>
				&& ((Lane == 1 && (RecievedData.rangeOfLRR == 0 || RecievedData.rangeOfFRR == 0))
 800280e:	4b4a      	ldr	r3, [pc, #296]	; (8002938 <vTaskUpdateABS+0xb38>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10d      	bne.n	8002832 <vTaskUpdateABS+0xa32>
 8002816:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800281a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002822:	d031      	beq.n	8002888 <vTaskUpdateABS+0xa88>
 8002824:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002828:	eef5 7a40 	vcmp.f32	s15, #0.0
 800282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002830:	d02a      	beq.n	8002888 <vTaskUpdateABS+0xa88>
						|| (Lane == 2 && (RecievedData.rangeOfLRR == 0 || RecievedData.rangeOfFRR == 0 || RecievedData.rangeOfFLR == 0))
 8002832:	4b41      	ldr	r3, [pc, #260]	; (8002938 <vTaskUpdateABS+0xb38>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d114      	bne.n	8002864 <vTaskUpdateABS+0xa64>
 800283a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800283e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002846:	d01f      	beq.n	8002888 <vTaskUpdateABS+0xa88>
 8002848:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800284c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	d018      	beq.n	8002888 <vTaskUpdateABS+0xa88>
 8002856:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800285a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002862:	d011      	beq.n	8002888 <vTaskUpdateABS+0xa88>
						|| (Lane == 3 && (RecievedData.rangeOfLRR == 0 || RecievedData.rangeOfFLR == 0))))
 8002864:	4b34      	ldr	r3, [pc, #208]	; (8002938 <vTaskUpdateABS+0xb38>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d112      	bne.n	8002892 <vTaskUpdateABS+0xa92>
 800286c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002870:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002878:	d006      	beq.n	8002888 <vTaskUpdateABS+0xa88>
 800287a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800287e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002886:	d104      	bne.n	8002892 <vTaskUpdateABS+0xa92>
		{
			brake_flag = 0;
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <vTaskUpdateABS+0xb34>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
			Resulted_Data.control = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
		}

		Resulted_Data.steeringAngle = SteerringAngle;
 8002892:	4b27      	ldr	r3, [pc, #156]	; (8002930 <vTaskUpdateABS+0xb30>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	f7fe f96c 	bl	8000b78 <__aeabi_d2iz>
 80028a0:	4603      	mov	r3, r0
 80028a2:	61bb      	str	r3, [r7, #24]

		if (SteerringAngle == 0)
 80028a4:	4b22      	ldr	r3, [pc, #136]	; (8002930 <vTaskUpdateABS+0xb30>)
 80028a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	f7fe f919 	bl	8000ae8 <__aeabi_dcmpeq>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <vTaskUpdateABS+0xac4>
		{
			Lane = Lane_nextState;
 80028bc:	4b1f      	ldr	r3, [pc, #124]	; (800293c <vTaskUpdateABS+0xb3c>)
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <vTaskUpdateABS+0xb38>)
 80028c2:	701a      	strb	r2, [r3, #0]
		}

		Resulted_Data.laneID = Lane;
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <vTaskUpdateABS+0xb38>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	61fb      	str	r3, [r7, #28]
		Resulted_Data.laneMarkerAngle = angle;
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <vTaskUpdateABS+0xb40>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24

		if (RxData[0] == 0)
 80028d0:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <vTaskUpdateABS+0xb44>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <vTaskUpdateABS+0xade>
		{
			Resulted_Data.driver_drowsiness = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
 80028dc:	e00c      	b.n	80028f8 <vTaskUpdateABS+0xaf8>
		}

		else if (RxData[0] == 1)
 80028de:	4b19      	ldr	r3, [pc, #100]	; (8002944 <vTaskUpdateABS+0xb44>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d102      	bne.n	80028ec <vTaskUpdateABS+0xaec>
		{
			Resulted_Data.driver_drowsiness = 1;
 80028e6:	2301      	movs	r3, #1
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ea:	e005      	b.n	80028f8 <vTaskUpdateABS+0xaf8>
		}

		else if (RxData[0] == 2)
 80028ec:	4b15      	ldr	r3, [pc, #84]	; (8002944 <vTaskUpdateABS+0xb44>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d101      	bne.n	80028f8 <vTaskUpdateABS+0xaf8>
		{
			Resulted_Data.driver_drowsiness = 2;
 80028f4:	2302      	movs	r3, #2
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		if (RxData[1] == 0)
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <vTaskUpdateABS+0xb44>)
 80028fa:	785b      	ldrb	r3, [r3, #1]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <vTaskUpdateABS+0xb06>
		{
			Resulted_Data.driver_distraction = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002904:	e005      	b.n	8002912 <vTaskUpdateABS+0xb12>
		}

		else if (RxData[1] == 1)
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <vTaskUpdateABS+0xb44>)
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <vTaskUpdateABS+0xb12>
		{
			Resulted_Data.driver_distraction = 1;
 800290e:	2301      	movs	r3, #1
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		xQueueSend(xUpdateABSQueue, &Resulted_Data, portMAX_DELAY);
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <vTaskUpdateABS+0xb48>)
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	f107 0110 	add.w	r1, r7, #16
 800291a:	2300      	movs	r3, #0
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	f003 fce4 	bl	80062ec <xQueueGenericSend>

		vTaskDelay(pdMS_TO_TICKS(60));
 8002924:	203c      	movs	r0, #60	; 0x3c
 8002926:	f004 fa99 	bl	8006e5c <vTaskDelay>
		xQueueReceive(xMakeAlgorithmQueue, &Flages_Sets, portMAX_DELAY);
 800292a:	f7ff ba6d 	b.w	8001e08 <vTaskUpdateABS+0x8>
 800292e:	bf00      	nop
 8002930:	20000728 	.word	0x20000728
 8002934:	20000720 	.word	0x20000720
 8002938:	20000000 	.word	0x20000000
 800293c:	20000001 	.word	0x20000001
 8002940:	20000730 	.word	0x20000730
 8002944:	200007a0 	.word	0x200007a0
 8002948:	200007c8 	.word	0x200007c8

0800294c <vTaskSendUART>:
	}

}

void vTaskSendUART(void * argument)
{
 800294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294e:	b09d      	sub	sp, #116	; 0x74
 8002950:	af06      	add	r7, sp, #24
 8002952:	60f8      	str	r0, [r7, #12]
	ControlData_t Resulted_Data;
	char BufferUARTSend[37];

	while(1)
	{
		xQueueReceive(xUpdateABSQueue, &Resulted_Data, portMAX_DELAY);
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <vTaskSendUART+0x6c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800295c:	f04f 32ff 	mov.w	r2, #4294967295
 8002960:	4618      	mov	r0, r3
 8002962:	f003 fdc1 	bl	80064e8 <xQueueReceive>

		sprintf(BufferUARTSend,"*%d;%03d_%03d&%d$%d@%05d^%d!%d#",Resulted_Data.control,Resulted_Data.brake,Resulted_Data.steeringAngle,Resulted_Data.laneID,Resulted_Data.laneKeeping,Resulted_Data.laneMarkerAngle,Resulted_Data.driver_drowsiness,Resulted_Data.driver_distraction);
 8002966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800296c:	6079      	str	r1, [r7, #4]
 800296e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002972:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002974:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002976:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002978:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800297a:	f107 0610 	add.w	r6, r7, #16
 800297e:	9505      	str	r5, [sp, #20]
 8002980:	9404      	str	r4, [sp, #16]
 8002982:	9003      	str	r0, [sp, #12]
 8002984:	9102      	str	r1, [sp, #8]
 8002986:	9201      	str	r2, [sp, #4]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	490b      	ldr	r1, [pc, #44]	; (80029bc <vTaskSendUART+0x70>)
 8002990:	4630      	mov	r0, r6
 8002992:	f006 fd2f 	bl	80093f4 <siprintf>

		HAL_UART_Transmit(&huart1,(uint8_t *) BufferUARTSend, strlen(BufferUARTSend), 200);
 8002996:	f107 0310 	add.w	r3, r7, #16
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fc28 	bl	80001f0 <strlen>
 80029a0:	4603      	mov	r3, r0
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	f107 0110 	add.w	r1, r7, #16
 80029a8:	23c8      	movs	r3, #200	; 0xc8
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <vTaskSendUART+0x74>)
 80029ac:	f002 fe55 	bl	800565a <HAL_UART_Transmit>

		vTaskDelay(pdMS_TO_TICKS(60));
 80029b0:	203c      	movs	r0, #60	; 0x3c
 80029b2:	f004 fa53 	bl	8006e5c <vTaskDelay>
		xQueueReceive(xUpdateABSQueue, &Resulted_Data, portMAX_DELAY);
 80029b6:	e7cd      	b.n	8002954 <vTaskSendUART+0x8>
 80029b8:	200007c8 	.word	0x200007c8
 80029bc:	0800eea0 	.word	0x0800eea0
 80029c0:	200006d8 	.word	0x200006d8

080029c4 <vTaskReceiveCAN>:
	}
}

void vTaskReceiveCAN(void * argument)
{
 80029c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c6:	b09d      	sub	sp, #116	; 0x74
 80029c8:	af06      	add	r7, sp, #24
 80029ca:	60f8      	str	r0, [r7, #12]
	ControlData_t Resulted_Data;
	char BufferUARTSend[37];

	while(1)
	{
		if(RxData[0] == 2)
 80029cc:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <vTaskReceiveCAN+0xf4>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d14c      	bne.n	8002a6e <vTaskReceiveCAN+0xaa>
		{
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);

			if((Lane == MIDDLE_LANE))
 80029d4:	4b39      	ldr	r3, [pc, #228]	; (8002abc <vTaskReceiveCAN+0xf8>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d103      	bne.n	80029e4 <vTaskReceiveCAN+0x20>
			{
				vTaskDelay(pdMS_TO_TICKS(60));
 80029dc:	203c      	movs	r0, #60	; 0x3c
 80029de:	f004 fa3d 	bl	8006e5c <vTaskDelay>
 80029e2:	e7f3      	b.n	80029cc <vTaskReceiveCAN+0x8>
			}

			else
			{
				Resulted_Data.brake = MAX_FORCE;
 80029e4:	2396      	movs	r3, #150	; 0x96
 80029e6:	63fb      	str	r3, [r7, #60]	; 0x3c
				Resulted_Data.control = 3;
 80029e8:	2303      	movs	r3, #3
 80029ea:	63bb      	str	r3, [r7, #56]	; 0x38
				SteerringAngle = 0;
 80029ec:	4934      	ldr	r1, [pc, #208]	; (8002ac0 <vTaskReceiveCAN+0xfc>)
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9c1 2300 	strd	r2, r3, [r1]
				Resulted_Data.steeringAngle = SteerringAngle;
 80029fa:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <vTaskReceiveCAN+0xfc>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	f7fe f8b8 	bl	8000b78 <__aeabi_d2iz>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	643b      	str	r3, [r7, #64]	; 0x40
				Resulted_Data.laneID = Lane;
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <vTaskReceiveCAN+0xf8>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	647b      	str	r3, [r7, #68]	; 0x44
				Resulted_Data.laneKeeping = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	64bb      	str	r3, [r7, #72]	; 0x48
				Resulted_Data.laneMarkerAngle = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	64fb      	str	r3, [r7, #76]	; 0x4c
				Resulted_Data.driver_drowsiness = 2;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	653b      	str	r3, [r7, #80]	; 0x50
				Resulted_Data.driver_distraction = 2;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	657b      	str	r3, [r7, #84]	; 0x54
				sprintf(BufferUARTSend,"*%d;%03d_%03d&%d$%d@%05d^%d!%d#",Resulted_Data.control,Resulted_Data.brake,Resulted_Data.steeringAngle,Resulted_Data.laneID,Resulted_Data.laneKeeping,Resulted_Data.laneMarkerAngle,Resulted_Data.driver_drowsiness,Resulted_Data.driver_distraction);
 8002a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a28:	6079      	str	r1, [r7, #4]
 8002a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a2e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002a30:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002a32:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002a34:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8002a36:	f107 0610 	add.w	r6, r7, #16
 8002a3a:	9505      	str	r5, [sp, #20]
 8002a3c:	9404      	str	r4, [sp, #16]
 8002a3e:	9003      	str	r0, [sp, #12]
 8002a40:	9102      	str	r1, [sp, #8]
 8002a42:	9201      	str	r2, [sp, #4]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	491e      	ldr	r1, [pc, #120]	; (8002ac4 <vTaskReceiveCAN+0x100>)
 8002a4c:	4630      	mov	r0, r6
 8002a4e:	f006 fcd1 	bl	80093f4 <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t *) BufferUARTSend, strlen(BufferUARTSend), 200);
 8002a52:	f107 0310 	add.w	r3, r7, #16
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fbca 	bl	80001f0 <strlen>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	f107 0110 	add.w	r1, r7, #16
 8002a64:	23c8      	movs	r3, #200	; 0xc8
 8002a66:	4818      	ldr	r0, [pc, #96]	; (8002ac8 <vTaskReceiveCAN+0x104>)
 8002a68:	f002 fdf7 	bl	800565a <HAL_UART_Transmit>
 8002a6c:	e7ae      	b.n	80029cc <vTaskReceiveCAN+0x8>
			}
		}

		else if (RxData[0] == 1 || RxData[1] == 1)
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <vTaskReceiveCAN+0xf4>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d003      	beq.n	8002a7e <vTaskReceiveCAN+0xba>
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <vTaskReceiveCAN+0xf4>)
 8002a78:	785b      	ldrb	r3, [r3, #1]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d109      	bne.n	8002a92 <vTaskReceiveCAN+0xce>
		{
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a84:	4811      	ldr	r0, [pc, #68]	; (8002acc <vTaskReceiveCAN+0x108>)
 8002a86:	f001 fb55 	bl	8004134 <HAL_GPIO_WritePin>
			vTaskSuspend(NULL);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f004 fa1a 	bl	8006ec4 <vTaskSuspend>
 8002a90:	e010      	b.n	8002ab4 <vTaskReceiveCAN+0xf0>
		}

		else if (RxData[0] == 0 || RxData[1] == 0)
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <vTaskReceiveCAN+0xf4>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <vTaskReceiveCAN+0xde>
 8002a9a:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <vTaskReceiveCAN+0xf4>)
 8002a9c:	785b      	ldrb	r3, [r3, #1]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d194      	bne.n	80029cc <vTaskReceiveCAN+0x8>
		{
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002aa8:	4808      	ldr	r0, [pc, #32]	; (8002acc <vTaskReceiveCAN+0x108>)
 8002aaa:	f001 fb43 	bl	8004134 <HAL_GPIO_WritePin>
			vTaskSuspend(NULL);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f004 fa08 	bl	8006ec4 <vTaskSuspend>
		if(RxData[0] == 2)
 8002ab4:	e78a      	b.n	80029cc <vTaskReceiveCAN+0x8>
 8002ab6:	bf00      	nop
 8002ab8:	200007a0 	.word	0x200007a0
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000728 	.word	0x20000728
 8002ac4:	0800eea0 	.word	0x0800eea0
 8002ac8:	200006d8 	.word	0x200006d8
 8002acc:	40021800 	.word	0x40021800

08002ad0 <HAL_CAN_TxMailbox0CompleteCallback>:

	}
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002aee:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002af0:	2100      	movs	r1, #0
 8002af2:	4808      	ldr	r0, [pc, #32]	; (8002b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002af4:	f000 fd32 	bl	800355c <HAL_CAN_GetRxMessage>
	xTaskResumeFromISR(Task5Handle);
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f004 faa5 	bl	800704c <xTaskResumeFromISR>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200007a0 	.word	0x200007a0
 8002b10:	20000784 	.word	0x20000784
 8002b14:	20000668 	.word	0x20000668
 8002b18:	200007b8 	.word	0x200007b8

08002b1c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		//Send_DefTask();
		vTaskDelay(1000);
 8002b24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b28:	f004 f998 	bl	8006e5c <vTaskDelay>
 8002b2c:	e7fa      	b.n	8002b24 <StartDefaultTask+0x8>

08002b2e <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3e:	d101      	bne.n	8002b44 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002b40:	f000 facc 	bl	80030dc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b50:	b672      	cpsid	i
}
 8002b52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002b54:	e7fe      	b.n	8002b54 <Error_Handler+0x8>
	...

08002b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_MspInit+0x54>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	4a11      	ldr	r2, [pc, #68]	; (8002bac <HAL_MspInit+0x54>)
 8002b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_MspInit+0x54>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_MspInit+0x54>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <HAL_MspInit+0x54>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_MspInit+0x54>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	210f      	movs	r1, #15
 8002b9a:	f06f 0001 	mvn.w	r0, #1
 8002b9e:	f001 f8f3 	bl	8003d88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800

08002bb0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08a      	sub	sp, #40	; 0x28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a21      	ldr	r2, [pc, #132]	; (8002c54 <HAL_CAN_MspInit+0xa4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d13c      	bne.n	8002c4c <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_CAN_MspInit+0xa8>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <HAL_CAN_MspInit+0xa8>)
 8002bdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <HAL_CAN_MspInit+0xa8>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_CAN_MspInit+0xa8>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a18      	ldr	r2, [pc, #96]	; (8002c58 <HAL_CAN_MspInit+0xa8>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_CAN_MspInit+0xa8>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002c1c:	2309      	movs	r3, #9
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	4619      	mov	r1, r3
 8002c26:	480d      	ldr	r0, [pc, #52]	; (8002c5c <HAL_CAN_MspInit+0xac>)
 8002c28:	f001 f8d8 	bl	8003ddc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2105      	movs	r1, #5
 8002c30:	2013      	movs	r0, #19
 8002c32:	f001 f8a9 	bl	8003d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002c36:	2013      	movs	r0, #19
 8002c38:	f001 f8c2 	bl	8003dc0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2105      	movs	r1, #5
 8002c40:	2014      	movs	r0, #20
 8002c42:	f001 f8a1 	bl	8003d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002c46:	2014      	movs	r0, #20
 8002c48:	f001 f8ba 	bl	8003dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002c4c:	bf00      	nop
 8002c4e:	3728      	adds	r7, #40	; 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40006400 	.word	0x40006400
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40020000 	.word	0x40020000

08002c60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <HAL_TIM_Base_MspInit+0x3c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10d      	bne.n	8002c8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_TIM_Base_MspInit+0x40>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <HAL_TIM_Base_MspInit+0x40>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6453      	str	r3, [r2, #68]	; 0x44
 8002c82:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <HAL_TIM_Base_MspInit+0x40>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	40023800 	.word	0x40023800

08002ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a19      	ldr	r2, [pc, #100]	; (8002d28 <HAL_UART_MspInit+0x84>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d12c      	bne.n	8002d20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <HAL_UART_MspInit+0x88>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <HAL_UART_MspInit+0x88>)
 8002cd0:	f043 0310 	orr.w	r3, r3, #16
 8002cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd6:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <HAL_UART_MspInit+0x88>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <HAL_UART_MspInit+0x88>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a10      	ldr	r2, [pc, #64]	; (8002d2c <HAL_UART_MspInit+0x88>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <HAL_UART_MspInit+0x88>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cfe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d10:	2307      	movs	r3, #7
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4805      	ldr	r0, [pc, #20]	; (8002d30 <HAL_UART_MspInit+0x8c>)
 8002d1c:	f001 f85e 	bl	8003ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d20:	bf00      	nop
 8002d22:	3728      	adds	r7, #40	; 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40011000 	.word	0x40011000
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40020000 	.word	0x40020000

08002d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08e      	sub	sp, #56	; 0x38
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	4b34      	ldr	r3, [pc, #208]	; (8002e1c <HAL_InitTick+0xe8>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	4a33      	ldr	r2, [pc, #204]	; (8002e1c <HAL_InitTick+0xe8>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6413      	str	r3, [r2, #64]	; 0x40
 8002d54:	4b31      	ldr	r3, [pc, #196]	; (8002e1c <HAL_InitTick+0xe8>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d60:	f107 0210 	add.w	r2, r7, #16
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 fee4 	bl	8004b38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d7a:	f001 feb5 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8002d7e:	6378      	str	r0, [r7, #52]	; 0x34
 8002d80:	e004      	b.n	8002d8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d82:	f001 feb1 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8002d86:	4603      	mov	r3, r0
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8e:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <HAL_InitTick+0xec>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	0c9b      	lsrs	r3, r3, #18
 8002d96:	3b01      	subs	r3, #1
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_InitTick+0xf0>)
 8002d9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002da0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002da2:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_InitTick+0xf0>)
 8002da4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002da8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002daa:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <HAL_InitTick+0xf0>)
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002db0:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_InitTick+0xf0>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <HAL_InitTick+0xf0>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_InitTick+0xf0>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002dc2:	4818      	ldr	r0, [pc, #96]	; (8002e24 <HAL_InitTick+0xf0>)
 8002dc4:	f001 feea 	bl	8004b9c <HAL_TIM_Base_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002dce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11b      	bne.n	8002e0e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002dd6:	4813      	ldr	r0, [pc, #76]	; (8002e24 <HAL_InitTick+0xf0>)
 8002dd8:	f001 ffc0 	bl	8004d5c <HAL_TIM_Base_Start_IT>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002de2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d111      	bne.n	8002e0e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002dea:	201c      	movs	r0, #28
 8002dec:	f000 ffe8 	bl	8003dc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b0f      	cmp	r3, #15
 8002df4:	d808      	bhi.n	8002e08 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002df6:	2200      	movs	r2, #0
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	201c      	movs	r0, #28
 8002dfc:	f000 ffc4 	bl	8003d88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e00:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <HAL_InitTick+0xf4>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e002      	b.n	8002e0e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002e0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3738      	adds	r7, #56	; 0x38
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	431bde83 	.word	0x431bde83
 8002e24:	200007d0 	.word	0x200007d0
 8002e28:	20000008 	.word	0x20000008

08002e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e30:	e7fe      	b.n	8002e30 <NMI_Handler+0x4>

08002e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e36:	e7fe      	b.n	8002e36 <HardFault_Handler+0x4>

08002e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e3c:	e7fe      	b.n	8002e3c <MemManage_Handler+0x4>

08002e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e42:	e7fe      	b.n	8002e42 <BusFault_Handler+0x4>

08002e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e48:	e7fe      	b.n	8002e48 <UsageFault_Handler+0x4>

08002e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e5c:	4802      	ldr	r0, [pc, #8]	; (8002e68 <CAN1_TX_IRQHandler+0x10>)
 8002e5e:	f000 fcb5 	bl	80037cc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000668 	.word	0x20000668

08002e6c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e70:	4802      	ldr	r0, [pc, #8]	; (8002e7c <CAN1_RX0_IRQHandler+0x10>)
 8002e72:	f000 fcab 	bl	80037cc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000668 	.word	0x20000668

08002e80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e84:	4802      	ldr	r0, [pc, #8]	; (8002e90 <TIM2_IRQHandler+0x10>)
 8002e86:	f001 ffd9 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200007d0 	.word	0x200007d0

08002e94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return 1;
 8002e98:	2301      	movs	r3, #1
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <_kill>:

int _kill(int pid, int sig)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002eae:	f005 fbe1 	bl	8008674 <__errno>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2216      	movs	r2, #22
 8002eb6:	601a      	str	r2, [r3, #0]
  return -1;
 8002eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <_exit>:

void _exit (int status)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ffe7 	bl	8002ea4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ed6:	e7fe      	b.n	8002ed6 <_exit+0x12>

08002ed8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e00a      	b.n	8002f00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eea:	f3af 8000 	nop.w
 8002eee:	4601      	mov	r1, r0
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	60ba      	str	r2, [r7, #8]
 8002ef6:	b2ca      	uxtb	r2, r1
 8002ef8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3301      	adds	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	dbf0      	blt.n	8002eea <_read+0x12>
  }

  return len;
 8002f08:	687b      	ldr	r3, [r7, #4]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b086      	sub	sp, #24
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	e009      	b.n	8002f38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	60ba      	str	r2, [r7, #8]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3301      	adds	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	dbf1      	blt.n	8002f24 <_write+0x12>
  }
  return len;
 8002f40:	687b      	ldr	r3, [r7, #4]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <_close>:

int _close(int file)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f72:	605a      	str	r2, [r3, #4]
  return 0;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <_isatty>:

int _isatty(int file)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f8a:	2301      	movs	r3, #1
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <_sbrk+0x5c>)
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <_sbrk+0x60>)
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <_sbrk+0x64>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd0:	4b11      	ldr	r3, [pc, #68]	; (8003018 <_sbrk+0x64>)
 8002fd2:	4a12      	ldr	r2, [pc, #72]	; (800301c <_sbrk+0x68>)
 8002fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <_sbrk+0x64>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d207      	bcs.n	8002ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fe4:	f005 fb46 	bl	8008674 <__errno>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	220c      	movs	r2, #12
 8002fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff2:	e009      	b.n	8003008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <_sbrk+0x64>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <_sbrk+0x64>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <_sbrk+0x64>)
 8003004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20030000 	.word	0x20030000
 8003014:	00000400 	.word	0x00000400
 8003018:	20000818 	.word	0x20000818
 800301c:	20008990 	.word	0x20008990

08003020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <SystemInit+0x20>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	4a05      	ldr	r2, [pc, #20]	; (8003040 <SystemInit+0x20>)
 800302c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800307c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003048:	480d      	ldr	r0, [pc, #52]	; (8003080 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800304a:	490e      	ldr	r1, [pc, #56]	; (8003084 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800304c:	4a0e      	ldr	r2, [pc, #56]	; (8003088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800304e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003050:	e002      	b.n	8003058 <LoopCopyDataInit>

08003052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003056:	3304      	adds	r3, #4

08003058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800305a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800305c:	d3f9      	bcc.n	8003052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800305e:	4a0b      	ldr	r2, [pc, #44]	; (800308c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003060:	4c0b      	ldr	r4, [pc, #44]	; (8003090 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003064:	e001      	b.n	800306a <LoopFillZerobss>

08003066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003068:	3204      	adds	r2, #4

0800306a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800306a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800306c:	d3fb      	bcc.n	8003066 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800306e:	f7ff ffd7 	bl	8003020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003072:	f005 fb05 	bl	8008680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003076:	f7fe f81f 	bl	80010b8 <main>
  bx  lr    
 800307a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800307c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003084:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003088:	0800f5f8 	.word	0x0800f5f8
  ldr r2, =_sbss
 800308c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003090:	2000898c 	.word	0x2000898c

08003094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003094:	e7fe      	b.n	8003094 <ADC_IRQHandler>
	...

08003098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800309c:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <HAL_Init+0x40>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a0d      	ldr	r2, [pc, #52]	; (80030d8 <HAL_Init+0x40>)
 80030a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_Init+0x40>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <HAL_Init+0x40>)
 80030ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_Init+0x40>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <HAL_Init+0x40>)
 80030ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c0:	2003      	movs	r0, #3
 80030c2:	f000 fe56 	bl	8003d72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030c6:	200f      	movs	r0, #15
 80030c8:	f7ff fe34 	bl	8002d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030cc:	f7ff fd44 	bl	8002b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40023c00 	.word	0x40023c00

080030dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_IncTick+0x20>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_IncTick+0x24>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_IncTick+0x24>)
 80030ee:	6013      	str	r3, [r2, #0]
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	2000000c 	.word	0x2000000c
 8003100:	2000081c 	.word	0x2000081c

08003104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return uwTick;
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_GetTick+0x14>)
 800310a:	681b      	ldr	r3, [r3, #0]
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	2000081c 	.word	0x2000081c

0800311c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0ed      	b.n	800330a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff fd38 	bl	8002bb0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003150:	f7ff ffd8 	bl	8003104 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003156:	e012      	b.n	800317e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003158:	f7ff ffd4 	bl	8003104 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b0a      	cmp	r3, #10
 8003164:	d90b      	bls.n	800317e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2205      	movs	r2, #5
 8003176:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0c5      	b.n	800330a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0e5      	beq.n	8003158 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0202 	bic.w	r2, r2, #2
 800319a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800319c:	f7ff ffb2 	bl	8003104 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031a2:	e012      	b.n	80031ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031a4:	f7ff ffae 	bl	8003104 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b0a      	cmp	r3, #10
 80031b0:	d90b      	bls.n	80031ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2205      	movs	r2, #5
 80031c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e09f      	b.n	800330a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e5      	bne.n	80031a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7e1b      	ldrb	r3, [r3, #24]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d108      	bne.n	80031f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e007      	b.n	8003202 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7e5b      	ldrb	r3, [r3, #25]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e007      	b.n	800322c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800322a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7e9b      	ldrb	r3, [r3, #26]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d108      	bne.n	8003246 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0220 	orr.w	r2, r2, #32
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e007      	b.n	8003256 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0220 	bic.w	r2, r2, #32
 8003254:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7edb      	ldrb	r3, [r3, #27]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d108      	bne.n	8003270 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0210 	bic.w	r2, r2, #16
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e007      	b.n	8003280 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0210 	orr.w	r2, r2, #16
 800327e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7f1b      	ldrb	r3, [r3, #28]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d108      	bne.n	800329a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0208 	orr.w	r2, r2, #8
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e007      	b.n	80032aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0208 	bic.w	r2, r2, #8
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7f5b      	ldrb	r3, [r3, #29]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d108      	bne.n	80032c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0204 	orr.w	r2, r2, #4
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e007      	b.n	80032d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	ea42 0103 	orr.w	r1, r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	1e5a      	subs	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800332a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800332c:	7cfb      	ldrb	r3, [r7, #19]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d003      	beq.n	800333a <HAL_CAN_ConfigFilter+0x26>
 8003332:	7cfb      	ldrb	r3, [r7, #19]
 8003334:	2b02      	cmp	r3, #2
 8003336:	f040 80be 	bne.w	80034b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800333a:	4b65      	ldr	r3, [pc, #404]	; (80034d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800333c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003344:	f043 0201 	orr.w	r2, r3, #1
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003354:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	431a      	orrs	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	2201      	movs	r2, #1
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	43db      	mvns	r3, r3
 800338c:	401a      	ands	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d123      	bne.n	80033e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	401a      	ands	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3248      	adds	r2, #72	; 0x48
 80033c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033da:	6979      	ldr	r1, [r7, #20]
 80033dc:	3348      	adds	r3, #72	; 0x48
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d122      	bne.n	8003432 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800340c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	3248      	adds	r2, #72	; 0x48
 8003412:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003426:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003428:	6979      	ldr	r1, [r7, #20]
 800342a:	3348      	adds	r3, #72	; 0x48
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	440b      	add	r3, r1
 8003430:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	43db      	mvns	r3, r3
 8003444:	401a      	ands	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800344c:	e007      	b.n	800345e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	431a      	orrs	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	43db      	mvns	r3, r3
 8003470:	401a      	ands	r2, r3
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003478:	e007      	b.n	800348a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	431a      	orrs	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d107      	bne.n	80034a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	431a      	orrs	r2, r3
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034a8:	f023 0201 	bic.w	r2, r3, #1
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e006      	b.n	80034c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
  }
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40006400 	.word	0x40006400

080034d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d12e      	bne.n	8003546 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0201 	bic.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003500:	f7ff fe00 	bl	8003104 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003506:	e012      	b.n	800352e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003508:	f7ff fdfc 	bl	8003104 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b0a      	cmp	r3, #10
 8003514:	d90b      	bls.n	800352e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2205      	movs	r2, #5
 8003526:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e012      	b.n	8003554 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e5      	bne.n	8003508 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e006      	b.n	8003554 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
  }
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003570:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d003      	beq.n	8003580 <HAL_CAN_GetRxMessage+0x24>
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	2b02      	cmp	r3, #2
 800357c:	f040 80f3 	bne.w	8003766 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10e      	bne.n	80035a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d116      	bne.n	80035c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0e7      	b.n	8003774 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e0d8      	b.n	8003774 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	331b      	adds	r3, #27
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	4413      	add	r3, r2
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0204 	and.w	r2, r3, #4
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10c      	bne.n	80035fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	331b      	adds	r3, #27
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	4413      	add	r3, r2
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0d5b      	lsrs	r3, r3, #21
 80035f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e00b      	b.n	8003612 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	331b      	adds	r3, #27
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	4413      	add	r3, r2
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	08db      	lsrs	r3, r3, #3
 800360a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	331b      	adds	r3, #27
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	4413      	add	r3, r2
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0202 	and.w	r2, r3, #2
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	331b      	adds	r3, #27
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	4413      	add	r3, r2
 8003634:	3304      	adds	r3, #4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 020f 	and.w	r2, r3, #15
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	331b      	adds	r3, #27
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	4413      	add	r3, r2
 800364c:	3304      	adds	r3, #4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	b2da      	uxtb	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	331b      	adds	r3, #27
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	4413      	add	r3, r2
 8003664:	3304      	adds	r3, #4
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	0c1b      	lsrs	r3, r3, #16
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	4413      	add	r3, r2
 800367a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	4413      	add	r3, r2
 8003690:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0a1a      	lsrs	r2, r3, #8
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	3301      	adds	r3, #1
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	0c1a      	lsrs	r2, r3, #16
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	3302      	adds	r3, #2
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	0e1a      	lsrs	r2, r3, #24
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	3303      	adds	r3, #3
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	4413      	add	r3, r2
 80036de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	3304      	adds	r3, #4
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	0a1a      	lsrs	r2, r3, #8
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	3305      	adds	r3, #5
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	4413      	add	r3, r2
 8003710:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	0c1a      	lsrs	r2, r3, #16
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	3306      	adds	r3, #6
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	4413      	add	r3, r2
 800372a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	0e1a      	lsrs	r2, r3, #24
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	3307      	adds	r3, #7
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d108      	bne.n	8003752 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0220 	orr.w	r2, r2, #32
 800374e:	60da      	str	r2, [r3, #12]
 8003750:	e007      	b.n	8003762 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0220 	orr.w	r2, r2, #32
 8003760:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	e006      	b.n	8003774 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
  }
}
 8003774:	4618      	mov	r0, r3
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003790:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d002      	beq.n	800379e <HAL_CAN_ActivateNotification+0x1e>
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d109      	bne.n	80037b2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6959      	ldr	r1, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e006      	b.n	80037c0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
  }
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d07c      	beq.n	800390c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d023      	beq.n	8003864 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2201      	movs	r2, #1
 8003822:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff f94e 	bl	8002ad0 <HAL_CAN_TxMailbox0CompleteCallback>
 8003834:	e016      	b.n	8003864 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
 8003848:	e00c      	b.n	8003864 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d004      	beq.n	800385e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
 800385c:	e002      	b.n	8003864 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f97f 	bl	8003b62 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d024      	beq.n	80038b8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003876:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f959 	bl	8003b3a <HAL_CAN_TxMailbox1CompleteCallback>
 8003888:	e016      	b.n	80038b8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
 800389c:	e00c      	b.n	80038b8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d004      	beq.n	80038b2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
 80038b0:	e002      	b.n	80038b8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f95f 	bl	8003b76 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d024      	beq.n	800390c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f939 	bl	8003b4e <HAL_CAN_TxMailbox2CompleteCallback>
 80038dc:	e016      	b.n	800390c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d004      	beq.n	80038f2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
 80038f0:	e00c      	b.n	800390c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
 8003904:	e002      	b.n	800390c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f93f 	bl	8003b8a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00c      	beq.n	8003930 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003926:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2210      	movs	r2, #16
 800392e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00b      	beq.n	8003952 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d006      	beq.n	8003952 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2208      	movs	r2, #8
 800394a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f926 	bl	8003b9e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d009      	beq.n	8003970 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff f8ba 	bl	8002ae4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00c      	beq.n	8003994 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800398a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2210      	movs	r2, #16
 8003992:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d006      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2208      	movs	r2, #8
 80039ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f908 	bl	8003bc6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8ef 	bl	8003bb2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d006      	beq.n	80039f6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2210      	movs	r2, #16
 80039ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f8f2 	bl	8003bda <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2208      	movs	r2, #8
 8003a10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8eb 	bl	8003bee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d07b      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d072      	beq.n	8003b12 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	f043 0302 	orr.w	r3, r3, #2
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	f043 0304 	orr.w	r3, r3, #4
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d043      	beq.n	8003b12 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d03e      	beq.n	8003b12 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a9a:	2b60      	cmp	r3, #96	; 0x60
 8003a9c:	d02b      	beq.n	8003af6 <HAL_CAN_IRQHandler+0x32a>
 8003a9e:	2b60      	cmp	r3, #96	; 0x60
 8003aa0:	d82e      	bhi.n	8003b00 <HAL_CAN_IRQHandler+0x334>
 8003aa2:	2b50      	cmp	r3, #80	; 0x50
 8003aa4:	d022      	beq.n	8003aec <HAL_CAN_IRQHandler+0x320>
 8003aa6:	2b50      	cmp	r3, #80	; 0x50
 8003aa8:	d82a      	bhi.n	8003b00 <HAL_CAN_IRQHandler+0x334>
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d019      	beq.n	8003ae2 <HAL_CAN_IRQHandler+0x316>
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d826      	bhi.n	8003b00 <HAL_CAN_IRQHandler+0x334>
 8003ab2:	2b30      	cmp	r3, #48	; 0x30
 8003ab4:	d010      	beq.n	8003ad8 <HAL_CAN_IRQHandler+0x30c>
 8003ab6:	2b30      	cmp	r3, #48	; 0x30
 8003ab8:	d822      	bhi.n	8003b00 <HAL_CAN_IRQHandler+0x334>
 8003aba:	2b10      	cmp	r3, #16
 8003abc:	d002      	beq.n	8003ac4 <HAL_CAN_IRQHandler+0x2f8>
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d005      	beq.n	8003ace <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ac2:	e01d      	b.n	8003b00 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	f043 0308 	orr.w	r3, r3, #8
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003acc:	e019      	b.n	8003b02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	f043 0310 	orr.w	r3, r3, #16
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ad6:	e014      	b.n	8003b02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	f043 0320 	orr.w	r3, r3, #32
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ae0:	e00f      	b.n	8003b02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aea:	e00a      	b.n	8003b02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003af4:	e005      	b.n	8003b02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003afe:	e000      	b.n	8003b02 <HAL_CAN_IRQHandler+0x336>
            break;
 8003b00:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b10:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2204      	movs	r2, #4
 8003b18:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f868 	bl	8003c02 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b32:	bf00      	nop
 8003b34:	3728      	adds	r7, #40	; 0x28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <__NVIC_SetPriorityGrouping+0x44>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c34:	4013      	ands	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c4a:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <__NVIC_SetPriorityGrouping+0x44>)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	60d3      	str	r3, [r2, #12]
}
 8003c50:	bf00      	nop
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <__NVIC_GetPriorityGrouping+0x18>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0a1b      	lsrs	r3, r3, #8
 8003c6a:	f003 0307 	and.w	r3, r3, #7
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	db0b      	blt.n	8003ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	f003 021f 	and.w	r2, r3, #31
 8003c94:	4907      	ldr	r1, [pc, #28]	; (8003cb4 <__NVIC_EnableIRQ+0x38>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	e000e100 	.word	0xe000e100

08003cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	6039      	str	r1, [r7, #0]
 8003cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	db0a      	blt.n	8003ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	490c      	ldr	r1, [pc, #48]	; (8003d04 <__NVIC_SetPriority+0x4c>)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	0112      	lsls	r2, r2, #4
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	440b      	add	r3, r1
 8003cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce0:	e00a      	b.n	8003cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	4908      	ldr	r1, [pc, #32]	; (8003d08 <__NVIC_SetPriority+0x50>)
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	3b04      	subs	r3, #4
 8003cf0:	0112      	lsls	r2, r2, #4
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	761a      	strb	r2, [r3, #24]
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000e100 	.word	0xe000e100
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f1c3 0307 	rsb	r3, r3, #7
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	bf28      	it	cs
 8003d2a:	2304      	movcs	r3, #4
 8003d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2b06      	cmp	r3, #6
 8003d34:	d902      	bls.n	8003d3c <NVIC_EncodePriority+0x30>
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3b03      	subs	r3, #3
 8003d3a:	e000      	b.n	8003d3e <NVIC_EncodePriority+0x32>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	401a      	ands	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d54:	f04f 31ff 	mov.w	r1, #4294967295
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	43d9      	mvns	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d64:	4313      	orrs	r3, r2
         );
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3724      	adds	r7, #36	; 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ff4c 	bl	8003c18 <__NVIC_SetPriorityGrouping>
}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d9a:	f7ff ff61 	bl	8003c60 <__NVIC_GetPriorityGrouping>
 8003d9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	6978      	ldr	r0, [r7, #20]
 8003da6:	f7ff ffb1 	bl	8003d0c <NVIC_EncodePriority>
 8003daa:	4602      	mov	r2, r0
 8003dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff ff80 	bl	8003cb8 <__NVIC_SetPriority>
}
 8003db8:	bf00      	nop
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff ff54 	bl	8003c7c <__NVIC_EnableIRQ>
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b089      	sub	sp, #36	; 0x24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	e177      	b.n	80040e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003df8:	2201      	movs	r2, #1
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	f040 8166 	bne.w	80040e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d005      	beq.n	8003e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d130      	bne.n	8003e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	2203      	movs	r2, #3
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4013      	ands	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e64:	2201      	movs	r2, #1
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f003 0201 	and.w	r2, r3, #1
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d017      	beq.n	8003ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d123      	bne.n	8003f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	08da      	lsrs	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3208      	adds	r2, #8
 8003ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	220f      	movs	r2, #15
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	08da      	lsrs	r2, r3, #3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3208      	adds	r2, #8
 8003f1a:	69b9      	ldr	r1, [r7, #24]
 8003f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0203 	and.w	r2, r3, #3
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80c0 	beq.w	80040e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	4b66      	ldr	r3, [pc, #408]	; (8004100 <HAL_GPIO_Init+0x324>)
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	4a65      	ldr	r2, [pc, #404]	; (8004100 <HAL_GPIO_Init+0x324>)
 8003f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f70:	6453      	str	r3, [r2, #68]	; 0x44
 8003f72:	4b63      	ldr	r3, [pc, #396]	; (8004100 <HAL_GPIO_Init+0x324>)
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f7e:	4a61      	ldr	r2, [pc, #388]	; (8004104 <HAL_GPIO_Init+0x328>)
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	3302      	adds	r3, #2
 8003f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	220f      	movs	r2, #15
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a58      	ldr	r2, [pc, #352]	; (8004108 <HAL_GPIO_Init+0x32c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d037      	beq.n	800401a <HAL_GPIO_Init+0x23e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a57      	ldr	r2, [pc, #348]	; (800410c <HAL_GPIO_Init+0x330>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d031      	beq.n	8004016 <HAL_GPIO_Init+0x23a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a56      	ldr	r2, [pc, #344]	; (8004110 <HAL_GPIO_Init+0x334>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d02b      	beq.n	8004012 <HAL_GPIO_Init+0x236>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a55      	ldr	r2, [pc, #340]	; (8004114 <HAL_GPIO_Init+0x338>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d025      	beq.n	800400e <HAL_GPIO_Init+0x232>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a54      	ldr	r2, [pc, #336]	; (8004118 <HAL_GPIO_Init+0x33c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d01f      	beq.n	800400a <HAL_GPIO_Init+0x22e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a53      	ldr	r2, [pc, #332]	; (800411c <HAL_GPIO_Init+0x340>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d019      	beq.n	8004006 <HAL_GPIO_Init+0x22a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a52      	ldr	r2, [pc, #328]	; (8004120 <HAL_GPIO_Init+0x344>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <HAL_GPIO_Init+0x226>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a51      	ldr	r2, [pc, #324]	; (8004124 <HAL_GPIO_Init+0x348>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00d      	beq.n	8003ffe <HAL_GPIO_Init+0x222>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a50      	ldr	r2, [pc, #320]	; (8004128 <HAL_GPIO_Init+0x34c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d007      	beq.n	8003ffa <HAL_GPIO_Init+0x21e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a4f      	ldr	r2, [pc, #316]	; (800412c <HAL_GPIO_Init+0x350>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d101      	bne.n	8003ff6 <HAL_GPIO_Init+0x21a>
 8003ff2:	2309      	movs	r3, #9
 8003ff4:	e012      	b.n	800401c <HAL_GPIO_Init+0x240>
 8003ff6:	230a      	movs	r3, #10
 8003ff8:	e010      	b.n	800401c <HAL_GPIO_Init+0x240>
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	e00e      	b.n	800401c <HAL_GPIO_Init+0x240>
 8003ffe:	2307      	movs	r3, #7
 8004000:	e00c      	b.n	800401c <HAL_GPIO_Init+0x240>
 8004002:	2306      	movs	r3, #6
 8004004:	e00a      	b.n	800401c <HAL_GPIO_Init+0x240>
 8004006:	2305      	movs	r3, #5
 8004008:	e008      	b.n	800401c <HAL_GPIO_Init+0x240>
 800400a:	2304      	movs	r3, #4
 800400c:	e006      	b.n	800401c <HAL_GPIO_Init+0x240>
 800400e:	2303      	movs	r3, #3
 8004010:	e004      	b.n	800401c <HAL_GPIO_Init+0x240>
 8004012:	2302      	movs	r3, #2
 8004014:	e002      	b.n	800401c <HAL_GPIO_Init+0x240>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_GPIO_Init+0x240>
 800401a:	2300      	movs	r3, #0
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	f002 0203 	and.w	r2, r2, #3
 8004022:	0092      	lsls	r2, r2, #2
 8004024:	4093      	lsls	r3, r2
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800402c:	4935      	ldr	r1, [pc, #212]	; (8004104 <HAL_GPIO_Init+0x328>)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	3302      	adds	r3, #2
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800403a:	4b3d      	ldr	r3, [pc, #244]	; (8004130 <HAL_GPIO_Init+0x354>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800405e:	4a34      	ldr	r2, [pc, #208]	; (8004130 <HAL_GPIO_Init+0x354>)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004064:	4b32      	ldr	r3, [pc, #200]	; (8004130 <HAL_GPIO_Init+0x354>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004088:	4a29      	ldr	r2, [pc, #164]	; (8004130 <HAL_GPIO_Init+0x354>)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800408e:	4b28      	ldr	r3, [pc, #160]	; (8004130 <HAL_GPIO_Init+0x354>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040b2:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_GPIO_Init+0x354>)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b8:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <HAL_GPIO_Init+0x354>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040dc:	4a14      	ldr	r2, [pc, #80]	; (8004130 <HAL_GPIO_Init+0x354>)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	f67f ae84 	bls.w	8003df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3724      	adds	r7, #36	; 0x24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	40013800 	.word	0x40013800
 8004108:	40020000 	.word	0x40020000
 800410c:	40020400 	.word	0x40020400
 8004110:	40020800 	.word	0x40020800
 8004114:	40020c00 	.word	0x40020c00
 8004118:	40021000 	.word	0x40021000
 800411c:	40021400 	.word	0x40021400
 8004120:	40021800 	.word	0x40021800
 8004124:	40021c00 	.word	0x40021c00
 8004128:	40022000 	.word	0x40022000
 800412c:	40022400 	.word	0x40022400
 8004130:	40013c00 	.word	0x40013c00

08004134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	807b      	strh	r3, [r7, #2]
 8004140:	4613      	mov	r3, r2
 8004142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004144:	787b      	ldrb	r3, [r7, #1]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800414a:	887a      	ldrh	r2, [r7, #2]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004150:	e003      	b.n	800415a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004152:	887b      	ldrh	r3, [r7, #2]
 8004154:	041a      	lsls	r2, r3, #16
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	619a      	str	r2, [r3, #24]
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004180:	6413      	str	r3, [r2, #64]	; 0x40
 8004182:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800418e:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_PWREx_EnableOverDrive+0x94>)
 8004190:	2201      	movs	r2, #1
 8004192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004194:	f7fe ffb6 	bl	8003104 <HAL_GetTick>
 8004198:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800419a:	e009      	b.n	80041b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800419c:	f7fe ffb2 	bl	8003104 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041aa:	d901      	bls.n	80041b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e01f      	b.n	80041f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041b0:	4b13      	ldr	r3, [pc, #76]	; (8004200 <HAL_PWREx_EnableOverDrive+0x98>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041bc:	d1ee      	bne.n	800419c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041be:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c4:	f7fe ff9e 	bl	8003104 <HAL_GetTick>
 80041c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041ca:	e009      	b.n	80041e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041cc:	f7fe ff9a 	bl	8003104 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041da:	d901      	bls.n	80041e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e007      	b.n	80041f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041e0:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_PWREx_EnableOverDrive+0x98>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ec:	d1ee      	bne.n	80041cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40023800 	.word	0x40023800
 80041fc:	420e0040 	.word	0x420e0040
 8004200:	40007000 	.word	0x40007000
 8004204:	420e0044 	.word	0x420e0044

08004208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e267      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d075      	beq.n	8004312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004226:	4b88      	ldr	r3, [pc, #544]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b04      	cmp	r3, #4
 8004230:	d00c      	beq.n	800424c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004232:	4b85      	ldr	r3, [pc, #532]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800423a:	2b08      	cmp	r3, #8
 800423c:	d112      	bne.n	8004264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800423e:	4b82      	ldr	r3, [pc, #520]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424a:	d10b      	bne.n	8004264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424c:	4b7e      	ldr	r3, [pc, #504]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d05b      	beq.n	8004310 <HAL_RCC_OscConfig+0x108>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d157      	bne.n	8004310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e242      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426c:	d106      	bne.n	800427c <HAL_RCC_OscConfig+0x74>
 800426e:	4b76      	ldr	r3, [pc, #472]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a75      	ldr	r2, [pc, #468]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e01d      	b.n	80042b8 <HAL_RCC_OscConfig+0xb0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x98>
 8004286:	4b70      	ldr	r3, [pc, #448]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6f      	ldr	r2, [pc, #444]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 800428c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b6d      	ldr	r3, [pc, #436]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a6c      	ldr	r2, [pc, #432]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 8004298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_OscConfig+0xb0>
 80042a0:	4b69      	ldr	r3, [pc, #420]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a68      	ldr	r2, [pc, #416]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b66      	ldr	r3, [pc, #408]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a65      	ldr	r2, [pc, #404]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 80042b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d013      	beq.n	80042e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fe ff20 	bl	8003104 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fe ff1c 	bl	8003104 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e207      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	4b5b      	ldr	r3, [pc, #364]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0xc0>
 80042e6:	e014      	b.n	8004312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fe ff0c 	bl	8003104 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fe ff08 	bl	8003104 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e1f3      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004302:	4b51      	ldr	r3, [pc, #324]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0xe8>
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d063      	beq.n	80043e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800431e:	4b4a      	ldr	r3, [pc, #296]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432a:	4b47      	ldr	r3, [pc, #284]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004332:	2b08      	cmp	r3, #8
 8004334:	d11c      	bne.n	8004370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004336:	4b44      	ldr	r3, [pc, #272]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d116      	bne.n	8004370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	4b41      	ldr	r3, [pc, #260]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_RCC_OscConfig+0x152>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d001      	beq.n	800435a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e1c7      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435a:	4b3b      	ldr	r3, [pc, #236]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4937      	ldr	r1, [pc, #220]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436e:	e03a      	b.n	80043e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004378:	4b34      	ldr	r3, [pc, #208]	; (800444c <HAL_RCC_OscConfig+0x244>)
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7fe fec1 	bl	8003104 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004386:	f7fe febd 	bl	8003104 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e1a8      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	4b2b      	ldr	r3, [pc, #172]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a4:	4b28      	ldr	r3, [pc, #160]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4925      	ldr	r1, [pc, #148]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]
 80043b8:	e015      	b.n	80043e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ba:	4b24      	ldr	r3, [pc, #144]	; (800444c <HAL_RCC_OscConfig+0x244>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fe fea0 	bl	8003104 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fe fe9c 	bl	8003104 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e187      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d036      	beq.n	8004460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <HAL_RCC_OscConfig+0x248>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fe fe80 	bl	8003104 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004408:	f7fe fe7c 	bl	8003104 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e167      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_OscConfig+0x240>)
 800441c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x200>
 8004426:	e01b      	b.n	8004460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004428:	4b09      	ldr	r3, [pc, #36]	; (8004450 <HAL_RCC_OscConfig+0x248>)
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442e:	f7fe fe69 	bl	8003104 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004434:	e00e      	b.n	8004454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004436:	f7fe fe65 	bl	8003104 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d907      	bls.n	8004454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e150      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
 8004448:	40023800 	.word	0x40023800
 800444c:	42470000 	.word	0x42470000
 8004450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004454:	4b88      	ldr	r3, [pc, #544]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ea      	bne.n	8004436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8097 	beq.w	800459c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446e:	2300      	movs	r3, #0
 8004470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004472:	4b81      	ldr	r3, [pc, #516]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10f      	bne.n	800449e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	4b7d      	ldr	r3, [pc, #500]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	4a7c      	ldr	r2, [pc, #496]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448c:	6413      	str	r3, [r2, #64]	; 0x40
 800448e:	4b7a      	ldr	r3, [pc, #488]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449e:	4b77      	ldr	r3, [pc, #476]	; (800467c <HAL_RCC_OscConfig+0x474>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d118      	bne.n	80044dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044aa:	4b74      	ldr	r3, [pc, #464]	; (800467c <HAL_RCC_OscConfig+0x474>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a73      	ldr	r2, [pc, #460]	; (800467c <HAL_RCC_OscConfig+0x474>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b6:	f7fe fe25 	bl	8003104 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fe fe21 	bl	8003104 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e10c      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	4b6a      	ldr	r3, [pc, #424]	; (800467c <HAL_RCC_OscConfig+0x474>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_OscConfig+0x2ea>
 80044e4:	4b64      	ldr	r3, [pc, #400]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	4a63      	ldr	r2, [pc, #396]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6713      	str	r3, [r2, #112]	; 0x70
 80044f0:	e01c      	b.n	800452c <HAL_RCC_OscConfig+0x324>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x30c>
 80044fa:	4b5f      	ldr	r3, [pc, #380]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	4a5e      	ldr	r2, [pc, #376]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004500:	f043 0304 	orr.w	r3, r3, #4
 8004504:	6713      	str	r3, [r2, #112]	; 0x70
 8004506:	4b5c      	ldr	r3, [pc, #368]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	4a5b      	ldr	r2, [pc, #364]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	6713      	str	r3, [r2, #112]	; 0x70
 8004512:	e00b      	b.n	800452c <HAL_RCC_OscConfig+0x324>
 8004514:	4b58      	ldr	r3, [pc, #352]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004518:	4a57      	ldr	r2, [pc, #348]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	6713      	str	r3, [r2, #112]	; 0x70
 8004520:	4b55      	ldr	r3, [pc, #340]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004524:	4a54      	ldr	r2, [pc, #336]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004526:	f023 0304 	bic.w	r3, r3, #4
 800452a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d015      	beq.n	8004560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fe fde6 	bl	8003104 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453a:	e00a      	b.n	8004552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fe fde2 	bl	8003104 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e0cb      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004552:	4b49      	ldr	r3, [pc, #292]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0ee      	beq.n	800453c <HAL_RCC_OscConfig+0x334>
 800455e:	e014      	b.n	800458a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004560:	f7fe fdd0 	bl	8003104 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004566:	e00a      	b.n	800457e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fe fdcc 	bl	8003104 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	; 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e0b5      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457e:	4b3e      	ldr	r3, [pc, #248]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1ee      	bne.n	8004568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004590:	4b39      	ldr	r3, [pc, #228]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	4a38      	ldr	r2, [pc, #224]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80a1 	beq.w	80046e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a6:	4b34      	ldr	r3, [pc, #208]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d05c      	beq.n	800466c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d141      	bne.n	800463e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ba:	4b31      	ldr	r3, [pc, #196]	; (8004680 <HAL_RCC_OscConfig+0x478>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fe fda0 	bl	8003104 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fe fd9c 	bl	8003104 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e087      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	4b27      	ldr	r3, [pc, #156]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	019b      	lsls	r3, r3, #6
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	3b01      	subs	r3, #1
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	491b      	ldr	r1, [pc, #108]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 800460c:	4313      	orrs	r3, r2
 800460e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004610:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <HAL_RCC_OscConfig+0x478>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fe fd75 	bl	8003104 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800461e:	f7fe fd71 	bl	8003104 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e05c      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x416>
 800463c:	e054      	b.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b10      	ldr	r3, [pc, #64]	; (8004680 <HAL_RCC_OscConfig+0x478>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe fd5e 	bl	8003104 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464c:	f7fe fd5a 	bl	8003104 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e045      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	4b06      	ldr	r3, [pc, #24]	; (8004678 <HAL_RCC_OscConfig+0x470>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x444>
 800466a:	e03d      	b.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d107      	bne.n	8004684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e038      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
 8004678:	40023800 	.word	0x40023800
 800467c:	40007000 	.word	0x40007000
 8004680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004684:	4b1b      	ldr	r3, [pc, #108]	; (80046f4 <HAL_RCC_OscConfig+0x4ec>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d028      	beq.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d121      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d11a      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046b4:	4013      	ands	r3, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046bc:	4293      	cmp	r3, r2
 80046be:	d111      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	085b      	lsrs	r3, r3, #1
 80046cc:	3b01      	subs	r3, #1
 80046ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800

080046f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0cc      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800470c:	4b68      	ldr	r3, [pc, #416]	; (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d90c      	bls.n	8004734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471a:	4b65      	ldr	r3, [pc, #404]	; (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b63      	ldr	r3, [pc, #396]	; (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0b8      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800474c:	4b59      	ldr	r3, [pc, #356]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4a58      	ldr	r2, [pc, #352]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004764:	4b53      	ldr	r3, [pc, #332]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4a52      	ldr	r2, [pc, #328]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800476e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004770:	4b50      	ldr	r3, [pc, #320]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	494d      	ldr	r1, [pc, #308]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d044      	beq.n	8004818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d107      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	4b47      	ldr	r3, [pc, #284]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d119      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e07f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b6:	4b3f      	ldr	r3, [pc, #252]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e06f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c6:	4b3b      	ldr	r3, [pc, #236]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e067      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d6:	4b37      	ldr	r3, [pc, #220]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f023 0203 	bic.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4934      	ldr	r1, [pc, #208]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e8:	f7fe fc8c 	bl	8003104 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f0:	f7fe fc88 	bl	8003104 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e04f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	4b2b      	ldr	r3, [pc, #172]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 020c 	and.w	r2, r3, #12
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	429a      	cmp	r2, r3
 8004816:	d1eb      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004818:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d20c      	bcs.n	8004840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b22      	ldr	r3, [pc, #136]	; (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e032      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800484c:	4b19      	ldr	r3, [pc, #100]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4916      	ldr	r1, [pc, #88]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	490e      	ldr	r1, [pc, #56]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800487e:	f000 f821 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8004882:	4602      	mov	r2, r0
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	490a      	ldr	r1, [pc, #40]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004890:	5ccb      	ldrb	r3, [r1, r3]
 8004892:	fa22 f303 	lsr.w	r3, r2, r3
 8004896:	4a09      	ldr	r2, [pc, #36]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800489a:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe fa48 	bl	8002d34 <HAL_InitTick>

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40023c00 	.word	0x40023c00
 80048b4:	40023800 	.word	0x40023800
 80048b8:	0800eefc 	.word	0x0800eefc
 80048bc:	20000004 	.word	0x20000004
 80048c0:	20000008 	.word	0x20000008

080048c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c8:	b094      	sub	sp, #80	; 0x50
 80048ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	647b      	str	r3, [r7, #68]	; 0x44
 80048d0:	2300      	movs	r3, #0
 80048d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d4:	2300      	movs	r3, #0
 80048d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048dc:	4b79      	ldr	r3, [pc, #484]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 030c 	and.w	r3, r3, #12
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d00d      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0x40>
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	f200 80e1 	bhi.w	8004ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x34>
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d003      	beq.n	80048fe <HAL_RCC_GetSysClockFreq+0x3a>
 80048f6:	e0db      	b.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048f8:	4b73      	ldr	r3, [pc, #460]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048fc:	e0db      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048fe:	4b73      	ldr	r3, [pc, #460]	; (8004acc <HAL_RCC_GetSysClockFreq+0x208>)
 8004900:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004902:	e0d8      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004904:	4b6f      	ldr	r3, [pc, #444]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800490c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800490e:	4b6d      	ldr	r3, [pc, #436]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d063      	beq.n	80049e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491a:	4b6a      	ldr	r3, [pc, #424]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	099b      	lsrs	r3, r3, #6
 8004920:	2200      	movs	r2, #0
 8004922:	63bb      	str	r3, [r7, #56]	; 0x38
 8004924:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492c:	633b      	str	r3, [r7, #48]	; 0x30
 800492e:	2300      	movs	r3, #0
 8004930:	637b      	str	r3, [r7, #52]	; 0x34
 8004932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004936:	4622      	mov	r2, r4
 8004938:	462b      	mov	r3, r5
 800493a:	f04f 0000 	mov.w	r0, #0
 800493e:	f04f 0100 	mov.w	r1, #0
 8004942:	0159      	lsls	r1, r3, #5
 8004944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004948:	0150      	lsls	r0, r2, #5
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4621      	mov	r1, r4
 8004950:	1a51      	subs	r1, r2, r1
 8004952:	6139      	str	r1, [r7, #16]
 8004954:	4629      	mov	r1, r5
 8004956:	eb63 0301 	sbc.w	r3, r3, r1
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004968:	4659      	mov	r1, fp
 800496a:	018b      	lsls	r3, r1, #6
 800496c:	4651      	mov	r1, sl
 800496e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004972:	4651      	mov	r1, sl
 8004974:	018a      	lsls	r2, r1, #6
 8004976:	4651      	mov	r1, sl
 8004978:	ebb2 0801 	subs.w	r8, r2, r1
 800497c:	4659      	mov	r1, fp
 800497e:	eb63 0901 	sbc.w	r9, r3, r1
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800498e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004996:	4690      	mov	r8, r2
 8004998:	4699      	mov	r9, r3
 800499a:	4623      	mov	r3, r4
 800499c:	eb18 0303 	adds.w	r3, r8, r3
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	462b      	mov	r3, r5
 80049a4:	eb49 0303 	adc.w	r3, r9, r3
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049b6:	4629      	mov	r1, r5
 80049b8:	024b      	lsls	r3, r1, #9
 80049ba:	4621      	mov	r1, r4
 80049bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049c0:	4621      	mov	r1, r4
 80049c2:	024a      	lsls	r2, r1, #9
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ca:	2200      	movs	r2, #0
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049d4:	f7fc f968 	bl	8000ca8 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4613      	mov	r3, r2
 80049de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e0:	e058      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e2:	4b38      	ldr	r3, [pc, #224]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	2200      	movs	r2, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	4611      	mov	r1, r2
 80049ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049f2:	623b      	str	r3, [r7, #32]
 80049f4:	2300      	movs	r3, #0
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
 80049f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	f04f 0000 	mov.w	r0, #0
 8004a04:	f04f 0100 	mov.w	r1, #0
 8004a08:	0159      	lsls	r1, r3, #5
 8004a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a0e:	0150      	lsls	r0, r2, #5
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4641      	mov	r1, r8
 8004a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a34:	ebb2 040a 	subs.w	r4, r2, sl
 8004a38:	eb63 050b 	sbc.w	r5, r3, fp
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	00eb      	lsls	r3, r5, #3
 8004a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a4a:	00e2      	lsls	r2, r4, #3
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	461d      	mov	r5, r3
 8004a50:	4643      	mov	r3, r8
 8004a52:	18e3      	adds	r3, r4, r3
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	464b      	mov	r3, r9
 8004a58:	eb45 0303 	adc.w	r3, r5, r3
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	028b      	lsls	r3, r1, #10
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a74:	4621      	mov	r1, r4
 8004a76:	028a      	lsls	r2, r1, #10
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7e:	2200      	movs	r2, #0
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	61fa      	str	r2, [r7, #28]
 8004a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a88:	f7fc f90e 	bl	8000ca8 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4613      	mov	r3, r2
 8004a92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aae:	e002      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab0:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ab2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3750      	adds	r7, #80	; 0x50
 8004abc:	46bd      	mov	sp, r7
 8004abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	00f42400 	.word	0x00f42400
 8004acc:	007a1200 	.word	0x007a1200

08004ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad4:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	20000004 	.word	0x20000004

08004ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aec:	f7ff fff0 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	0a9b      	lsrs	r3, r3, #10
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4903      	ldr	r1, [pc, #12]	; (8004b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	0800ef0c 	.word	0x0800ef0c

08004b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b14:	f7ff ffdc 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	0b5b      	lsrs	r3, r3, #13
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	4903      	ldr	r1, [pc, #12]	; (8004b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b26:	5ccb      	ldrb	r3, [r1, r3]
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40023800 	.word	0x40023800
 8004b34:	0800ef0c 	.word	0x0800ef0c

08004b38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	220f      	movs	r2, #15
 8004b46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b48:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <HAL_RCC_GetClockConfig+0x5c>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 0203 	and.w	r2, r3, #3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <HAL_RCC_GetClockConfig+0x5c>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <HAL_RCC_GetClockConfig+0x5c>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b6c:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <HAL_RCC_GetClockConfig+0x5c>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	08db      	lsrs	r3, r3, #3
 8004b72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <HAL_RCC_GetClockConfig+0x60>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 020f 	and.w	r2, r3, #15
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	601a      	str	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40023800 	.word	0x40023800
 8004b98:	40023c00 	.word	0x40023c00

08004b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e041      	b.n	8004c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fe f84c 	bl	8002c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	f000 fb26 	bl	800522c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d001      	beq.n	8004c54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e046      	b.n	8004ce2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a23      	ldr	r2, [pc, #140]	; (8004cf0 <HAL_TIM_Base_Start+0xb4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d022      	beq.n	8004cac <HAL_TIM_Base_Start+0x70>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6e:	d01d      	beq.n	8004cac <HAL_TIM_Base_Start+0x70>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1f      	ldr	r2, [pc, #124]	; (8004cf4 <HAL_TIM_Base_Start+0xb8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d018      	beq.n	8004cac <HAL_TIM_Base_Start+0x70>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1e      	ldr	r2, [pc, #120]	; (8004cf8 <HAL_TIM_Base_Start+0xbc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <HAL_TIM_Base_Start+0x70>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1c      	ldr	r2, [pc, #112]	; (8004cfc <HAL_TIM_Base_Start+0xc0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00e      	beq.n	8004cac <HAL_TIM_Base_Start+0x70>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <HAL_TIM_Base_Start+0xc4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d009      	beq.n	8004cac <HAL_TIM_Base_Start+0x70>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a19      	ldr	r2, [pc, #100]	; (8004d04 <HAL_TIM_Base_Start+0xc8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_TIM_Base_Start+0x70>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <HAL_TIM_Base_Start+0xcc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d111      	bne.n	8004cd0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b06      	cmp	r3, #6
 8004cbc:	d010      	beq.n	8004ce0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cce:	e007      	b.n	8004ce0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40010000 	.word	0x40010000
 8004cf4:	40000400 	.word	0x40000400
 8004cf8:	40000800 	.word	0x40000800
 8004cfc:	40000c00 	.word	0x40000c00
 8004d00:	40010400 	.word	0x40010400
 8004d04:	40014000 	.word	0x40014000
 8004d08:	40001800 	.word	0x40001800

08004d0c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6a1a      	ldr	r2, [r3, #32]
 8004d1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10f      	bne.n	8004d44 <HAL_TIM_Base_Stop+0x38>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6a1a      	ldr	r2, [r3, #32]
 8004d2a:	f240 4344 	movw	r3, #1092	; 0x444
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d107      	bne.n	8004d44 <HAL_TIM_Base_Stop+0x38>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d001      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e04e      	b.n	8004e12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a23      	ldr	r2, [pc, #140]	; (8004e20 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d022      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9e:	d01d      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a1f      	ldr	r2, [pc, #124]	; (8004e24 <HAL_TIM_Base_Start_IT+0xc8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d018      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a1e      	ldr	r2, [pc, #120]	; (8004e28 <HAL_TIM_Base_Start_IT+0xcc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d013      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <HAL_TIM_Base_Start_IT+0xd0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00e      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d009      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d004      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <HAL_TIM_Base_Start_IT+0xdc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d111      	bne.n	8004e00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b06      	cmp	r3, #6
 8004dec:	d010      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0201 	orr.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfe:	e007      	b.n	8004e10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40010000 	.word	0x40010000
 8004e24:	40000400 	.word	0x40000400
 8004e28:	40000800 	.word	0x40000800
 8004e2c:	40000c00 	.word	0x40000c00
 8004e30:	40010400 	.word	0x40010400
 8004e34:	40014000 	.word	0x40014000
 8004e38:	40001800 	.word	0x40001800

08004e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d122      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d11b      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0202 	mvn.w	r2, #2
 8004e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f9b5 	bl	80051ee <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f9a7 	bl	80051da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f9b8 	bl	8005202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d122      	bne.n	8004eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d11b      	bne.n	8004eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0204 	mvn.w	r2, #4
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f98b 	bl	80051ee <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f97d 	bl	80051da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f98e 	bl	8005202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d122      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d11b      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0208 	mvn.w	r2, #8
 8004f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2204      	movs	r2, #4
 8004f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f961 	bl	80051ee <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f953 	bl	80051da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f964 	bl	8005202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d122      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d11b      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0210 	mvn.w	r2, #16
 8004f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f937 	bl	80051ee <HAL_TIM_IC_CaptureCallback>
 8004f80:	e005      	b.n	8004f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f929 	bl	80051da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f93a 	bl	8005202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0201 	mvn.w	r2, #1
 8004fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fd fdb7 	bl	8002b2e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	2b80      	cmp	r3, #128	; 0x80
 8004fcc:	d10e      	bne.n	8004fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd8:	2b80      	cmp	r3, #128	; 0x80
 8004fda:	d107      	bne.n	8004fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fae0 	bl	80055ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d10e      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	d107      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8ff 	bl	8005216 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b20      	cmp	r3, #32
 8005024:	d10e      	bne.n	8005044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b20      	cmp	r3, #32
 8005032:	d107      	bne.n	8005044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0220 	mvn.w	r2, #32
 800503c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 faaa 	bl	8005598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005044:	bf00      	nop
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_TIM_ConfigClockSource+0x1c>
 8005064:	2302      	movs	r3, #2
 8005066:	e0b4      	b.n	80051d2 <HAL_TIM_ConfigClockSource+0x186>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800508e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a0:	d03e      	beq.n	8005120 <HAL_TIM_ConfigClockSource+0xd4>
 80050a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a6:	f200 8087 	bhi.w	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ae:	f000 8086 	beq.w	80051be <HAL_TIM_ConfigClockSource+0x172>
 80050b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b6:	d87f      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050b8:	2b70      	cmp	r3, #112	; 0x70
 80050ba:	d01a      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0xa6>
 80050bc:	2b70      	cmp	r3, #112	; 0x70
 80050be:	d87b      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050c0:	2b60      	cmp	r3, #96	; 0x60
 80050c2:	d050      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x11a>
 80050c4:	2b60      	cmp	r3, #96	; 0x60
 80050c6:	d877      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050c8:	2b50      	cmp	r3, #80	; 0x50
 80050ca:	d03c      	beq.n	8005146 <HAL_TIM_ConfigClockSource+0xfa>
 80050cc:	2b50      	cmp	r3, #80	; 0x50
 80050ce:	d873      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d058      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0x13a>
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d86f      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050d8:	2b30      	cmp	r3, #48	; 0x30
 80050da:	d064      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x15a>
 80050dc:	2b30      	cmp	r3, #48	; 0x30
 80050de:	d86b      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	d060      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x15a>
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d867      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d05c      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x15a>
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d05a      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x15a>
 80050f0:	e062      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6899      	ldr	r1, [r3, #8]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f000 f9ad 	bl	8005460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005114:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	609a      	str	r2, [r3, #8]
      break;
 800511e:	e04f      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	6899      	ldr	r1, [r3, #8]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f000 f996 	bl	8005460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005142:	609a      	str	r2, [r3, #8]
      break;
 8005144:	e03c      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6859      	ldr	r1, [r3, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	461a      	mov	r2, r3
 8005154:	f000 f90a 	bl	800536c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2150      	movs	r1, #80	; 0x50
 800515e:	4618      	mov	r0, r3
 8005160:	f000 f963 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 8005164:	e02c      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6859      	ldr	r1, [r3, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	461a      	mov	r2, r3
 8005174:	f000 f929 	bl	80053ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2160      	movs	r1, #96	; 0x60
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f953 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 8005184:	e01c      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6859      	ldr	r1, [r3, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	461a      	mov	r2, r3
 8005194:	f000 f8ea 	bl	800536c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2140      	movs	r1, #64	; 0x40
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f943 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 80051a4:	e00c      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f000 f93a 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 80051b6:	e003      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
      break;
 80051bc:	e000      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
	...

0800522c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a40      	ldr	r2, [pc, #256]	; (8005340 <TIM_Base_SetConfig+0x114>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d013      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524a:	d00f      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a3d      	ldr	r2, [pc, #244]	; (8005344 <TIM_Base_SetConfig+0x118>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00b      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a3c      	ldr	r2, [pc, #240]	; (8005348 <TIM_Base_SetConfig+0x11c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a3b      	ldr	r2, [pc, #236]	; (800534c <TIM_Base_SetConfig+0x120>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a3a      	ldr	r2, [pc, #232]	; (8005350 <TIM_Base_SetConfig+0x124>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d108      	bne.n	800527e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2f      	ldr	r2, [pc, #188]	; (8005340 <TIM_Base_SetConfig+0x114>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d02b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d027      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2c      	ldr	r2, [pc, #176]	; (8005344 <TIM_Base_SetConfig+0x118>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d023      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a2b      	ldr	r2, [pc, #172]	; (8005348 <TIM_Base_SetConfig+0x11c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d01f      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2a      	ldr	r2, [pc, #168]	; (800534c <TIM_Base_SetConfig+0x120>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d01b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a29      	ldr	r2, [pc, #164]	; (8005350 <TIM_Base_SetConfig+0x124>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d017      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a28      	ldr	r2, [pc, #160]	; (8005354 <TIM_Base_SetConfig+0x128>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a27      	ldr	r2, [pc, #156]	; (8005358 <TIM_Base_SetConfig+0x12c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00f      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a26      	ldr	r2, [pc, #152]	; (800535c <TIM_Base_SetConfig+0x130>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a25      	ldr	r2, [pc, #148]	; (8005360 <TIM_Base_SetConfig+0x134>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a24      	ldr	r2, [pc, #144]	; (8005364 <TIM_Base_SetConfig+0x138>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d003      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a23      	ldr	r2, [pc, #140]	; (8005368 <TIM_Base_SetConfig+0x13c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d108      	bne.n	80052f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <TIM_Base_SetConfig+0x114>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_Base_SetConfig+0xf8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a0c      	ldr	r2, [pc, #48]	; (8005350 <TIM_Base_SetConfig+0x124>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d103      	bne.n	800532c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	615a      	str	r2, [r3, #20]
}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40010400 	.word	0x40010400
 8005354:	40014000 	.word	0x40014000
 8005358:	40014400 	.word	0x40014400
 800535c:	40014800 	.word	0x40014800
 8005360:	40001800 	.word	0x40001800
 8005364:	40001c00 	.word	0x40001c00
 8005368:	40002000 	.word	0x40002000

0800536c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f023 0201 	bic.w	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 030a 	bic.w	r3, r3, #10
 80053a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b087      	sub	sp, #28
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f023 0210 	bic.w	r2, r3, #16
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	031b      	lsls	r3, r3, #12
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005406:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	f043 0307 	orr.w	r3, r3, #7
 800544c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	609a      	str	r2, [r3, #8]
}
 8005454:	bf00      	nop
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800547a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	021a      	lsls	r2, r3, #8
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	431a      	orrs	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4313      	orrs	r3, r2
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e05a      	b.n	800556e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a21      	ldr	r2, [pc, #132]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d022      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005504:	d01d      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d018      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1a      	ldr	r2, [pc, #104]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00e      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a18      	ldr	r2, [pc, #96]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d009      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a17      	ldr	r2, [pc, #92]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a15      	ldr	r2, [pc, #84]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d10c      	bne.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	4313      	orrs	r3, r2
 8005552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40010000 	.word	0x40010000
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800
 8005588:	40000c00 	.word	0x40000c00
 800558c:	40010400 	.word	0x40010400
 8005590:	40014000 	.word	0x40014000
 8005594:	40001800 	.word	0x40001800

08005598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e03f      	b.n	8005652 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fd fb5c 	bl	8002ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2224      	movs	r2, #36	; 0x24
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f9e5 	bl	80059d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695a      	ldr	r2, [r3, #20]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b08a      	sub	sp, #40	; 0x28
 800565e:	af02      	add	r7, sp, #8
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	603b      	str	r3, [r7, #0]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b20      	cmp	r3, #32
 8005678:	d17c      	bne.n	8005774 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_UART_Transmit+0x2c>
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e075      	b.n	8005776 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_UART_Transmit+0x3e>
 8005694:	2302      	movs	r3, #2
 8005696:	e06e      	b.n	8005776 <HAL_UART_Transmit+0x11c>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2221      	movs	r2, #33	; 0x21
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ae:	f7fd fd29 	bl	8003104 <HAL_GetTick>
 80056b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	88fa      	ldrh	r2, [r7, #6]
 80056be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c8:	d108      	bne.n	80056dc <HAL_UART_Transmit+0x82>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d104      	bne.n	80056dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e003      	b.n	80056e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056ec:	e02a      	b.n	8005744 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2180      	movs	r1, #128	; 0x80
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f8fc 	bl	80058f6 <UART_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e036      	b.n	8005776 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800571c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	3302      	adds	r3, #2
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	e007      	b.n	8005736 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	781a      	ldrb	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	3301      	adds	r3, #1
 8005734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1cf      	bne.n	80056ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2200      	movs	r2, #0
 8005756:	2140      	movs	r1, #64	; 0x40
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f8cc 	bl	80058f6 <UART_WaitOnFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e006      	b.n	8005776 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	e000      	b.n	8005776 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005774:	2302      	movs	r3, #2
  }
}
 8005776:	4618      	mov	r0, r3
 8005778:	3720      	adds	r7, #32
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b08a      	sub	sp, #40	; 0x28
 8005782:	af02      	add	r7, sp, #8
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4613      	mov	r3, r2
 800578c:	80fb      	strh	r3, [r7, #6]
  uint8_t   isStartReceiveing=0;
 800578e:	2300      	movs	r3, #0
 8005790:	77fb      	strb	r3, [r7, #31]
  uint8_t   First_Inter=0;
 8005792:	2300      	movs	r3, #0
 8005794:	77bb      	strb	r3, [r7, #30]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	f040 80a2 	bne.w	80058ec <HAL_UART_Receive+0x16e>
  {
    if ((pData == NULL) )
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_UART_Receive+0x34>
    {
      return  HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e09d      	b.n	80058ee <HAL_UART_Receive+0x170>
    }
    else if ( (Size == 0U))
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_UART_Receive+0x3e>
    {
    	return  HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e098      	b.n	80058ee <HAL_UART_Receive+0x170>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_UART_Receive+0x4c>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e091      	b.n	80058ee <HAL_UART_Receive+0x170>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2222      	movs	r2, #34	; 0x22
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057e6:	f7fd fc8d 	bl	8003104 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

    huart->RxXferSize = Size;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	88fa      	ldrh	r2, [r7, #6]
 80057f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	88fa      	ldrh	r2, [r7, #6]
 80057f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005800:	d108      	bne.n	8005814 <HAL_UART_Receive+0x96>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d104      	bne.n	8005814 <HAL_UART_Receive+0x96>
    {
      pdata8bits  = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	61bb      	str	r3, [r7, #24]
      pdata16bits = (uint16_t *) pData;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	e003      	b.n	800581c <HAL_UART_Receive+0x9e>
    }
    else
    {
      pdata8bits  = pData;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	61bb      	str	r3, [r7, #24]
      pdata16bits = NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
    }



    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005824:	e057      	b.n	80058d6 <HAL_UART_Receive+0x158>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2200      	movs	r2, #0
 800582e:	2120      	movs	r1, #32
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 f860 	bl	80058f6 <UART_WaitOnFlagUntilTimeout>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <HAL_UART_Receive+0xc2>
      {
        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e056      	b.n	80058ee <HAL_UART_Receive+0x170>
      }
      if (pdata8bits == NULL)
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10c      	bne.n	8005860 <HAL_UART_Receive+0xe2>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	b29b      	uxth	r3, r3
 800584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005852:	b29a      	uxth	r2, r3
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	3302      	adds	r3, #2
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	e033      	b.n	80058c8 <HAL_UART_Receive+0x14a>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005868:	d007      	beq.n	800587a <HAL_UART_Receive+0xfc>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10a      	bne.n	8005888 <HAL_UART_Receive+0x10a>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_UART_Receive+0x10a>
        {
        	 *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	e008      	b.n	800589a <HAL_UART_Receive+0x11c>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005894:	b2da      	uxtb	r2, r3
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	701a      	strb	r2, [r3, #0]
        }

    	/// Our CODE Addition 	 123.12;123.12#*123.12;123.12;123.12;123.12;123.12#
        if (*pdata8bits==(uint8_t)'*' && First_Inter==0)
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b2a      	cmp	r3, #42	; 0x2a
 80058a0:	d10c      	bne.n	80058bc <HAL_UART_Receive+0x13e>
 80058a2:	7fbb      	ldrb	r3, [r7, #30]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <HAL_UART_Receive+0x13e>
    	 {
    		    huart->RxXferSize  = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	88fa      	ldrh	r2, [r7, #6]
 80058ac:	859a      	strh	r2, [r3, #44]	; 0x2c
    		    huart->RxXferCount = Size;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	88fa      	ldrh	r2, [r7, #6]
 80058b2:	85da      	strh	r2, [r3, #46]	; 0x2e
    		    isStartReceiveing=1;
 80058b4:	2301      	movs	r3, #1
 80058b6:	77fb      	strb	r3, [r7, #31]
    		    First_Inter=1;
 80058b8:	2301      	movs	r3, #1
 80058ba:	77bb      	strb	r3, [r7, #30]
    	 }
    	 if(isStartReceiveing)
 80058bc:	7ffb      	ldrb	r3, [r7, #31]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_UART_Receive+0x14a>
    	 {
    		 pdata8bits++;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	3301      	adds	r3, #1
 80058c6:	61bb      	str	r3, [r7, #24]
    	 }
    	 // end of our addition

    	 // pdata8bits++;
      }
      huart->RxXferCount--;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1a2      	bne.n	8005826 <HAL_UART_Receive+0xa8>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e000      	b.n	80058ee <HAL_UART_Receive+0x170>
  }
  else
  {
    return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
  }
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3720      	adds	r7, #32
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b090      	sub	sp, #64	; 0x40
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	603b      	str	r3, [r7, #0]
 8005902:	4613      	mov	r3, r2
 8005904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005906:	e050      	b.n	80059aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800590a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590e:	d04c      	beq.n	80059aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <UART_WaitOnFlagUntilTimeout+0x30>
 8005916:	f7fd fbf5 	bl	8003104 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005922:	429a      	cmp	r2, r3
 8005924:	d241      	bcs.n	80059aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	330c      	adds	r3, #12
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800593c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	330c      	adds	r3, #12
 8005944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005946:	637a      	str	r2, [r7, #52]	; 0x34
 8005948:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800594c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e5      	bne.n	8005926 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3314      	adds	r3, #20
 8005960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	613b      	str	r3, [r7, #16]
   return(result);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	63bb      	str	r3, [r7, #56]	; 0x38
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3314      	adds	r3, #20
 8005978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800597a:	623a      	str	r2, [r7, #32]
 800597c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	69f9      	ldr	r1, [r7, #28]
 8005980:	6a3a      	ldr	r2, [r7, #32]
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	61bb      	str	r3, [r7, #24]
   return(result);
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e5      	bne.n	800595a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e00f      	b.n	80059ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4013      	ands	r3, r2
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	bf0c      	ite	eq
 80059ba:	2301      	moveq	r3, #1
 80059bc:	2300      	movne	r3, #0
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	461a      	mov	r2, r3
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d09f      	beq.n	8005908 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3740      	adds	r7, #64	; 0x40
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d8:	b0c0      	sub	sp, #256	; 0x100
 80059da:	af00      	add	r7, sp, #0
 80059dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f0:	68d9      	ldr	r1, [r3, #12]
 80059f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	ea40 0301 	orr.w	r3, r0, r1
 80059fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a2c:	f021 010c 	bic.w	r1, r1, #12
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a3a:	430b      	orrs	r3, r1
 8005a3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4e:	6999      	ldr	r1, [r3, #24]
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	ea40 0301 	orr.w	r3, r0, r1
 8005a5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b8f      	ldr	r3, [pc, #572]	; (8005ca0 <UART_SetConfig+0x2cc>)
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d005      	beq.n	8005a74 <UART_SetConfig+0xa0>
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b8d      	ldr	r3, [pc, #564]	; (8005ca4 <UART_SetConfig+0x2d0>)
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d104      	bne.n	8005a7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a74:	f7ff f84c 	bl	8004b10 <HAL_RCC_GetPCLK2Freq>
 8005a78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a7c:	e003      	b.n	8005a86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a7e:	f7ff f833 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8005a82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a90:	f040 810c 	bne.w	8005cac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005aa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005aa6:	4622      	mov	r2, r4
 8005aa8:	462b      	mov	r3, r5
 8005aaa:	1891      	adds	r1, r2, r2
 8005aac:	65b9      	str	r1, [r7, #88]	; 0x58
 8005aae:	415b      	adcs	r3, r3
 8005ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ab2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	eb12 0801 	adds.w	r8, r2, r1
 8005abc:	4629      	mov	r1, r5
 8005abe:	eb43 0901 	adc.w	r9, r3, r1
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ad6:	4690      	mov	r8, r2
 8005ad8:	4699      	mov	r9, r3
 8005ada:	4623      	mov	r3, r4
 8005adc:	eb18 0303 	adds.w	r3, r8, r3
 8005ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ae4:	462b      	mov	r3, r5
 8005ae6:	eb49 0303 	adc.w	r3, r9, r3
 8005aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005afa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005afe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b02:	460b      	mov	r3, r1
 8005b04:	18db      	adds	r3, r3, r3
 8005b06:	653b      	str	r3, [r7, #80]	; 0x50
 8005b08:	4613      	mov	r3, r2
 8005b0a:	eb42 0303 	adc.w	r3, r2, r3
 8005b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b18:	f7fb f8c6 	bl	8000ca8 <__aeabi_uldivmod>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4b61      	ldr	r3, [pc, #388]	; (8005ca8 <UART_SetConfig+0x2d4>)
 8005b22:	fba3 2302 	umull	r2, r3, r3, r2
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	011c      	lsls	r4, r3, #4
 8005b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b3c:	4642      	mov	r2, r8
 8005b3e:	464b      	mov	r3, r9
 8005b40:	1891      	adds	r1, r2, r2
 8005b42:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b44:	415b      	adcs	r3, r3
 8005b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b4c:	4641      	mov	r1, r8
 8005b4e:	eb12 0a01 	adds.w	sl, r2, r1
 8005b52:	4649      	mov	r1, r9
 8005b54:	eb43 0b01 	adc.w	fp, r3, r1
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b6c:	4692      	mov	sl, r2
 8005b6e:	469b      	mov	fp, r3
 8005b70:	4643      	mov	r3, r8
 8005b72:	eb1a 0303 	adds.w	r3, sl, r3
 8005b76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	18db      	adds	r3, r3, r3
 8005b9c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	eb42 0303 	adc.w	r3, r2, r3
 8005ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005baa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bae:	f7fb f87b 	bl	8000ca8 <__aeabi_uldivmod>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	4b3b      	ldr	r3, [pc, #236]	; (8005ca8 <UART_SetConfig+0x2d4>)
 8005bba:	fba3 2301 	umull	r2, r3, r3, r1
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2264      	movs	r2, #100	; 0x64
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	1acb      	subs	r3, r1, r3
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bce:	4b36      	ldr	r3, [pc, #216]	; (8005ca8 <UART_SetConfig+0x2d4>)
 8005bd0:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bdc:	441c      	add	r4, r3
 8005bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005be8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	1891      	adds	r1, r2, r2
 8005bf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bf8:	415b      	adcs	r3, r3
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c00:	4641      	mov	r1, r8
 8005c02:	1851      	adds	r1, r2, r1
 8005c04:	6339      	str	r1, [r7, #48]	; 0x30
 8005c06:	4649      	mov	r1, r9
 8005c08:	414b      	adcs	r3, r1
 8005c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c18:	4659      	mov	r1, fp
 8005c1a:	00cb      	lsls	r3, r1, #3
 8005c1c:	4651      	mov	r1, sl
 8005c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c22:	4651      	mov	r1, sl
 8005c24:	00ca      	lsls	r2, r1, #3
 8005c26:	4610      	mov	r0, r2
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	189b      	adds	r3, r3, r2
 8005c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c34:	464b      	mov	r3, r9
 8005c36:	460a      	mov	r2, r1
 8005c38:	eb42 0303 	adc.w	r3, r2, r3
 8005c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c54:	460b      	mov	r3, r1
 8005c56:	18db      	adds	r3, r3, r3
 8005c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	eb42 0303 	adc.w	r3, r2, r3
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c6a:	f7fb f81d 	bl	8000ca8 <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <UART_SetConfig+0x2d4>)
 8005c74:	fba3 1302 	umull	r1, r3, r3, r2
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	2164      	movs	r1, #100	; 0x64
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	3332      	adds	r3, #50	; 0x32
 8005c86:	4a08      	ldr	r2, [pc, #32]	; (8005ca8 <UART_SetConfig+0x2d4>)
 8005c88:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	f003 0207 	and.w	r2, r3, #7
 8005c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4422      	add	r2, r4
 8005c9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c9c:	e105      	b.n	8005eaa <UART_SetConfig+0x4d6>
 8005c9e:	bf00      	nop
 8005ca0:	40011000 	.word	0x40011000
 8005ca4:	40011400 	.word	0x40011400
 8005ca8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005cbe:	4642      	mov	r2, r8
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	1891      	adds	r1, r2, r2
 8005cc4:	6239      	str	r1, [r7, #32]
 8005cc6:	415b      	adcs	r3, r3
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cce:	4641      	mov	r1, r8
 8005cd0:	1854      	adds	r4, r2, r1
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	eb43 0501 	adc.w	r5, r3, r1
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	00eb      	lsls	r3, r5, #3
 8005ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ce6:	00e2      	lsls	r2, r4, #3
 8005ce8:	4614      	mov	r4, r2
 8005cea:	461d      	mov	r5, r3
 8005cec:	4643      	mov	r3, r8
 8005cee:	18e3      	adds	r3, r4, r3
 8005cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cf4:	464b      	mov	r3, r9
 8005cf6:	eb45 0303 	adc.w	r3, r5, r3
 8005cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d0e:	f04f 0200 	mov.w	r2, #0
 8005d12:	f04f 0300 	mov.w	r3, #0
 8005d16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	008b      	lsls	r3, r1, #2
 8005d1e:	4621      	mov	r1, r4
 8005d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d24:	4621      	mov	r1, r4
 8005d26:	008a      	lsls	r2, r1, #2
 8005d28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d2c:	f7fa ffbc 	bl	8000ca8 <__aeabi_uldivmod>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4b60      	ldr	r3, [pc, #384]	; (8005eb8 <UART_SetConfig+0x4e4>)
 8005d36:	fba3 2302 	umull	r2, r3, r3, r2
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	011c      	lsls	r4, r3, #4
 8005d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d50:	4642      	mov	r2, r8
 8005d52:	464b      	mov	r3, r9
 8005d54:	1891      	adds	r1, r2, r2
 8005d56:	61b9      	str	r1, [r7, #24]
 8005d58:	415b      	adcs	r3, r3
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d60:	4641      	mov	r1, r8
 8005d62:	1851      	adds	r1, r2, r1
 8005d64:	6139      	str	r1, [r7, #16]
 8005d66:	4649      	mov	r1, r9
 8005d68:	414b      	adcs	r3, r1
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d78:	4659      	mov	r1, fp
 8005d7a:	00cb      	lsls	r3, r1, #3
 8005d7c:	4651      	mov	r1, sl
 8005d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d82:	4651      	mov	r1, sl
 8005d84:	00ca      	lsls	r2, r1, #3
 8005d86:	4610      	mov	r0, r2
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	189b      	adds	r3, r3, r2
 8005d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d94:	464b      	mov	r3, r9
 8005d96:	460a      	mov	r2, r1
 8005d98:	eb42 0303 	adc.w	r3, r2, r3
 8005d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005daa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005db8:	4649      	mov	r1, r9
 8005dba:	008b      	lsls	r3, r1, #2
 8005dbc:	4641      	mov	r1, r8
 8005dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	008a      	lsls	r2, r1, #2
 8005dc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005dca:	f7fa ff6d 	bl	8000ca8 <__aeabi_uldivmod>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4b39      	ldr	r3, [pc, #228]	; (8005eb8 <UART_SetConfig+0x4e4>)
 8005dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	2164      	movs	r1, #100	; 0x64
 8005ddc:	fb01 f303 	mul.w	r3, r1, r3
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	3332      	adds	r3, #50	; 0x32
 8005de6:	4a34      	ldr	r2, [pc, #208]	; (8005eb8 <UART_SetConfig+0x4e4>)
 8005de8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005df2:	441c      	add	r4, r3
 8005df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df8:	2200      	movs	r2, #0
 8005dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8005dfc:	677a      	str	r2, [r7, #116]	; 0x74
 8005dfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e02:	4642      	mov	r2, r8
 8005e04:	464b      	mov	r3, r9
 8005e06:	1891      	adds	r1, r2, r2
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	415b      	adcs	r3, r3
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e12:	4641      	mov	r1, r8
 8005e14:	1851      	adds	r1, r2, r1
 8005e16:	6039      	str	r1, [r7, #0]
 8005e18:	4649      	mov	r1, r9
 8005e1a:	414b      	adcs	r3, r1
 8005e1c:	607b      	str	r3, [r7, #4]
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e2a:	4659      	mov	r1, fp
 8005e2c:	00cb      	lsls	r3, r1, #3
 8005e2e:	4651      	mov	r1, sl
 8005e30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e34:	4651      	mov	r1, sl
 8005e36:	00ca      	lsls	r2, r1, #3
 8005e38:	4610      	mov	r0, r2
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	4642      	mov	r2, r8
 8005e40:	189b      	adds	r3, r3, r2
 8005e42:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e44:	464b      	mov	r3, r9
 8005e46:	460a      	mov	r2, r1
 8005e48:	eb42 0303 	adc.w	r3, r2, r3
 8005e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	663b      	str	r3, [r7, #96]	; 0x60
 8005e58:	667a      	str	r2, [r7, #100]	; 0x64
 8005e5a:	f04f 0200 	mov.w	r2, #0
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e66:	4649      	mov	r1, r9
 8005e68:	008b      	lsls	r3, r1, #2
 8005e6a:	4641      	mov	r1, r8
 8005e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e70:	4641      	mov	r1, r8
 8005e72:	008a      	lsls	r2, r1, #2
 8005e74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e78:	f7fa ff16 	bl	8000ca8 <__aeabi_uldivmod>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <UART_SetConfig+0x4e4>)
 8005e82:	fba3 1302 	umull	r1, r3, r3, r2
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	2164      	movs	r1, #100	; 0x64
 8005e8a:	fb01 f303 	mul.w	r3, r1, r3
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	3332      	adds	r3, #50	; 0x32
 8005e94:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <UART_SetConfig+0x4e4>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	f003 020f 	and.w	r2, r3, #15
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4422      	add	r2, r4
 8005ea8:	609a      	str	r2, [r3, #8]
}
 8005eaa:	bf00      	nop
 8005eac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eb6:	bf00      	nop
 8005eb8:	51eb851f 	.word	0x51eb851f

08005ebc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ece:	2b84      	cmp	r3, #132	; 0x84
 8005ed0:	d005      	beq.n	8005ede <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ed2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	3303      	adds	r3, #3
 8005edc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ede:	68fb      	ldr	r3, [r7, #12]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ef0:	f001 f91e 	bl	8007130 <vTaskStartScheduler>
  
  return osOK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efc:	b089      	sub	sp, #36	; 0x24
 8005efe:	af04      	add	r7, sp, #16
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d020      	beq.n	8005f4e <osThreadCreate+0x54>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01c      	beq.n	8005f4e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685c      	ldr	r4, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681d      	ldr	r5, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691e      	ldr	r6, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff ffc8 	bl	8005ebc <makeFreeRtosPriority>
 8005f2c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f36:	9202      	str	r2, [sp, #8]
 8005f38:	9301      	str	r3, [sp, #4]
 8005f3a:	9100      	str	r1, [sp, #0]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	4632      	mov	r2, r6
 8005f40:	4629      	mov	r1, r5
 8005f42:	4620      	mov	r0, r4
 8005f44:	f000 fde4 	bl	8006b10 <xTaskCreateStatic>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	e01c      	b.n	8005f88 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685c      	ldr	r4, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f5a:	b29e      	uxth	r6, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff ffaa 	bl	8005ebc <makeFreeRtosPriority>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	f107 030c 	add.w	r3, r7, #12
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	9200      	str	r2, [sp, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	4632      	mov	r2, r6
 8005f76:	4629      	mov	r1, r5
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f000 fe26 	bl	8006bca <xTaskCreate>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d001      	beq.n	8005f88 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	e000      	b.n	8005f8a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f88:	68fb      	ldr	r3, [r7, #12]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f103 0208 	add.w	r2, r3, #8
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8005faa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f103 0208 	add.w	r2, r3, #8
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f103 0208 	add.w	r2, r3, #8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	601a      	str	r2, [r3, #0]
}
 8006028:	bf00      	nop
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d103      	bne.n	8006054 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	e00c      	b.n	800606e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3308      	adds	r3, #8
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	e002      	b.n	8006062 <vListInsert+0x2e>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	429a      	cmp	r2, r3
 800606c:	d2f6      	bcs.n	800605c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	601a      	str	r2, [r3, #0]
}
 800609a:	bf00      	nop
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6892      	ldr	r2, [r2, #8]
 80060bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6852      	ldr	r2, [r2, #4]
 80060c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d103      	bne.n	80060da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	1e5a      	subs	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
	...

080060fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006122:	bf00      	nop
 8006124:	e7fe      	b.n	8006124 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006126:	f001 ff95 	bl	8008054 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006136:	fb01 f303 	mul.w	r3, r1, r3
 800613a:	441a      	add	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006156:	3b01      	subs	r3, #1
 8006158:	68f9      	ldr	r1, [r7, #12]
 800615a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	441a      	add	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	22ff      	movs	r2, #255	; 0xff
 800616a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	22ff      	movs	r2, #255	; 0xff
 8006172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d114      	bne.n	80061a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01a      	beq.n	80061ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3310      	adds	r3, #16
 8006188:	4618      	mov	r0, r3
 800618a:	f001 fa57 	bl	800763c <xTaskRemoveFromEventList>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d012      	beq.n	80061ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006194:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <xQueueGenericReset+0xcc>)
 8006196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	e009      	b.n	80061ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3310      	adds	r3, #16
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff fef1 	bl	8005f92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3324      	adds	r3, #36	; 0x24
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff feec 	bl	8005f92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061ba:	f001 ff7b 	bl	80080b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061be:	2301      	movs	r3, #1
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	e000ed04 	.word	0xe000ed04

080061cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08a      	sub	sp, #40	; 0x28
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4613      	mov	r3, r2
 80061d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	613b      	str	r3, [r7, #16]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	fb02 f303 	mul.w	r3, r2, r3
 80061fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	3350      	adds	r3, #80	; 0x50
 8006204:	4618      	mov	r0, r3
 8006206:	f002 f847 	bl	8008298 <pvPortMalloc>
 800620a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d011      	beq.n	8006236 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	3350      	adds	r3, #80	; 0x50
 800621a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006224:	79fa      	ldrb	r2, [r7, #7]
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	4613      	mov	r3, r2
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	68b9      	ldr	r1, [r7, #8]
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 f805 	bl	8006240 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006236:	69bb      	ldr	r3, [r7, #24]
	}
 8006238:	4618      	mov	r0, r3
 800623a:	3720      	adds	r7, #32
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d103      	bne.n	800625c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e002      	b.n	8006262 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800626e:	2101      	movs	r1, #1
 8006270:	69b8      	ldr	r0, [r7, #24]
 8006272:	f7ff ff43 	bl	80060fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	78fa      	ldrb	r2, [r7, #3]
 800627a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006286:	b580      	push	{r7, lr}
 8006288:	b082      	sub	sp, #8
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00e      	beq.n	80062b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80062a6:	2300      	movs	r3, #0
 80062a8:	2200      	movs	r2, #0
 80062aa:	2100      	movs	r1, #0
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f81d 	bl	80062ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b086      	sub	sp, #24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	4603      	mov	r3, r0
 80062c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062c4:	2301      	movs	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	2300      	movs	r3, #0
 80062ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	461a      	mov	r2, r3
 80062d0:	6939      	ldr	r1, [r7, #16]
 80062d2:	6978      	ldr	r0, [r7, #20]
 80062d4:	f7ff ff7a 	bl	80061cc <xQueueGenericCreate>
 80062d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7ff ffd3 	bl	8006286 <prvInitialiseMutex>

		return xNewQueue;
 80062e0:	68fb      	ldr	r3, [r7, #12]
	}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08e      	sub	sp, #56	; 0x38
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062fa:	2300      	movs	r3, #0
 80062fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <xQueueGenericSend+0x32>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800631a:	bf00      	nop
 800631c:	e7fe      	b.n	800631c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d103      	bne.n	800632c <xQueueGenericSend+0x40>
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <xQueueGenericSend+0x44>
 800632c:	2301      	movs	r3, #1
 800632e:	e000      	b.n	8006332 <xQueueGenericSend+0x46>
 8006330:	2300      	movs	r3, #0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10a      	bne.n	800634c <xQueueGenericSend+0x60>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d103      	bne.n	800635a <xQueueGenericSend+0x6e>
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <xQueueGenericSend+0x72>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <xQueueGenericSend+0x74>
 800635e:	2300      	movs	r3, #0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10a      	bne.n	800637a <xQueueGenericSend+0x8e>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	623b      	str	r3, [r7, #32]
}
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800637a:	f001 fb1d 	bl	80079b8 <xTaskGetSchedulerState>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <xQueueGenericSend+0x9e>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <xQueueGenericSend+0xa2>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <xQueueGenericSend+0xa4>
 800638e:	2300      	movs	r3, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <xQueueGenericSend+0xbe>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	61fb      	str	r3, [r7, #28]
}
 80063a6:	bf00      	nop
 80063a8:	e7fe      	b.n	80063a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063aa:	f001 fe53 	bl	8008054 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d302      	bcc.n	80063c0 <xQueueGenericSend+0xd4>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d129      	bne.n	8006414 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	68b9      	ldr	r1, [r7, #8]
 80063c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063c6:	f000 fa93 	bl	80068f0 <prvCopyDataToQueue>
 80063ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d010      	beq.n	80063f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	3324      	adds	r3, #36	; 0x24
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 f92f 	bl	800763c <xTaskRemoveFromEventList>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d013      	beq.n	800640c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80063e4:	4b3f      	ldr	r3, [pc, #252]	; (80064e4 <xQueueGenericSend+0x1f8>)
 80063e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	e00a      	b.n	800640c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d007      	beq.n	800640c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80063fc:	4b39      	ldr	r3, [pc, #228]	; (80064e4 <xQueueGenericSend+0x1f8>)
 80063fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800640c:	f001 fe52 	bl	80080b4 <vPortExitCritical>
				return pdPASS;
 8006410:	2301      	movs	r3, #1
 8006412:	e063      	b.n	80064dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d103      	bne.n	8006422 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800641a:	f001 fe4b 	bl	80080b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800641e:	2300      	movs	r3, #0
 8006420:	e05c      	b.n	80064dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006428:	f107 0314 	add.w	r3, r7, #20
 800642c:	4618      	mov	r0, r3
 800642e:	f001 f967 	bl	8007700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006432:	2301      	movs	r3, #1
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006436:	f001 fe3d 	bl	80080b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800643a:	f000 fedb 	bl	80071f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800643e:	f001 fe09 	bl	8008054 <vPortEnterCritical>
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006448:	b25b      	sxtb	r3, r3
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644e:	d103      	bne.n	8006458 <xQueueGenericSend+0x16c>
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800645e:	b25b      	sxtb	r3, r3
 8006460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006464:	d103      	bne.n	800646e <xQueueGenericSend+0x182>
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800646e:	f001 fe21 	bl	80080b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006472:	1d3a      	adds	r2, r7, #4
 8006474:	f107 0314 	add.w	r3, r7, #20
 8006478:	4611      	mov	r1, r2
 800647a:	4618      	mov	r0, r3
 800647c:	f001 f956 	bl	800772c <xTaskCheckForTimeOut>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d124      	bne.n	80064d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006486:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006488:	f000 fb2a 	bl	8006ae0 <prvIsQueueFull>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d018      	beq.n	80064c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	3310      	adds	r3, #16
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	4611      	mov	r1, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f001 f8aa 	bl	80075f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064a2:	f000 fab5 	bl	8006a10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064a6:	f000 feb3 	bl	8007210 <xTaskResumeAll>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f47f af7c 	bne.w	80063aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80064b2:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <xQueueGenericSend+0x1f8>)
 80064b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	e772      	b.n	80063aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064c6:	f000 faa3 	bl	8006a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064ca:	f000 fea1 	bl	8007210 <xTaskResumeAll>
 80064ce:	e76c      	b.n	80063aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064d2:	f000 fa9d 	bl	8006a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064d6:	f000 fe9b 	bl	8007210 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80064da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3738      	adds	r7, #56	; 0x38
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	e000ed04 	.word	0xe000ed04

080064e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08c      	sub	sp, #48	; 0x30
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064f4:	2300      	movs	r3, #0
 80064f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <xQueueReceive+0x30>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	623b      	str	r3, [r7, #32]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <xQueueReceive+0x3e>
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <xQueueReceive+0x42>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <xQueueReceive+0x44>
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <xQueueReceive+0x5e>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	61fb      	str	r3, [r7, #28]
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006546:	f001 fa37 	bl	80079b8 <xTaskGetSchedulerState>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <xQueueReceive+0x6e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <xQueueReceive+0x72>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <xQueueReceive+0x74>
 800655a:	2300      	movs	r3, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <xQueueReceive+0x8e>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	61bb      	str	r3, [r7, #24]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006576:	f001 fd6d 	bl	8008054 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01f      	beq.n	80065c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800658a:	f000 fa1b 	bl	80069c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	1e5a      	subs	r2, r3, #1
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00f      	beq.n	80065be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	3310      	adds	r3, #16
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 f84a 	bl	800763c <xTaskRemoveFromEventList>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d007      	beq.n	80065be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065ae:	4b3d      	ldr	r3, [pc, #244]	; (80066a4 <xQueueReceive+0x1bc>)
 80065b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065be:	f001 fd79 	bl	80080b4 <vPortExitCritical>
				return pdPASS;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e069      	b.n	800669a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d103      	bne.n	80065d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065cc:	f001 fd72 	bl	80080b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065d0:	2300      	movs	r3, #0
 80065d2:	e062      	b.n	800669a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d106      	bne.n	80065e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065da:	f107 0310 	add.w	r3, r7, #16
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 f88e 	bl	8007700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065e4:	2301      	movs	r3, #1
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065e8:	f001 fd64 	bl	80080b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065ec:	f000 fe02 	bl	80071f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065f0:	f001 fd30 	bl	8008054 <vPortEnterCritical>
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065fa:	b25b      	sxtb	r3, r3
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d103      	bne.n	800660a <xQueueReceive+0x122>
 8006602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006610:	b25b      	sxtb	r3, r3
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006616:	d103      	bne.n	8006620 <xQueueReceive+0x138>
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006620:	f001 fd48 	bl	80080b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006624:	1d3a      	adds	r2, r7, #4
 8006626:	f107 0310 	add.w	r3, r7, #16
 800662a:	4611      	mov	r1, r2
 800662c:	4618      	mov	r0, r3
 800662e:	f001 f87d 	bl	800772c <xTaskCheckForTimeOut>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d123      	bne.n	8006680 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663a:	f000 fa3b 	bl	8006ab4 <prvIsQueueEmpty>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d017      	beq.n	8006674 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	3324      	adds	r3, #36	; 0x24
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	4611      	mov	r1, r2
 800664c:	4618      	mov	r0, r3
 800664e:	f000 ffd1 	bl	80075f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006654:	f000 f9dc 	bl	8006a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006658:	f000 fdda 	bl	8007210 <xTaskResumeAll>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d189      	bne.n	8006576 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006662:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <xQueueReceive+0x1bc>)
 8006664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	e780      	b.n	8006576 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006676:	f000 f9cb 	bl	8006a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800667a:	f000 fdc9 	bl	8007210 <xTaskResumeAll>
 800667e:	e77a      	b.n	8006576 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006682:	f000 f9c5 	bl	8006a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006686:	f000 fdc3 	bl	8007210 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800668a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800668c:	f000 fa12 	bl	8006ab4 <prvIsQueueEmpty>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	f43f af6f 	beq.w	8006576 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006698:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800669a:	4618      	mov	r0, r3
 800669c:	3730      	adds	r7, #48	; 0x30
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	e000ed04 	.word	0xe000ed04

080066a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08e      	sub	sp, #56	; 0x38
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80066b2:	2300      	movs	r3, #0
 80066b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <xQueueSemaphoreTake+0x32>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	623b      	str	r3, [r7, #32]
}
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	61fb      	str	r3, [r7, #28]
}
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066f8:	f001 f95e 	bl	80079b8 <xTaskGetSchedulerState>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d102      	bne.n	8006708 <xQueueSemaphoreTake+0x60>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <xQueueSemaphoreTake+0x64>
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <xQueueSemaphoreTake+0x66>
 800670c:	2300      	movs	r3, #0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	61bb      	str	r3, [r7, #24]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006728:	f001 fc94 	bl	8008054 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	2b00      	cmp	r3, #0
 8006736:	d024      	beq.n	8006782 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	1e5a      	subs	r2, r3, #1
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006748:	f001 fade 	bl	8007d08 <pvTaskIncrementMutexHeldCount>
 800674c:	4602      	mov	r2, r0
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00f      	beq.n	800677a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	3310      	adds	r3, #16
 800675e:	4618      	mov	r0, r3
 8006760:	f000 ff6c 	bl	800763c <xTaskRemoveFromEventList>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800676a:	4b54      	ldr	r3, [pc, #336]	; (80068bc <xQueueSemaphoreTake+0x214>)
 800676c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800677a:	f001 fc9b 	bl	80080b4 <vPortExitCritical>
				return pdPASS;
 800677e:	2301      	movs	r3, #1
 8006780:	e097      	b.n	80068b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d111      	bne.n	80067ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	617b      	str	r3, [r7, #20]
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80067a4:	f001 fc86 	bl	80080b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067a8:	2300      	movs	r3, #0
 80067aa:	e082      	b.n	80068b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067b2:	f107 030c 	add.w	r3, r7, #12
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 ffa2 	bl	8007700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067bc:	2301      	movs	r3, #1
 80067be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067c0:	f001 fc78 	bl	80080b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067c4:	f000 fd16 	bl	80071f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067c8:	f001 fc44 	bl	8008054 <vPortEnterCritical>
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067d2:	b25b      	sxtb	r3, r3
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d103      	bne.n	80067e2 <xQueueSemaphoreTake+0x13a>
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067e8:	b25b      	sxtb	r3, r3
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ee:	d103      	bne.n	80067f8 <xQueueSemaphoreTake+0x150>
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067f8:	f001 fc5c 	bl	80080b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067fc:	463a      	mov	r2, r7
 80067fe:	f107 030c 	add.w	r3, r7, #12
 8006802:	4611      	mov	r1, r2
 8006804:	4618      	mov	r0, r3
 8006806:	f000 ff91 	bl	800772c <xTaskCheckForTimeOut>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d132      	bne.n	8006876 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006812:	f000 f94f 	bl	8006ab4 <prvIsQueueEmpty>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d026      	beq.n	800686a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d109      	bne.n	8006838 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006824:	f001 fc16 	bl	8008054 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	4618      	mov	r0, r3
 800682e:	f001 f8e1 	bl	80079f4 <xTaskPriorityInherit>
 8006832:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006834:	f001 fc3e 	bl	80080b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	3324      	adds	r3, #36	; 0x24
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	4611      	mov	r1, r2
 8006840:	4618      	mov	r0, r3
 8006842:	f000 fed7 	bl	80075f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006848:	f000 f8e2 	bl	8006a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800684c:	f000 fce0 	bl	8007210 <xTaskResumeAll>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	f47f af68 	bne.w	8006728 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006858:	4b18      	ldr	r3, [pc, #96]	; (80068bc <xQueueSemaphoreTake+0x214>)
 800685a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	e75e      	b.n	8006728 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800686a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800686c:	f000 f8d0 	bl	8006a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006870:	f000 fcce 	bl	8007210 <xTaskResumeAll>
 8006874:	e758      	b.n	8006728 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006876:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006878:	f000 f8ca 	bl	8006a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800687c:	f000 fcc8 	bl	8007210 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006882:	f000 f917 	bl	8006ab4 <prvIsQueueEmpty>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	f43f af4d 	beq.w	8006728 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00d      	beq.n	80068b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006894:	f001 fbde 	bl	8008054 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006898:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800689a:	f000 f811 	bl	80068c0 <prvGetDisinheritPriorityAfterTimeout>
 800689e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068a6:	4618      	mov	r0, r3
 80068a8:	f001 f9a0 	bl	8007bec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80068ac:	f001 fc02 	bl	80080b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3738      	adds	r7, #56	; 0x38
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	e000ed04 	.word	0xe000ed04

080068c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d006      	beq.n	80068de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f1c3 0307 	rsb	r3, r3, #7
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e001      	b.n	80068e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068e2:	68fb      	ldr	r3, [r7, #12]
	}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10d      	bne.n	800692a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d14d      	bne.n	80069b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	4618      	mov	r0, r3
 800691c:	f001 f8e0 	bl	8007ae0 <xTaskPriorityDisinherit>
 8006920:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	609a      	str	r2, [r3, #8]
 8006928:	e043      	b.n	80069b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d119      	bne.n	8006964 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6858      	ldr	r0, [r3, #4]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	461a      	mov	r2, r3
 800693a:	68b9      	ldr	r1, [r7, #8]
 800693c:	f001 fec4 	bl	80086c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	441a      	add	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	429a      	cmp	r2, r3
 8006958:	d32b      	bcc.n	80069b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	605a      	str	r2, [r3, #4]
 8006962:	e026      	b.n	80069b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68d8      	ldr	r0, [r3, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696c:	461a      	mov	r2, r3
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	f001 feaa 	bl	80086c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	425b      	negs	r3, r3
 800697e:	441a      	add	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d207      	bcs.n	80069a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	425b      	negs	r3, r3
 800699a:	441a      	add	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d105      	bne.n	80069b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069ba:	697b      	ldr	r3, [r7, #20]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d018      	beq.n	8006a08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	441a      	add	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d303      	bcc.n	80069f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68d9      	ldr	r1, [r3, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	461a      	mov	r2, r3
 8006a02:	6838      	ldr	r0, [r7, #0]
 8006a04:	f001 fe60 	bl	80086c8 <memcpy>
	}
}
 8006a08:	bf00      	nop
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a18:	f001 fb1c 	bl	8008054 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a24:	e011      	b.n	8006a4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d012      	beq.n	8006a54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3324      	adds	r3, #36	; 0x24
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fe02 	bl	800763c <xTaskRemoveFromEventList>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a3e:	f000 fed7 	bl	80077f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	dce9      	bgt.n	8006a26 <prvUnlockQueue+0x16>
 8006a52:	e000      	b.n	8006a56 <prvUnlockQueue+0x46>
					break;
 8006a54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	22ff      	movs	r2, #255	; 0xff
 8006a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a5e:	f001 fb29 	bl	80080b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a62:	f001 faf7 	bl	8008054 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a6e:	e011      	b.n	8006a94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d012      	beq.n	8006a9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3310      	adds	r3, #16
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 fddd 	bl	800763c <xTaskRemoveFromEventList>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a88:	f000 feb2 	bl	80077f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a8c:	7bbb      	ldrb	r3, [r7, #14]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	dce9      	bgt.n	8006a70 <prvUnlockQueue+0x60>
 8006a9c:	e000      	b.n	8006aa0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	22ff      	movs	r2, #255	; 0xff
 8006aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006aa8:	f001 fb04 	bl	80080b4 <vPortExitCritical>
}
 8006aac:	bf00      	nop
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006abc:	f001 faca 	bl	8008054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d102      	bne.n	8006ace <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	e001      	b.n	8006ad2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ad2:	f001 faef 	bl	80080b4 <vPortExitCritical>

	return xReturn;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ae8:	f001 fab4 	bl	8008054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d102      	bne.n	8006afe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006af8:	2301      	movs	r3, #1
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	e001      	b.n	8006b02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b02:	f001 fad7 	bl	80080b4 <vPortExitCritical>

	return xReturn;
 8006b06:	68fb      	ldr	r3, [r7, #12]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08e      	sub	sp, #56	; 0x38
 8006b14:	af04      	add	r7, sp, #16
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10a      	bne.n	8006b3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	623b      	str	r3, [r7, #32]
}
 8006b36:	bf00      	nop
 8006b38:	e7fe      	b.n	8006b38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10a      	bne.n	8006b56 <xTaskCreateStatic+0x46>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	61fb      	str	r3, [r7, #28]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b56:	2364      	movs	r3, #100	; 0x64
 8006b58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b64      	cmp	r3, #100	; 0x64
 8006b5e:	d00a      	beq.n	8006b76 <xTaskCreateStatic+0x66>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	61bb      	str	r3, [r7, #24]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d01e      	beq.n	8006bbc <xTaskCreateStatic+0xac>
 8006b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01b      	beq.n	8006bbc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	2202      	movs	r2, #2
 8006b92:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b96:	2300      	movs	r3, #0
 8006b98:	9303      	str	r3, [sp, #12]
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	9302      	str	r3, [sp, #8]
 8006b9e:	f107 0314 	add.w	r3, r7, #20
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 f850 	bl	8006c54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bb6:	f000 f8e3 	bl	8006d80 <prvAddNewTaskToReadyList>
 8006bba:	e001      	b.n	8006bc0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bc0:	697b      	ldr	r3, [r7, #20]
	}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3728      	adds	r7, #40	; 0x28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b08c      	sub	sp, #48	; 0x30
 8006bce:	af04      	add	r7, sp, #16
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	603b      	str	r3, [r7, #0]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bda:	88fb      	ldrh	r3, [r7, #6]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f001 fb5a 	bl	8008298 <pvPortMalloc>
 8006be4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00e      	beq.n	8006c0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bec:	2064      	movs	r0, #100	; 0x64
 8006bee:	f001 fb53 	bl	8008298 <pvPortMalloc>
 8006bf2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8006c00:	e005      	b.n	8006c0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c02:	6978      	ldr	r0, [r7, #20]
 8006c04:	f001 fc18 	bl	8008438 <vPortFree>
 8006c08:	e001      	b.n	8006c0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d017      	beq.n	8006c44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c1c:	88fa      	ldrh	r2, [r7, #6]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	9303      	str	r3, [sp, #12]
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	9302      	str	r3, [sp, #8]
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	9301      	str	r3, [sp, #4]
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 f80e 	bl	8006c54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c38:	69f8      	ldr	r0, [r7, #28]
 8006c3a:	f000 f8a1 	bl	8006d80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	61bb      	str	r3, [r7, #24]
 8006c42:	e002      	b.n	8006c4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c44:	f04f 33ff 	mov.w	r3, #4294967295
 8006c48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c4a:	69bb      	ldr	r3, [r7, #24]
	}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3720      	adds	r7, #32
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	21a5      	movs	r1, #165	; 0xa5
 8006c6e:	f001 fd39 	bl	80086e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	f023 0307 	bic.w	r3, r3, #7
 8006c8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <prvInitialiseNewTask+0x58>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	617b      	str	r3, [r7, #20]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01f      	beq.n	8006cf2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	e012      	b.n	8006cde <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	7819      	ldrb	r1, [r3, #0]
 8006cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3334      	adds	r3, #52	; 0x34
 8006cc8:	460a      	mov	r2, r1
 8006cca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d006      	beq.n	8006ce6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d9e9      	bls.n	8006cb8 <prvInitialiseNewTask+0x64>
 8006ce4:	e000      	b.n	8006ce8 <prvInitialiseNewTask+0x94>
			{
				break;
 8006ce6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cf0:	e003      	b.n	8006cfa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	2b06      	cmp	r3, #6
 8006cfe:	d901      	bls.n	8006d04 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d00:	2306      	movs	r3, #6
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	2200      	movs	r2, #0
 8006d14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff f959 	bl	8005fd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	3318      	adds	r3, #24
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff f954 	bl	8005fd2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	f1c3 0207 	rsb	r2, r3, #7
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	2200      	movs	r2, #0
 8006d44:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	2200      	movs	r2, #0
 8006d4a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	2200      	movs	r2, #0
 8006d50:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	68f9      	ldr	r1, [r7, #12]
 8006d5e:	69b8      	ldr	r0, [r7, #24]
 8006d60:	f001 f84c 	bl	8007dfc <pxPortInitialiseStack>
 8006d64:	4602      	mov	r2, r0
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d76:	bf00      	nop
 8006d78:	3720      	adds	r7, #32
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d88:	f001 f964 	bl	8008054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d8c:	4b2c      	ldr	r3, [pc, #176]	; (8006e40 <prvAddNewTaskToReadyList+0xc0>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3301      	adds	r3, #1
 8006d92:	4a2b      	ldr	r2, [pc, #172]	; (8006e40 <prvAddNewTaskToReadyList+0xc0>)
 8006d94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d96:	4b2b      	ldr	r3, [pc, #172]	; (8006e44 <prvAddNewTaskToReadyList+0xc4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d9e:	4a29      	ldr	r2, [pc, #164]	; (8006e44 <prvAddNewTaskToReadyList+0xc4>)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006da4:	4b26      	ldr	r3, [pc, #152]	; (8006e40 <prvAddNewTaskToReadyList+0xc0>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d110      	bne.n	8006dce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006dac:	f000 fd46 	bl	800783c <prvInitialiseTaskLists>
 8006db0:	e00d      	b.n	8006dce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006db2:	4b25      	ldr	r3, [pc, #148]	; (8006e48 <prvAddNewTaskToReadyList+0xc8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d109      	bne.n	8006dce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dba:	4b22      	ldr	r3, [pc, #136]	; (8006e44 <prvAddNewTaskToReadyList+0xc4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d802      	bhi.n	8006dce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dc8:	4a1e      	ldr	r2, [pc, #120]	; (8006e44 <prvAddNewTaskToReadyList+0xc4>)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dce:	4b1f      	ldr	r3, [pc, #124]	; (8006e4c <prvAddNewTaskToReadyList+0xcc>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	4a1d      	ldr	r2, [pc, #116]	; (8006e4c <prvAddNewTaskToReadyList+0xcc>)
 8006dd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dd8:	4b1c      	ldr	r3, [pc, #112]	; (8006e4c <prvAddNewTaskToReadyList+0xcc>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	2201      	movs	r2, #1
 8006de6:	409a      	lsls	r2, r3
 8006de8:	4b19      	ldr	r3, [pc, #100]	; (8006e50 <prvAddNewTaskToReadyList+0xd0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	4a18      	ldr	r2, [pc, #96]	; (8006e50 <prvAddNewTaskToReadyList+0xd0>)
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4a15      	ldr	r2, [pc, #84]	; (8006e54 <prvAddNewTaskToReadyList+0xd4>)
 8006e00:	441a      	add	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3304      	adds	r3, #4
 8006e06:	4619      	mov	r1, r3
 8006e08:	4610      	mov	r0, r2
 8006e0a:	f7ff f8ef 	bl	8005fec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e0e:	f001 f951 	bl	80080b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e12:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <prvAddNewTaskToReadyList+0xc8>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00e      	beq.n	8006e38 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e1a:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <prvAddNewTaskToReadyList+0xc4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d207      	bcs.n	8006e38 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e28:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <prvAddNewTaskToReadyList+0xd8>)
 8006e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e38:	bf00      	nop
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000920 	.word	0x20000920
 8006e44:	20000820 	.word	0x20000820
 8006e48:	2000092c 	.word	0x2000092c
 8006e4c:	2000093c 	.word	0x2000093c
 8006e50:	20000928 	.word	0x20000928
 8006e54:	20000824 	.word	0x20000824
 8006e58:	e000ed04 	.word	0xe000ed04

08006e5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d017      	beq.n	8006e9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e6e:	4b13      	ldr	r3, [pc, #76]	; (8006ebc <vTaskDelay+0x60>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <vTaskDelay+0x30>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	60bb      	str	r3, [r7, #8]
}
 8006e88:	bf00      	nop
 8006e8a:	e7fe      	b.n	8006e8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e8c:	f000 f9b2 	bl	80071f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e90:	2100      	movs	r1, #0
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 ff4c 	bl	8007d30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e98:	f000 f9ba 	bl	8007210 <xTaskResumeAll>
 8006e9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d107      	bne.n	8006eb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <vTaskDelay+0x64>)
 8006ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eb4:	bf00      	nop
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	20000948 	.word	0x20000948
 8006ec0:	e000ed04 	.word	0xe000ed04

08006ec4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006ecc:	f001 f8c2 	bl	8008054 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d102      	bne.n	8006edc <vTaskSuspend+0x18>
 8006ed6:	4b3c      	ldr	r3, [pc, #240]	; (8006fc8 <vTaskSuspend+0x104>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	e000      	b.n	8006ede <vTaskSuspend+0x1a>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7ff f8de 	bl	80060a6 <uxListRemove>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d115      	bne.n	8006f1c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	4935      	ldr	r1, [pc, #212]	; (8006fcc <vTaskSuspend+0x108>)
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	440b      	add	r3, r1
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <vTaskSuspend+0x58>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	43da      	mvns	r2, r3
 8006f12:	4b2f      	ldr	r3, [pc, #188]	; (8006fd0 <vTaskSuspend+0x10c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4013      	ands	r3, r2
 8006f18:	4a2d      	ldr	r2, [pc, #180]	; (8006fd0 <vTaskSuspend+0x10c>)
 8006f1a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3318      	adds	r3, #24
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff f8bc 	bl	80060a6 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3304      	adds	r3, #4
 8006f32:	4619      	mov	r1, r3
 8006f34:	4827      	ldr	r0, [pc, #156]	; (8006fd4 <vTaskSuspend+0x110>)
 8006f36:	f7ff f859 	bl	8005fec <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d103      	bne.n	8006f4e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006f4e:	f001 f8b1 	bl	80080b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006f52:	4b21      	ldr	r3, [pc, #132]	; (8006fd8 <vTaskSuspend+0x114>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d005      	beq.n	8006f66 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006f5a:	f001 f87b 	bl	8008054 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006f5e:	f000 fd0b 	bl	8007978 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006f62:	f001 f8a7 	bl	80080b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006f66:	4b18      	ldr	r3, [pc, #96]	; (8006fc8 <vTaskSuspend+0x104>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d127      	bne.n	8006fc0 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8006f70:	4b19      	ldr	r3, [pc, #100]	; (8006fd8 <vTaskSuspend+0x114>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d017      	beq.n	8006fa8 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006f78:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <vTaskSuspend+0x118>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00a      	beq.n	8006f96 <vTaskSuspend+0xd2>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	60bb      	str	r3, [r7, #8]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8006f96:	4b12      	ldr	r3, [pc, #72]	; (8006fe0 <vTaskSuspend+0x11c>)
 8006f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fa6:	e00b      	b.n	8006fc0 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <vTaskSuspend+0x110>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <vTaskSuspend+0x120>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d103      	bne.n	8006fbc <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <vTaskSuspend+0x104>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
	}
 8006fba:	e001      	b.n	8006fc0 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8006fbc:	f000 fa7c 	bl	80074b8 <vTaskSwitchContext>
	}
 8006fc0:	bf00      	nop
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000820 	.word	0x20000820
 8006fcc:	20000824 	.word	0x20000824
 8006fd0:	20000928 	.word	0x20000928
 8006fd4:	2000090c 	.word	0x2000090c
 8006fd8:	2000092c 	.word	0x2000092c
 8006fdc:	20000948 	.word	0x20000948
 8006fe0:	e000ed04 	.word	0xe000ed04
 8006fe4:	20000920 	.word	0x20000920

08006fe8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	60fb      	str	r3, [r7, #12]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	4a0a      	ldr	r2, [pc, #40]	; (8007044 <prvTaskIsTaskSuspended+0x5c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d10a      	bne.n	8007034 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	4a09      	ldr	r2, [pc, #36]	; (8007048 <prvTaskIsTaskSuspended+0x60>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d005      	beq.n	8007034 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8007030:	2301      	movs	r3, #1
 8007032:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007034:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007036:	4618      	mov	r0, r3
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	2000090c 	.word	0x2000090c
 8007048:	200008e0 	.word	0x200008e0

0800704c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	; 0x28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8007054:	2300      	movs	r3, #0
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	61bb      	str	r3, [r7, #24]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007078:	f001 f8ce 	bl	8008218 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800707c:	f3ef 8211 	mrs	r2, BASEPRI
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	617a      	str	r2, [r7, #20]
 8007092:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007094:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007096:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007098:	6a38      	ldr	r0, [r7, #32]
 800709a:	f7ff ffa5 	bl	8006fe8 <prvTaskIsTaskSuspended>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d02f      	beq.n	8007104 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070a4:	4b1d      	ldr	r3, [pc, #116]	; (800711c <xTaskResumeFromISR+0xd0>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d125      	bne.n	80070f8 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b0:	4b1b      	ldr	r3, [pc, #108]	; (8007120 <xTaskResumeFromISR+0xd4>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d301      	bcc.n	80070be <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80070ba:	2301      	movs	r3, #1
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	3304      	adds	r3, #4
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe ffef 	bl	80060a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	2201      	movs	r2, #1
 80070ce:	409a      	lsls	r2, r3
 80070d0:	4b14      	ldr	r3, [pc, #80]	; (8007124 <xTaskResumeFromISR+0xd8>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	4a13      	ldr	r2, [pc, #76]	; (8007124 <xTaskResumeFromISR+0xd8>)
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4a10      	ldr	r2, [pc, #64]	; (8007128 <xTaskResumeFromISR+0xdc>)
 80070e8:	441a      	add	r2, r3
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	3304      	adds	r3, #4
 80070ee:	4619      	mov	r1, r3
 80070f0:	4610      	mov	r0, r2
 80070f2:	f7fe ff7b 	bl	8005fec <vListInsertEnd>
 80070f6:	e005      	b.n	8007104 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	3318      	adds	r3, #24
 80070fc:	4619      	mov	r1, r3
 80070fe:	480b      	ldr	r0, [pc, #44]	; (800712c <xTaskResumeFromISR+0xe0>)
 8007100:	f7fe ff74 	bl	8005fec <vListInsertEnd>
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800710e:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007112:	4618      	mov	r0, r3
 8007114:	3728      	adds	r7, #40	; 0x28
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20000948 	.word	0x20000948
 8007120:	20000820 	.word	0x20000820
 8007124:	20000928 	.word	0x20000928
 8007128:	20000824 	.word	0x20000824
 800712c:	200008e0 	.word	0x200008e0

08007130 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08a      	sub	sp, #40	; 0x28
 8007134:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007136:	2300      	movs	r3, #0
 8007138:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800713a:	2300      	movs	r3, #0
 800713c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800713e:	463a      	mov	r2, r7
 8007140:	1d39      	adds	r1, r7, #4
 8007142:	f107 0308 	add.w	r3, r7, #8
 8007146:	4618      	mov	r0, r3
 8007148:	f7f9 ff66 	bl	8001018 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	9202      	str	r2, [sp, #8]
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	2300      	movs	r3, #0
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	2300      	movs	r3, #0
 800715c:	460a      	mov	r2, r1
 800715e:	491f      	ldr	r1, [pc, #124]	; (80071dc <vTaskStartScheduler+0xac>)
 8007160:	481f      	ldr	r0, [pc, #124]	; (80071e0 <vTaskStartScheduler+0xb0>)
 8007162:	f7ff fcd5 	bl	8006b10 <xTaskCreateStatic>
 8007166:	4603      	mov	r3, r0
 8007168:	4a1e      	ldr	r2, [pc, #120]	; (80071e4 <vTaskStartScheduler+0xb4>)
 800716a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800716c:	4b1d      	ldr	r3, [pc, #116]	; (80071e4 <vTaskStartScheduler+0xb4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007174:	2301      	movs	r3, #1
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	e001      	b.n	800717e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d118      	bne.n	80071b6 <vTaskStartScheduler+0x86>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	613b      	str	r3, [r7, #16]
}
 8007196:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007198:	4b13      	ldr	r3, [pc, #76]	; (80071e8 <vTaskStartScheduler+0xb8>)
 800719a:	f04f 32ff 	mov.w	r2, #4294967295
 800719e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071a0:	4b12      	ldr	r3, [pc, #72]	; (80071ec <vTaskStartScheduler+0xbc>)
 80071a2:	2201      	movs	r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071a6:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <vTaskStartScheduler+0xc0>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80071ac:	f7f9 ff68 	bl	8001080 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071b0:	f000 feae 	bl	8007f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071b4:	e00e      	b.n	80071d4 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071bc:	d10a      	bne.n	80071d4 <vTaskStartScheduler+0xa4>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	60fb      	str	r3, [r7, #12]
}
 80071d0:	bf00      	nop
 80071d2:	e7fe      	b.n	80071d2 <vTaskStartScheduler+0xa2>
}
 80071d4:	bf00      	nop
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	0800eec0 	.word	0x0800eec0
 80071e0:	08007809 	.word	0x08007809
 80071e4:	20000944 	.word	0x20000944
 80071e8:	20000940 	.word	0x20000940
 80071ec:	2000092c 	.word	0x2000092c
 80071f0:	20000924 	.word	0x20000924

080071f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80071f8:	4b04      	ldr	r3, [pc, #16]	; (800720c <vTaskSuspendAll+0x18>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3301      	adds	r3, #1
 80071fe:	4a03      	ldr	r2, [pc, #12]	; (800720c <vTaskSuspendAll+0x18>)
 8007200:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007202:	bf00      	nop
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	20000948 	.word	0x20000948

08007210 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007216:	2300      	movs	r3, #0
 8007218:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800721a:	2300      	movs	r3, #0
 800721c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800721e:	4b41      	ldr	r3, [pc, #260]	; (8007324 <xTaskResumeAll+0x114>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10a      	bne.n	800723c <xTaskResumeAll+0x2c>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	603b      	str	r3, [r7, #0]
}
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800723c:	f000 ff0a 	bl	8008054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007240:	4b38      	ldr	r3, [pc, #224]	; (8007324 <xTaskResumeAll+0x114>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3b01      	subs	r3, #1
 8007246:	4a37      	ldr	r2, [pc, #220]	; (8007324 <xTaskResumeAll+0x114>)
 8007248:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800724a:	4b36      	ldr	r3, [pc, #216]	; (8007324 <xTaskResumeAll+0x114>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d161      	bne.n	8007316 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007252:	4b35      	ldr	r3, [pc, #212]	; (8007328 <xTaskResumeAll+0x118>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d05d      	beq.n	8007316 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800725a:	e02e      	b.n	80072ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800725c:	4b33      	ldr	r3, [pc, #204]	; (800732c <xTaskResumeAll+0x11c>)
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3318      	adds	r3, #24
 8007268:	4618      	mov	r0, r3
 800726a:	f7fe ff1c 	bl	80060a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3304      	adds	r3, #4
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe ff17 	bl	80060a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	2201      	movs	r2, #1
 800727e:	409a      	lsls	r2, r3
 8007280:	4b2b      	ldr	r3, [pc, #172]	; (8007330 <xTaskResumeAll+0x120>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4313      	orrs	r3, r2
 8007286:	4a2a      	ldr	r2, [pc, #168]	; (8007330 <xTaskResumeAll+0x120>)
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728e:	4613      	mov	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4a27      	ldr	r2, [pc, #156]	; (8007334 <xTaskResumeAll+0x124>)
 8007298:	441a      	add	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3304      	adds	r3, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	4610      	mov	r0, r2
 80072a2:	f7fe fea3 	bl	8005fec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072aa:	4b23      	ldr	r3, [pc, #140]	; (8007338 <xTaskResumeAll+0x128>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d302      	bcc.n	80072ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80072b4:	4b21      	ldr	r3, [pc, #132]	; (800733c <xTaskResumeAll+0x12c>)
 80072b6:	2201      	movs	r2, #1
 80072b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072ba:	4b1c      	ldr	r3, [pc, #112]	; (800732c <xTaskResumeAll+0x11c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1cc      	bne.n	800725c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072c8:	f000 fb56 	bl	8007978 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80072cc:	4b1c      	ldr	r3, [pc, #112]	; (8007340 <xTaskResumeAll+0x130>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d010      	beq.n	80072fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072d8:	f000 f836 	bl	8007348 <xTaskIncrementTick>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80072e2:	4b16      	ldr	r3, [pc, #88]	; (800733c <xTaskResumeAll+0x12c>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1f1      	bne.n	80072d8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80072f4:	4b12      	ldr	r3, [pc, #72]	; (8007340 <xTaskResumeAll+0x130>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072fa:	4b10      	ldr	r3, [pc, #64]	; (800733c <xTaskResumeAll+0x12c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d009      	beq.n	8007316 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007302:	2301      	movs	r3, #1
 8007304:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007306:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <xTaskResumeAll+0x134>)
 8007308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007316:	f000 fecd 	bl	80080b4 <vPortExitCritical>

	return xAlreadyYielded;
 800731a:	68bb      	ldr	r3, [r7, #8]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	20000948 	.word	0x20000948
 8007328:	20000920 	.word	0x20000920
 800732c:	200008e0 	.word	0x200008e0
 8007330:	20000928 	.word	0x20000928
 8007334:	20000824 	.word	0x20000824
 8007338:	20000820 	.word	0x20000820
 800733c:	20000934 	.word	0x20000934
 8007340:	20000930 	.word	0x20000930
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800734e:	2300      	movs	r3, #0
 8007350:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007352:	4b4e      	ldr	r3, [pc, #312]	; (800748c <xTaskIncrementTick+0x144>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f040 808e 	bne.w	8007478 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800735c:	4b4c      	ldr	r3, [pc, #304]	; (8007490 <xTaskIncrementTick+0x148>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3301      	adds	r3, #1
 8007362:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007364:	4a4a      	ldr	r2, [pc, #296]	; (8007490 <xTaskIncrementTick+0x148>)
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d120      	bne.n	80073b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007370:	4b48      	ldr	r3, [pc, #288]	; (8007494 <xTaskIncrementTick+0x14c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <xTaskIncrementTick+0x48>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	603b      	str	r3, [r7, #0]
}
 800738c:	bf00      	nop
 800738e:	e7fe      	b.n	800738e <xTaskIncrementTick+0x46>
 8007390:	4b40      	ldr	r3, [pc, #256]	; (8007494 <xTaskIncrementTick+0x14c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60fb      	str	r3, [r7, #12]
 8007396:	4b40      	ldr	r3, [pc, #256]	; (8007498 <xTaskIncrementTick+0x150>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a3e      	ldr	r2, [pc, #248]	; (8007494 <xTaskIncrementTick+0x14c>)
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	4a3e      	ldr	r2, [pc, #248]	; (8007498 <xTaskIncrementTick+0x150>)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	4b3d      	ldr	r3, [pc, #244]	; (800749c <xTaskIncrementTick+0x154>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3301      	adds	r3, #1
 80073aa:	4a3c      	ldr	r2, [pc, #240]	; (800749c <xTaskIncrementTick+0x154>)
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	f000 fae3 	bl	8007978 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073b2:	4b3b      	ldr	r3, [pc, #236]	; (80074a0 <xTaskIncrementTick+0x158>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d348      	bcc.n	800744e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073bc:	4b35      	ldr	r3, [pc, #212]	; (8007494 <xTaskIncrementTick+0x14c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d104      	bne.n	80073d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c6:	4b36      	ldr	r3, [pc, #216]	; (80074a0 <xTaskIncrementTick+0x158>)
 80073c8:	f04f 32ff 	mov.w	r2, #4294967295
 80073cc:	601a      	str	r2, [r3, #0]
					break;
 80073ce:	e03e      	b.n	800744e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073d0:	4b30      	ldr	r3, [pc, #192]	; (8007494 <xTaskIncrementTick+0x14c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d203      	bcs.n	80073f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073e8:	4a2d      	ldr	r2, [pc, #180]	; (80074a0 <xTaskIncrementTick+0x158>)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073ee:	e02e      	b.n	800744e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	3304      	adds	r3, #4
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe fe56 	bl	80060a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d004      	beq.n	800740c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	3318      	adds	r3, #24
 8007406:	4618      	mov	r0, r3
 8007408:	f7fe fe4d 	bl	80060a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	2201      	movs	r2, #1
 8007412:	409a      	lsls	r2, r3
 8007414:	4b23      	ldr	r3, [pc, #140]	; (80074a4 <xTaskIncrementTick+0x15c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4313      	orrs	r3, r2
 800741a:	4a22      	ldr	r2, [pc, #136]	; (80074a4 <xTaskIncrementTick+0x15c>)
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4a1f      	ldr	r2, [pc, #124]	; (80074a8 <xTaskIncrementTick+0x160>)
 800742c:	441a      	add	r2, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	3304      	adds	r3, #4
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f7fe fdd9 	bl	8005fec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743e:	4b1b      	ldr	r3, [pc, #108]	; (80074ac <xTaskIncrementTick+0x164>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	429a      	cmp	r2, r3
 8007446:	d3b9      	bcc.n	80073bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007448:	2301      	movs	r3, #1
 800744a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800744c:	e7b6      	b.n	80073bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800744e:	4b17      	ldr	r3, [pc, #92]	; (80074ac <xTaskIncrementTick+0x164>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007454:	4914      	ldr	r1, [pc, #80]	; (80074a8 <xTaskIncrementTick+0x160>)
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	440b      	add	r3, r1
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d901      	bls.n	800746a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007466:	2301      	movs	r3, #1
 8007468:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800746a:	4b11      	ldr	r3, [pc, #68]	; (80074b0 <xTaskIncrementTick+0x168>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007472:	2301      	movs	r3, #1
 8007474:	617b      	str	r3, [r7, #20]
 8007476:	e004      	b.n	8007482 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007478:	4b0e      	ldr	r3, [pc, #56]	; (80074b4 <xTaskIncrementTick+0x16c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3301      	adds	r3, #1
 800747e:	4a0d      	ldr	r2, [pc, #52]	; (80074b4 <xTaskIncrementTick+0x16c>)
 8007480:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007482:	697b      	ldr	r3, [r7, #20]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000948 	.word	0x20000948
 8007490:	20000924 	.word	0x20000924
 8007494:	200008d8 	.word	0x200008d8
 8007498:	200008dc 	.word	0x200008dc
 800749c:	20000938 	.word	0x20000938
 80074a0:	20000940 	.word	0x20000940
 80074a4:	20000928 	.word	0x20000928
 80074a8:	20000824 	.word	0x20000824
 80074ac:	20000820 	.word	0x20000820
 80074b0:	20000934 	.word	0x20000934
 80074b4:	20000930 	.word	0x20000930

080074b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074be:	4b46      	ldr	r3, [pc, #280]	; (80075d8 <vTaskSwitchContext+0x120>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074c6:	4b45      	ldr	r3, [pc, #276]	; (80075dc <vTaskSwitchContext+0x124>)
 80074c8:	2201      	movs	r2, #1
 80074ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074cc:	e07f      	b.n	80075ce <vTaskSwitchContext+0x116>
		xYieldPending = pdFALSE;
 80074ce:	4b43      	ldr	r3, [pc, #268]	; (80075dc <vTaskSwitchContext+0x124>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80074d4:	f7f9 fde4 	bl	80010a0 <getRunTimeCounterValue>
 80074d8:	4603      	mov	r3, r0
 80074da:	4a41      	ldr	r2, [pc, #260]	; (80075e0 <vTaskSwitchContext+0x128>)
 80074dc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80074de:	4b40      	ldr	r3, [pc, #256]	; (80075e0 <vTaskSwitchContext+0x128>)
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	4b40      	ldr	r3, [pc, #256]	; (80075e4 <vTaskSwitchContext+0x12c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d909      	bls.n	80074fe <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80074ea:	4b3f      	ldr	r3, [pc, #252]	; (80075e8 <vTaskSwitchContext+0x130>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80074f0:	4a3b      	ldr	r2, [pc, #236]	; (80075e0 <vTaskSwitchContext+0x128>)
 80074f2:	6810      	ldr	r0, [r2, #0]
 80074f4:	4a3b      	ldr	r2, [pc, #236]	; (80075e4 <vTaskSwitchContext+0x12c>)
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	1a82      	subs	r2, r0, r2
 80074fa:	440a      	add	r2, r1
 80074fc:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 80074fe:	4b38      	ldr	r3, [pc, #224]	; (80075e0 <vTaskSwitchContext+0x128>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a38      	ldr	r2, [pc, #224]	; (80075e4 <vTaskSwitchContext+0x12c>)
 8007504:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007506:	4b38      	ldr	r3, [pc, #224]	; (80075e8 <vTaskSwitchContext+0x130>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	61fb      	str	r3, [r7, #28]
 800750e:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8007512:	61bb      	str	r3, [r7, #24]
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	429a      	cmp	r2, r3
 800751c:	d111      	bne.n	8007542 <vTaskSwitchContext+0x8a>
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	3304      	adds	r3, #4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	429a      	cmp	r2, r3
 8007528:	d10b      	bne.n	8007542 <vTaskSwitchContext+0x8a>
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	3308      	adds	r3, #8
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	429a      	cmp	r2, r3
 8007534:	d105      	bne.n	8007542 <vTaskSwitchContext+0x8a>
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	330c      	adds	r3, #12
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	429a      	cmp	r2, r3
 8007540:	d008      	beq.n	8007554 <vTaskSwitchContext+0x9c>
 8007542:	4b29      	ldr	r3, [pc, #164]	; (80075e8 <vTaskSwitchContext+0x130>)
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	4b28      	ldr	r3, [pc, #160]	; (80075e8 <vTaskSwitchContext+0x130>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3334      	adds	r3, #52	; 0x34
 800754c:	4619      	mov	r1, r3
 800754e:	4610      	mov	r0, r2
 8007550:	f7f9 fd83 	bl	800105a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007554:	4b25      	ldr	r3, [pc, #148]	; (80075ec <vTaskSwitchContext+0x134>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	fab3 f383 	clz	r3, r3
 8007560:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007562:	7afb      	ldrb	r3, [r7, #11]
 8007564:	f1c3 031f 	rsb	r3, r3, #31
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	4921      	ldr	r1, [pc, #132]	; (80075f0 <vTaskSwitchContext+0x138>)
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	440b      	add	r3, r1
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10a      	bne.n	8007594 <vTaskSwitchContext+0xdc>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	607b      	str	r3, [r7, #4]
}
 8007590:	bf00      	nop
 8007592:	e7fe      	b.n	8007592 <vTaskSwitchContext+0xda>
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4a14      	ldr	r2, [pc, #80]	; (80075f0 <vTaskSwitchContext+0x138>)
 80075a0:	4413      	add	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	605a      	str	r2, [r3, #4]
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	3308      	adds	r3, #8
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d104      	bne.n	80075c4 <vTaskSwitchContext+0x10c>
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	605a      	str	r2, [r3, #4]
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	4a07      	ldr	r2, [pc, #28]	; (80075e8 <vTaskSwitchContext+0x130>)
 80075cc:	6013      	str	r3, [r2, #0]
}
 80075ce:	bf00      	nop
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20000948 	.word	0x20000948
 80075dc:	20000934 	.word	0x20000934
 80075e0:	20000950 	.word	0x20000950
 80075e4:	2000094c 	.word	0x2000094c
 80075e8:	20000820 	.word	0x20000820
 80075ec:	20000928 	.word	0x20000928
 80075f0:	20000824 	.word	0x20000824

080075f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	60fb      	str	r3, [r7, #12]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800761a:	4b07      	ldr	r3, [pc, #28]	; (8007638 <vTaskPlaceOnEventList+0x44>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3318      	adds	r3, #24
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7fe fd06 	bl	8006034 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007628:	2101      	movs	r1, #1
 800762a:	6838      	ldr	r0, [r7, #0]
 800762c:	f000 fb80 	bl	8007d30 <prvAddCurrentTaskToDelayedList>
}
 8007630:	bf00      	nop
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	20000820 	.word	0x20000820

0800763c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10a      	bne.n	8007668 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	60fb      	str	r3, [r7, #12]
}
 8007664:	bf00      	nop
 8007666:	e7fe      	b.n	8007666 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	3318      	adds	r3, #24
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe fd1a 	bl	80060a6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007672:	4b1d      	ldr	r3, [pc, #116]	; (80076e8 <xTaskRemoveFromEventList+0xac>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d11c      	bne.n	80076b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	3304      	adds	r3, #4
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe fd11 	bl	80060a6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	2201      	movs	r2, #1
 800768a:	409a      	lsls	r2, r3
 800768c:	4b17      	ldr	r3, [pc, #92]	; (80076ec <xTaskRemoveFromEventList+0xb0>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4313      	orrs	r3, r2
 8007692:	4a16      	ldr	r2, [pc, #88]	; (80076ec <xTaskRemoveFromEventList+0xb0>)
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4a13      	ldr	r2, [pc, #76]	; (80076f0 <xTaskRemoveFromEventList+0xb4>)
 80076a4:	441a      	add	r2, r3
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4619      	mov	r1, r3
 80076ac:	4610      	mov	r0, r2
 80076ae:	f7fe fc9d 	bl	8005fec <vListInsertEnd>
 80076b2:	e005      	b.n	80076c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	3318      	adds	r3, #24
 80076b8:	4619      	mov	r1, r3
 80076ba:	480e      	ldr	r0, [pc, #56]	; (80076f4 <xTaskRemoveFromEventList+0xb8>)
 80076bc:	f7fe fc96 	bl	8005fec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c4:	4b0c      	ldr	r3, [pc, #48]	; (80076f8 <xTaskRemoveFromEventList+0xbc>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d905      	bls.n	80076da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80076ce:	2301      	movs	r3, #1
 80076d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80076d2:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <xTaskRemoveFromEventList+0xc0>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	e001      	b.n	80076de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80076de:	697b      	ldr	r3, [r7, #20]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20000948 	.word	0x20000948
 80076ec:	20000928 	.word	0x20000928
 80076f0:	20000824 	.word	0x20000824
 80076f4:	200008e0 	.word	0x200008e0
 80076f8:	20000820 	.word	0x20000820
 80076fc:	20000934 	.word	0x20000934

08007700 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007708:	4b06      	ldr	r3, [pc, #24]	; (8007724 <vTaskInternalSetTimeOutState+0x24>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007710:	4b05      	ldr	r3, [pc, #20]	; (8007728 <vTaskInternalSetTimeOutState+0x28>)
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	605a      	str	r2, [r3, #4]
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	20000938 	.word	0x20000938
 8007728:	20000924 	.word	0x20000924

0800772c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10a      	bne.n	8007752 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	613b      	str	r3, [r7, #16]
}
 800774e:	bf00      	nop
 8007750:	e7fe      	b.n	8007750 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10a      	bne.n	800776e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	60fb      	str	r3, [r7, #12]
}
 800776a:	bf00      	nop
 800776c:	e7fe      	b.n	800776c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800776e:	f000 fc71 	bl	8008054 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007772:	4b1d      	ldr	r3, [pc, #116]	; (80077e8 <xTaskCheckForTimeOut+0xbc>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778a:	d102      	bne.n	8007792 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800778c:	2300      	movs	r3, #0
 800778e:	61fb      	str	r3, [r7, #28]
 8007790:	e023      	b.n	80077da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	4b15      	ldr	r3, [pc, #84]	; (80077ec <xTaskCheckForTimeOut+0xc0>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	d007      	beq.n	80077ae <xTaskCheckForTimeOut+0x82>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d302      	bcc.n	80077ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077a8:	2301      	movs	r3, #1
 80077aa:	61fb      	str	r3, [r7, #28]
 80077ac:	e015      	b.n	80077da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d20b      	bcs.n	80077d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	1ad2      	subs	r2, r2, r3
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7ff ff9b 	bl	8007700 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077ca:	2300      	movs	r3, #0
 80077cc:	61fb      	str	r3, [r7, #28]
 80077ce:	e004      	b.n	80077da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80077d6:	2301      	movs	r3, #1
 80077d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80077da:	f000 fc6b 	bl	80080b4 <vPortExitCritical>

	return xReturn;
 80077de:	69fb      	ldr	r3, [r7, #28]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3720      	adds	r7, #32
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20000924 	.word	0x20000924
 80077ec:	20000938 	.word	0x20000938

080077f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077f4:	4b03      	ldr	r3, [pc, #12]	; (8007804 <vTaskMissedYield+0x14>)
 80077f6:	2201      	movs	r2, #1
 80077f8:	601a      	str	r2, [r3, #0]
}
 80077fa:	bf00      	nop
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	20000934 	.word	0x20000934

08007808 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007810:	f000 f854 	bl	80078bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007814:	4b07      	ldr	r3, [pc, #28]	; (8007834 <prvIdleTask+0x2c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d907      	bls.n	800782c <prvIdleTask+0x24>
			{
				taskYIELD();
 800781c:	4b06      	ldr	r3, [pc, #24]	; (8007838 <prvIdleTask+0x30>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800782c:	f7f9 fc0e 	bl	800104c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007830:	e7ee      	b.n	8007810 <prvIdleTask+0x8>
 8007832:	bf00      	nop
 8007834:	20000824 	.word	0x20000824
 8007838:	e000ed04 	.word	0xe000ed04

0800783c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007842:	2300      	movs	r3, #0
 8007844:	607b      	str	r3, [r7, #4]
 8007846:	e00c      	b.n	8007862 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4a12      	ldr	r2, [pc, #72]	; (800789c <prvInitialiseTaskLists+0x60>)
 8007854:	4413      	add	r3, r2
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe fb9b 	bl	8005f92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3301      	adds	r3, #1
 8007860:	607b      	str	r3, [r7, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b06      	cmp	r3, #6
 8007866:	d9ef      	bls.n	8007848 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007868:	480d      	ldr	r0, [pc, #52]	; (80078a0 <prvInitialiseTaskLists+0x64>)
 800786a:	f7fe fb92 	bl	8005f92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800786e:	480d      	ldr	r0, [pc, #52]	; (80078a4 <prvInitialiseTaskLists+0x68>)
 8007870:	f7fe fb8f 	bl	8005f92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007874:	480c      	ldr	r0, [pc, #48]	; (80078a8 <prvInitialiseTaskLists+0x6c>)
 8007876:	f7fe fb8c 	bl	8005f92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800787a:	480c      	ldr	r0, [pc, #48]	; (80078ac <prvInitialiseTaskLists+0x70>)
 800787c:	f7fe fb89 	bl	8005f92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007880:	480b      	ldr	r0, [pc, #44]	; (80078b0 <prvInitialiseTaskLists+0x74>)
 8007882:	f7fe fb86 	bl	8005f92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007886:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <prvInitialiseTaskLists+0x78>)
 8007888:	4a05      	ldr	r2, [pc, #20]	; (80078a0 <prvInitialiseTaskLists+0x64>)
 800788a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800788c:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <prvInitialiseTaskLists+0x7c>)
 800788e:	4a05      	ldr	r2, [pc, #20]	; (80078a4 <prvInitialiseTaskLists+0x68>)
 8007890:	601a      	str	r2, [r3, #0]
}
 8007892:	bf00      	nop
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000824 	.word	0x20000824
 80078a0:	200008b0 	.word	0x200008b0
 80078a4:	200008c4 	.word	0x200008c4
 80078a8:	200008e0 	.word	0x200008e0
 80078ac:	200008f4 	.word	0x200008f4
 80078b0:	2000090c 	.word	0x2000090c
 80078b4:	200008d8 	.word	0x200008d8
 80078b8:	200008dc 	.word	0x200008dc

080078bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078c2:	e019      	b.n	80078f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078c4:	f000 fbc6 	bl	8008054 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c8:	4b10      	ldr	r3, [pc, #64]	; (800790c <prvCheckTasksWaitingTermination+0x50>)
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3304      	adds	r3, #4
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fe fbe6 	bl	80060a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078da:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <prvCheckTasksWaitingTermination+0x54>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3b01      	subs	r3, #1
 80078e0:	4a0b      	ldr	r2, [pc, #44]	; (8007910 <prvCheckTasksWaitingTermination+0x54>)
 80078e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078e4:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <prvCheckTasksWaitingTermination+0x58>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	4a0a      	ldr	r2, [pc, #40]	; (8007914 <prvCheckTasksWaitingTermination+0x58>)
 80078ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078ee:	f000 fbe1 	bl	80080b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f810 	bl	8007918 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078f8:	4b06      	ldr	r3, [pc, #24]	; (8007914 <prvCheckTasksWaitingTermination+0x58>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1e1      	bne.n	80078c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007900:	bf00      	nop
 8007902:	bf00      	nop
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	200008f4 	.word	0x200008f4
 8007910:	20000920 	.word	0x20000920
 8007914:	20000908 	.word	0x20000908

08007918 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007926:	2b00      	cmp	r3, #0
 8007928:	d108      	bne.n	800793c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792e:	4618      	mov	r0, r3
 8007930:	f000 fd82 	bl	8008438 <vPortFree>
				vPortFree( pxTCB );
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fd7f 	bl	8008438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800793a:	e018      	b.n	800796e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007942:	2b01      	cmp	r3, #1
 8007944:	d103      	bne.n	800794e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fd76 	bl	8008438 <vPortFree>
	}
 800794c:	e00f      	b.n	800796e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007954:	2b02      	cmp	r3, #2
 8007956:	d00a      	beq.n	800796e <prvDeleteTCB+0x56>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	60fb      	str	r3, [r7, #12]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <prvDeleteTCB+0x54>
	}
 800796e:	bf00      	nop
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800797e:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <prvResetNextTaskUnblockTime+0x38>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d104      	bne.n	8007992 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007988:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <prvResetNextTaskUnblockTime+0x3c>)
 800798a:	f04f 32ff 	mov.w	r2, #4294967295
 800798e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007990:	e008      	b.n	80079a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007992:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <prvResetNextTaskUnblockTime+0x38>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	4a04      	ldr	r2, [pc, #16]	; (80079b4 <prvResetNextTaskUnblockTime+0x3c>)
 80079a2:	6013      	str	r3, [r2, #0]
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	200008d8 	.word	0x200008d8
 80079b4:	20000940 	.word	0x20000940

080079b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079be:	4b0b      	ldr	r3, [pc, #44]	; (80079ec <xTaskGetSchedulerState+0x34>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d102      	bne.n	80079cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079c6:	2301      	movs	r3, #1
 80079c8:	607b      	str	r3, [r7, #4]
 80079ca:	e008      	b.n	80079de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079cc:	4b08      	ldr	r3, [pc, #32]	; (80079f0 <xTaskGetSchedulerState+0x38>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d102      	bne.n	80079da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079d4:	2302      	movs	r3, #2
 80079d6:	607b      	str	r3, [r7, #4]
 80079d8:	e001      	b.n	80079de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079da:	2300      	movs	r3, #0
 80079dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079de:	687b      	ldr	r3, [r7, #4]
	}
 80079e0:	4618      	mov	r0, r3
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	2000092c 	.word	0x2000092c
 80079f0:	20000948 	.word	0x20000948

080079f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a00:	2300      	movs	r3, #0
 8007a02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d05e      	beq.n	8007ac8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0e:	4b31      	ldr	r3, [pc, #196]	; (8007ad4 <xTaskPriorityInherit+0xe0>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d24e      	bcs.n	8007ab6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	db06      	blt.n	8007a2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a20:	4b2c      	ldr	r3, [pc, #176]	; (8007ad4 <xTaskPriorityInherit+0xe0>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	f1c3 0207 	rsb	r2, r3, #7
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	6959      	ldr	r1, [r3, #20]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a36:	4613      	mov	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4a26      	ldr	r2, [pc, #152]	; (8007ad8 <xTaskPriorityInherit+0xe4>)
 8007a40:	4413      	add	r3, r2
 8007a42:	4299      	cmp	r1, r3
 8007a44:	d12f      	bne.n	8007aa6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fe fb2b 	bl	80060a6 <uxListRemove>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10a      	bne.n	8007a6c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a60:	43da      	mvns	r2, r3
 8007a62:	4b1e      	ldr	r3, [pc, #120]	; (8007adc <xTaskPriorityInherit+0xe8>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4013      	ands	r3, r2
 8007a68:	4a1c      	ldr	r2, [pc, #112]	; (8007adc <xTaskPriorityInherit+0xe8>)
 8007a6a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a6c:	4b19      	ldr	r3, [pc, #100]	; (8007ad4 <xTaskPriorityInherit+0xe0>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	409a      	lsls	r2, r3
 8007a7e:	4b17      	ldr	r3, [pc, #92]	; (8007adc <xTaskPriorityInherit+0xe8>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	4a15      	ldr	r2, [pc, #84]	; (8007adc <xTaskPriorityInherit+0xe8>)
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4a10      	ldr	r2, [pc, #64]	; (8007ad8 <xTaskPriorityInherit+0xe4>)
 8007a96:	441a      	add	r2, r3
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	f7fe faa4 	bl	8005fec <vListInsertEnd>
 8007aa4:	e004      	b.n	8007ab0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <xTaskPriorityInherit+0xe0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e008      	b.n	8007ac8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007aba:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <xTaskPriorityInherit+0xe0>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d201      	bcs.n	8007ac8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
	}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000820 	.word	0x20000820
 8007ad8:	20000824 	.word	0x20000824
 8007adc:	20000928 	.word	0x20000928

08007ae0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d06e      	beq.n	8007bd4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007af6:	4b3a      	ldr	r3, [pc, #232]	; (8007be0 <xTaskPriorityDisinherit+0x100>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d00a      	beq.n	8007b16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	60fb      	str	r3, [r7, #12]
}
 8007b12:	bf00      	nop
 8007b14:	e7fe      	b.n	8007b14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	60bb      	str	r3, [r7, #8]
}
 8007b30:	bf00      	nop
 8007b32:	e7fe      	b.n	8007b32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b38:	1e5a      	subs	r2, r3, #1
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d044      	beq.n	8007bd4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d140      	bne.n	8007bd4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	3304      	adds	r3, #4
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe faa5 	bl	80060a6 <uxListRemove>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d115      	bne.n	8007b8e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b66:	491f      	ldr	r1, [pc, #124]	; (8007be4 <xTaskPriorityDisinherit+0x104>)
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	440b      	add	r3, r1
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <xTaskPriorityDisinherit+0xae>
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b82:	43da      	mvns	r2, r3
 8007b84:	4b18      	ldr	r3, [pc, #96]	; (8007be8 <xTaskPriorityDisinherit+0x108>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4013      	ands	r3, r2
 8007b8a:	4a17      	ldr	r2, [pc, #92]	; (8007be8 <xTaskPriorityDisinherit+0x108>)
 8007b8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9a:	f1c3 0207 	rsb	r2, r3, #7
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	409a      	lsls	r2, r3
 8007baa:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <xTaskPriorityDisinherit+0x108>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	4a0d      	ldr	r2, [pc, #52]	; (8007be8 <xTaskPriorityDisinherit+0x108>)
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb8:	4613      	mov	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4a08      	ldr	r2, [pc, #32]	; (8007be4 <xTaskPriorityDisinherit+0x104>)
 8007bc2:	441a      	add	r2, r3
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4610      	mov	r0, r2
 8007bcc:	f7fe fa0e 	bl	8005fec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007bd4:	697b      	ldr	r3, [r7, #20]
	}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20000820 	.word	0x20000820
 8007be4:	20000824 	.word	0x20000824
 8007be8:	20000928 	.word	0x20000928

08007bec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d077      	beq.n	8007cf4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	60fb      	str	r3, [r7, #12]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d902      	bls.n	8007c32 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	61fb      	str	r3, [r7, #28]
 8007c30:	e002      	b.n	8007c38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c36:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d058      	beq.n	8007cf4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d153      	bne.n	8007cf4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007c4c:	4b2b      	ldr	r3, [pc, #172]	; (8007cfc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d10a      	bne.n	8007c6c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	60bb      	str	r3, [r7, #8]
}
 8007c68:	bf00      	nop
 8007c6a:	e7fe      	b.n	8007c6a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	db04      	blt.n	8007c8a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	f1c3 0207 	rsb	r2, r3, #7
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	6959      	ldr	r1, [r3, #20]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	4613      	mov	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4a19      	ldr	r2, [pc, #100]	; (8007d00 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007c9a:	4413      	add	r3, r2
 8007c9c:	4299      	cmp	r1, r3
 8007c9e:	d129      	bne.n	8007cf4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fe f9fe 	bl	80060a6 <uxListRemove>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cba:	43da      	mvns	r2, r3
 8007cbc:	4b11      	ldr	r3, [pc, #68]	; (8007d04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	4a10      	ldr	r2, [pc, #64]	; (8007d04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007cc4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cca:	2201      	movs	r2, #1
 8007ccc:	409a      	lsls	r2, r3
 8007cce:	4b0d      	ldr	r3, [pc, #52]	; (8007d04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	4a0b      	ldr	r2, [pc, #44]	; (8007d04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4a06      	ldr	r2, [pc, #24]	; (8007d00 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007ce6:	441a      	add	r2, r3
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	3304      	adds	r3, #4
 8007cec:	4619      	mov	r1, r3
 8007cee:	4610      	mov	r0, r2
 8007cf0:	f7fe f97c 	bl	8005fec <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cf4:	bf00      	nop
 8007cf6:	3720      	adds	r7, #32
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20000820 	.word	0x20000820
 8007d00:	20000824 	.word	0x20000824
 8007d04:	20000928 	.word	0x20000928

08007d08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d08:	b480      	push	{r7}
 8007d0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d0c:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <pvTaskIncrementMutexHeldCount+0x24>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d004      	beq.n	8007d1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d14:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <pvTaskIncrementMutexHeldCount+0x24>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d1a:	3201      	adds	r2, #1
 8007d1c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007d1e:	4b03      	ldr	r3, [pc, #12]	; (8007d2c <pvTaskIncrementMutexHeldCount+0x24>)
 8007d20:	681b      	ldr	r3, [r3, #0]
	}
 8007d22:	4618      	mov	r0, r3
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	20000820 	.word	0x20000820

08007d30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d3a:	4b29      	ldr	r3, [pc, #164]	; (8007de0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d40:	4b28      	ldr	r3, [pc, #160]	; (8007de4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3304      	adds	r3, #4
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe f9ad 	bl	80060a6 <uxListRemove>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10b      	bne.n	8007d6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007d52:	4b24      	ldr	r3, [pc, #144]	; (8007de4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	2201      	movs	r2, #1
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	43da      	mvns	r2, r3
 8007d60:	4b21      	ldr	r3, [pc, #132]	; (8007de8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4013      	ands	r3, r2
 8007d66:	4a20      	ldr	r2, [pc, #128]	; (8007de8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d70:	d10a      	bne.n	8007d88 <prvAddCurrentTaskToDelayedList+0x58>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d78:	4b1a      	ldr	r3, [pc, #104]	; (8007de4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	4619      	mov	r1, r3
 8007d80:	481a      	ldr	r0, [pc, #104]	; (8007dec <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d82:	f7fe f933 	bl	8005fec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d86:	e026      	b.n	8007dd6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d90:	4b14      	ldr	r3, [pc, #80]	; (8007de4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d209      	bcs.n	8007db4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007da0:	4b13      	ldr	r3, [pc, #76]	; (8007df0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	4b0f      	ldr	r3, [pc, #60]	; (8007de4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3304      	adds	r3, #4
 8007daa:	4619      	mov	r1, r3
 8007dac:	4610      	mov	r0, r2
 8007dae:	f7fe f941 	bl	8006034 <vListInsert>
}
 8007db2:	e010      	b.n	8007dd6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007db4:	4b0f      	ldr	r3, [pc, #60]	; (8007df4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	4b0a      	ldr	r3, [pc, #40]	; (8007de4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	f7fe f937 	bl	8006034 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007dc6:	4b0c      	ldr	r3, [pc, #48]	; (8007df8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d202      	bcs.n	8007dd6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007dd0:	4a09      	ldr	r2, [pc, #36]	; (8007df8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6013      	str	r3, [r2, #0]
}
 8007dd6:	bf00      	nop
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000924 	.word	0x20000924
 8007de4:	20000820 	.word	0x20000820
 8007de8:	20000928 	.word	0x20000928
 8007dec:	2000090c 	.word	0x2000090c
 8007df0:	200008dc 	.word	0x200008dc
 8007df4:	200008d8 	.word	0x200008d8
 8007df8:	20000940 	.word	0x20000940

08007dfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3b04      	subs	r3, #4
 8007e0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3b04      	subs	r3, #4
 8007e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f023 0201 	bic.w	r2, r3, #1
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3b04      	subs	r3, #4
 8007e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e2c:	4a0c      	ldr	r2, [pc, #48]	; (8007e60 <pxPortInitialiseStack+0x64>)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3b14      	subs	r3, #20
 8007e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3b04      	subs	r3, #4
 8007e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f06f 0202 	mvn.w	r2, #2
 8007e4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3b20      	subs	r3, #32
 8007e50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e52:	68fb      	ldr	r3, [r7, #12]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	08007e65 	.word	0x08007e65

08007e64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e6e:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <prvTaskExitError+0x54>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e76:	d00a      	beq.n	8007e8e <prvTaskExitError+0x2a>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	60fb      	str	r3, [r7, #12]
}
 8007e8a:	bf00      	nop
 8007e8c:	e7fe      	b.n	8007e8c <prvTaskExitError+0x28>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	60bb      	str	r3, [r7, #8]
}
 8007ea0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ea2:	bf00      	nop
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d0fc      	beq.n	8007ea4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007eaa:	bf00      	nop
 8007eac:	bf00      	nop
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	20000010 	.word	0x20000010
 8007ebc:	00000000 	.word	0x00000000

08007ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ec0:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <pxCurrentTCBConst2>)
 8007ec2:	6819      	ldr	r1, [r3, #0]
 8007ec4:	6808      	ldr	r0, [r1, #0]
 8007ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eca:	f380 8809 	msr	PSP, r0
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f04f 0000 	mov.w	r0, #0
 8007ed6:	f380 8811 	msr	BASEPRI, r0
 8007eda:	4770      	bx	lr
 8007edc:	f3af 8000 	nop.w

08007ee0 <pxCurrentTCBConst2>:
 8007ee0:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ee4:	bf00      	nop
 8007ee6:	bf00      	nop

08007ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ee8:	4808      	ldr	r0, [pc, #32]	; (8007f0c <prvPortStartFirstTask+0x24>)
 8007eea:	6800      	ldr	r0, [r0, #0]
 8007eec:	6800      	ldr	r0, [r0, #0]
 8007eee:	f380 8808 	msr	MSP, r0
 8007ef2:	f04f 0000 	mov.w	r0, #0
 8007ef6:	f380 8814 	msr	CONTROL, r0
 8007efa:	b662      	cpsie	i
 8007efc:	b661      	cpsie	f
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	df00      	svc	0
 8007f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f0a:	bf00      	nop
 8007f0c:	e000ed08 	.word	0xe000ed08

08007f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f16:	4b46      	ldr	r3, [pc, #280]	; (8008030 <xPortStartScheduler+0x120>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a46      	ldr	r2, [pc, #280]	; (8008034 <xPortStartScheduler+0x124>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d10a      	bne.n	8007f36 <xPortStartScheduler+0x26>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	613b      	str	r3, [r7, #16]
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f36:	4b3e      	ldr	r3, [pc, #248]	; (8008030 <xPortStartScheduler+0x120>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a3f      	ldr	r2, [pc, #252]	; (8008038 <xPortStartScheduler+0x128>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d10a      	bne.n	8007f56 <xPortStartScheduler+0x46>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	60fb      	str	r3, [r7, #12]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f56:	4b39      	ldr	r3, [pc, #228]	; (800803c <xPortStartScheduler+0x12c>)
 8007f58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	22ff      	movs	r2, #255	; 0xff
 8007f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	4b31      	ldr	r3, [pc, #196]	; (8008040 <xPortStartScheduler+0x130>)
 8007f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f7e:	4b31      	ldr	r3, [pc, #196]	; (8008044 <xPortStartScheduler+0x134>)
 8007f80:	2207      	movs	r2, #7
 8007f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f84:	e009      	b.n	8007f9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f86:	4b2f      	ldr	r3, [pc, #188]	; (8008044 <xPortStartScheduler+0x134>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	4a2d      	ldr	r2, [pc, #180]	; (8008044 <xPortStartScheduler+0x134>)
 8007f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa2:	2b80      	cmp	r3, #128	; 0x80
 8007fa4:	d0ef      	beq.n	8007f86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fa6:	4b27      	ldr	r3, [pc, #156]	; (8008044 <xPortStartScheduler+0x134>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f1c3 0307 	rsb	r3, r3, #7
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d00a      	beq.n	8007fc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	60bb      	str	r3, [r7, #8]
}
 8007fc4:	bf00      	nop
 8007fc6:	e7fe      	b.n	8007fc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fc8:	4b1e      	ldr	r3, [pc, #120]	; (8008044 <xPortStartScheduler+0x134>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	021b      	lsls	r3, r3, #8
 8007fce:	4a1d      	ldr	r2, [pc, #116]	; (8008044 <xPortStartScheduler+0x134>)
 8007fd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fd2:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <xPortStartScheduler+0x134>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fda:	4a1a      	ldr	r2, [pc, #104]	; (8008044 <xPortStartScheduler+0x134>)
 8007fdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fe6:	4b18      	ldr	r3, [pc, #96]	; (8008048 <xPortStartScheduler+0x138>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a17      	ldr	r2, [pc, #92]	; (8008048 <xPortStartScheduler+0x138>)
 8007fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ff2:	4b15      	ldr	r3, [pc, #84]	; (8008048 <xPortStartScheduler+0x138>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a14      	ldr	r2, [pc, #80]	; (8008048 <xPortStartScheduler+0x138>)
 8007ff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ffe:	f000 f8dd 	bl	80081bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008002:	4b12      	ldr	r3, [pc, #72]	; (800804c <xPortStartScheduler+0x13c>)
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008008:	f000 f8fc 	bl	8008204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800800c:	4b10      	ldr	r3, [pc, #64]	; (8008050 <xPortStartScheduler+0x140>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a0f      	ldr	r2, [pc, #60]	; (8008050 <xPortStartScheduler+0x140>)
 8008012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008018:	f7ff ff66 	bl	8007ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800801c:	f7ff fa4c 	bl	80074b8 <vTaskSwitchContext>
	prvTaskExitError();
 8008020:	f7ff ff20 	bl	8007e64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	e000ed00 	.word	0xe000ed00
 8008034:	410fc271 	.word	0x410fc271
 8008038:	410fc270 	.word	0x410fc270
 800803c:	e000e400 	.word	0xe000e400
 8008040:	20000954 	.word	0x20000954
 8008044:	20000958 	.word	0x20000958
 8008048:	e000ed20 	.word	0xe000ed20
 800804c:	20000010 	.word	0x20000010
 8008050:	e000ef34 	.word	0xe000ef34

08008054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	607b      	str	r3, [r7, #4]
}
 800806c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800806e:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <vPortEnterCritical+0x58>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3301      	adds	r3, #1
 8008074:	4a0d      	ldr	r2, [pc, #52]	; (80080ac <vPortEnterCritical+0x58>)
 8008076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008078:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <vPortEnterCritical+0x58>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d10f      	bne.n	80080a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008080:	4b0b      	ldr	r3, [pc, #44]	; (80080b0 <vPortEnterCritical+0x5c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	603b      	str	r3, [r7, #0]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <vPortEnterCritical+0x4a>
	}
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20000010 	.word	0x20000010
 80080b0:	e000ed04 	.word	0xe000ed04

080080b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080ba:	4b12      	ldr	r3, [pc, #72]	; (8008104 <vPortExitCritical+0x50>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <vPortExitCritical+0x24>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	607b      	str	r3, [r7, #4]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080d8:	4b0a      	ldr	r3, [pc, #40]	; (8008104 <vPortExitCritical+0x50>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3b01      	subs	r3, #1
 80080de:	4a09      	ldr	r2, [pc, #36]	; (8008104 <vPortExitCritical+0x50>)
 80080e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080e2:	4b08      	ldr	r3, [pc, #32]	; (8008104 <vPortExitCritical+0x50>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d105      	bne.n	80080f6 <vPortExitCritical+0x42>
 80080ea:	2300      	movs	r3, #0
 80080ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	f383 8811 	msr	BASEPRI, r3
}
 80080f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	20000010 	.word	0x20000010
	...

08008110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008110:	f3ef 8009 	mrs	r0, PSP
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	4b15      	ldr	r3, [pc, #84]	; (8008170 <pxCurrentTCBConst>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	f01e 0f10 	tst.w	lr, #16
 8008120:	bf08      	it	eq
 8008122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812a:	6010      	str	r0, [r2, #0]
 800812c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008134:	f380 8811 	msr	BASEPRI, r0
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f7ff f9ba 	bl	80074b8 <vTaskSwitchContext>
 8008144:	f04f 0000 	mov.w	r0, #0
 8008148:	f380 8811 	msr	BASEPRI, r0
 800814c:	bc09      	pop	{r0, r3}
 800814e:	6819      	ldr	r1, [r3, #0]
 8008150:	6808      	ldr	r0, [r1, #0]
 8008152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008156:	f01e 0f10 	tst.w	lr, #16
 800815a:	bf08      	it	eq
 800815c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008160:	f380 8809 	msr	PSP, r0
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	f3af 8000 	nop.w

08008170 <pxCurrentTCBConst>:
 8008170:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop

08008178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	607b      	str	r3, [r7, #4]
}
 8008190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008192:	f7ff f8d9 	bl	8007348 <xTaskIncrementTick>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800819c:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <SysTick_Handler+0x40>)
 800819e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	2300      	movs	r3, #0
 80081a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	f383 8811 	msr	BASEPRI, r3
}
 80081ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081c0:	4b0b      	ldr	r3, [pc, #44]	; (80081f0 <vPortSetupTimerInterrupt+0x34>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081c6:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <vPortSetupTimerInterrupt+0x38>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081cc:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <vPortSetupTimerInterrupt+0x3c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a0a      	ldr	r2, [pc, #40]	; (80081fc <vPortSetupTimerInterrupt+0x40>)
 80081d2:	fba2 2303 	umull	r2, r3, r2, r3
 80081d6:	099b      	lsrs	r3, r3, #6
 80081d8:	4a09      	ldr	r2, [pc, #36]	; (8008200 <vPortSetupTimerInterrupt+0x44>)
 80081da:	3b01      	subs	r3, #1
 80081dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081de:	4b04      	ldr	r3, [pc, #16]	; (80081f0 <vPortSetupTimerInterrupt+0x34>)
 80081e0:	2207      	movs	r2, #7
 80081e2:	601a      	str	r2, [r3, #0]
}
 80081e4:	bf00      	nop
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	e000e010 	.word	0xe000e010
 80081f4:	e000e018 	.word	0xe000e018
 80081f8:	20000004 	.word	0x20000004
 80081fc:	10624dd3 	.word	0x10624dd3
 8008200:	e000e014 	.word	0xe000e014

08008204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008214 <vPortEnableVFP+0x10>
 8008208:	6801      	ldr	r1, [r0, #0]
 800820a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800820e:	6001      	str	r1, [r0, #0]
 8008210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008212:	bf00      	nop
 8008214:	e000ed88 	.word	0xe000ed88

08008218 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800821e:	f3ef 8305 	mrs	r3, IPSR
 8008222:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b0f      	cmp	r3, #15
 8008228:	d914      	bls.n	8008254 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800822a:	4a17      	ldr	r2, [pc, #92]	; (8008288 <vPortValidateInterruptPriority+0x70>)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4413      	add	r3, r2
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008234:	4b15      	ldr	r3, [pc, #84]	; (800828c <vPortValidateInterruptPriority+0x74>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	7afa      	ldrb	r2, [r7, #11]
 800823a:	429a      	cmp	r2, r3
 800823c:	d20a      	bcs.n	8008254 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	607b      	str	r3, [r7, #4]
}
 8008250:	bf00      	nop
 8008252:	e7fe      	b.n	8008252 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008254:	4b0e      	ldr	r3, [pc, #56]	; (8008290 <vPortValidateInterruptPriority+0x78>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800825c:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <vPortValidateInterruptPriority+0x7c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	d90a      	bls.n	800827a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	603b      	str	r3, [r7, #0]
}
 8008276:	bf00      	nop
 8008278:	e7fe      	b.n	8008278 <vPortValidateInterruptPriority+0x60>
	}
 800827a:	bf00      	nop
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	e000e3f0 	.word	0xe000e3f0
 800828c:	20000954 	.word	0x20000954
 8008290:	e000ed0c 	.word	0xe000ed0c
 8008294:	20000958 	.word	0x20000958

08008298 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	; 0x28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082a4:	f7fe ffa6 	bl	80071f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082a8:	4b5d      	ldr	r3, [pc, #372]	; (8008420 <pvPortMalloc+0x188>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082b0:	f000 f924 	bl	80084fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082b4:	4b5b      	ldr	r3, [pc, #364]	; (8008424 <pvPortMalloc+0x18c>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4013      	ands	r3, r2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f040 8093 	bne.w	80083e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01d      	beq.n	8008304 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80082c8:	2208      	movs	r2, #8
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d014      	beq.n	8008304 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f023 0307 	bic.w	r3, r3, #7
 80082e0:	3308      	adds	r3, #8
 80082e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <pvPortMalloc+0x6c>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	617b      	str	r3, [r7, #20]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d06e      	beq.n	80083e8 <pvPortMalloc+0x150>
 800830a:	4b47      	ldr	r3, [pc, #284]	; (8008428 <pvPortMalloc+0x190>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	429a      	cmp	r2, r3
 8008312:	d869      	bhi.n	80083e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008314:	4b45      	ldr	r3, [pc, #276]	; (800842c <pvPortMalloc+0x194>)
 8008316:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008318:	4b44      	ldr	r3, [pc, #272]	; (800842c <pvPortMalloc+0x194>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800831e:	e004      	b.n	800832a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	429a      	cmp	r2, r3
 8008332:	d903      	bls.n	800833c <pvPortMalloc+0xa4>
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1f1      	bne.n	8008320 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800833c:	4b38      	ldr	r3, [pc, #224]	; (8008420 <pvPortMalloc+0x188>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008342:	429a      	cmp	r2, r3
 8008344:	d050      	beq.n	80083e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2208      	movs	r2, #8
 800834c:	4413      	add	r3, r2
 800834e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	1ad2      	subs	r2, r2, r3
 8008360:	2308      	movs	r3, #8
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	429a      	cmp	r2, r3
 8008366:	d91f      	bls.n	80083a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4413      	add	r3, r2
 800836e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	f003 0307 	and.w	r3, r3, #7
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <pvPortMalloc+0xf8>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	613b      	str	r3, [r7, #16]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	1ad2      	subs	r2, r2, r3
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083a2:	69b8      	ldr	r0, [r7, #24]
 80083a4:	f000 f90c 	bl	80085c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083a8:	4b1f      	ldr	r3, [pc, #124]	; (8008428 <pvPortMalloc+0x190>)
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	4a1d      	ldr	r2, [pc, #116]	; (8008428 <pvPortMalloc+0x190>)
 80083b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083b6:	4b1c      	ldr	r3, [pc, #112]	; (8008428 <pvPortMalloc+0x190>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	4b1d      	ldr	r3, [pc, #116]	; (8008430 <pvPortMalloc+0x198>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d203      	bcs.n	80083ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083c2:	4b19      	ldr	r3, [pc, #100]	; (8008428 <pvPortMalloc+0x190>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a1a      	ldr	r2, [pc, #104]	; (8008430 <pvPortMalloc+0x198>)
 80083c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	4b15      	ldr	r3, [pc, #84]	; (8008424 <pvPortMalloc+0x18c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	431a      	orrs	r2, r3
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	2200      	movs	r2, #0
 80083dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083de:	4b15      	ldr	r3, [pc, #84]	; (8008434 <pvPortMalloc+0x19c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3301      	adds	r3, #1
 80083e4:	4a13      	ldr	r2, [pc, #76]	; (8008434 <pvPortMalloc+0x19c>)
 80083e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083e8:	f7fe ff12 	bl	8007210 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80083f2:	f7f8 fe3d 	bl	8001070 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <pvPortMalloc+0x17e>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	60fb      	str	r3, [r7, #12]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <pvPortMalloc+0x17c>
	return pvReturn;
 8008416:	69fb      	ldr	r3, [r7, #28]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3728      	adds	r7, #40	; 0x28
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20008964 	.word	0x20008964
 8008424:	20008978 	.word	0x20008978
 8008428:	20008968 	.word	0x20008968
 800842c:	2000895c 	.word	0x2000895c
 8008430:	2000896c 	.word	0x2000896c
 8008434:	20008970 	.word	0x20008970

08008438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d04d      	beq.n	80084e6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800844a:	2308      	movs	r3, #8
 800844c:	425b      	negs	r3, r3
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	4413      	add	r3, r2
 8008452:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	4b24      	ldr	r3, [pc, #144]	; (80084f0 <vPortFree+0xb8>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4013      	ands	r3, r2
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10a      	bne.n	800847c <vPortFree+0x44>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	60fb      	str	r3, [r7, #12]
}
 8008478:	bf00      	nop
 800847a:	e7fe      	b.n	800847a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00a      	beq.n	800849a <vPortFree+0x62>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	60bb      	str	r3, [r7, #8]
}
 8008496:	bf00      	nop
 8008498:	e7fe      	b.n	8008498 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	4b14      	ldr	r3, [pc, #80]	; (80084f0 <vPortFree+0xb8>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4013      	ands	r3, r2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d01e      	beq.n	80084e6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d11a      	bne.n	80084e6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	4b0e      	ldr	r3, [pc, #56]	; (80084f0 <vPortFree+0xb8>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	43db      	mvns	r3, r3
 80084ba:	401a      	ands	r2, r3
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084c0:	f7fe fe98 	bl	80071f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <vPortFree+0xbc>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4413      	add	r3, r2
 80084ce:	4a09      	ldr	r2, [pc, #36]	; (80084f4 <vPortFree+0xbc>)
 80084d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084d2:	6938      	ldr	r0, [r7, #16]
 80084d4:	f000 f874 	bl	80085c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084d8:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <vPortFree+0xc0>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3301      	adds	r3, #1
 80084de:	4a06      	ldr	r2, [pc, #24]	; (80084f8 <vPortFree+0xc0>)
 80084e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084e2:	f7fe fe95 	bl	8007210 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084e6:	bf00      	nop
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20008978 	.word	0x20008978
 80084f4:	20008968 	.word	0x20008968
 80084f8:	20008974 	.word	0x20008974

080084fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008506:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008508:	4b27      	ldr	r3, [pc, #156]	; (80085a8 <prvHeapInit+0xac>)
 800850a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00c      	beq.n	8008530 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	3307      	adds	r3, #7
 800851a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0307 	bic.w	r3, r3, #7
 8008522:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	4a1f      	ldr	r2, [pc, #124]	; (80085a8 <prvHeapInit+0xac>)
 800852c:	4413      	add	r3, r2
 800852e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008534:	4a1d      	ldr	r2, [pc, #116]	; (80085ac <prvHeapInit+0xb0>)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800853a:	4b1c      	ldr	r3, [pc, #112]	; (80085ac <prvHeapInit+0xb0>)
 800853c:	2200      	movs	r2, #0
 800853e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	4413      	add	r3, r2
 8008546:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008548:	2208      	movs	r2, #8
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	1a9b      	subs	r3, r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f023 0307 	bic.w	r3, r3, #7
 8008556:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4a15      	ldr	r2, [pc, #84]	; (80085b0 <prvHeapInit+0xb4>)
 800855c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800855e:	4b14      	ldr	r3, [pc, #80]	; (80085b0 <prvHeapInit+0xb4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2200      	movs	r2, #0
 8008564:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008566:	4b12      	ldr	r3, [pc, #72]	; (80085b0 <prvHeapInit+0xb4>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2200      	movs	r2, #0
 800856c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	1ad2      	subs	r2, r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800857c:	4b0c      	ldr	r3, [pc, #48]	; (80085b0 <prvHeapInit+0xb4>)
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	4a0a      	ldr	r2, [pc, #40]	; (80085b4 <prvHeapInit+0xb8>)
 800858a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	4a09      	ldr	r2, [pc, #36]	; (80085b8 <prvHeapInit+0xbc>)
 8008592:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008594:	4b09      	ldr	r3, [pc, #36]	; (80085bc <prvHeapInit+0xc0>)
 8008596:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800859a:	601a      	str	r2, [r3, #0]
}
 800859c:	bf00      	nop
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	2000095c 	.word	0x2000095c
 80085ac:	2000895c 	.word	0x2000895c
 80085b0:	20008964 	.word	0x20008964
 80085b4:	2000896c 	.word	0x2000896c
 80085b8:	20008968 	.word	0x20008968
 80085bc:	20008978 	.word	0x20008978

080085c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085c8:	4b28      	ldr	r3, [pc, #160]	; (800866c <prvInsertBlockIntoFreeList+0xac>)
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	e002      	b.n	80085d4 <prvInsertBlockIntoFreeList+0x14>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d8f7      	bhi.n	80085ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	4413      	add	r3, r2
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d108      	bne.n	8008602 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	441a      	add	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	441a      	add	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	429a      	cmp	r2, r3
 8008614:	d118      	bne.n	8008648 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	4b15      	ldr	r3, [pc, #84]	; (8008670 <prvInsertBlockIntoFreeList+0xb0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d00d      	beq.n	800863e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	441a      	add	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	e008      	b.n	8008650 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800863e:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <prvInsertBlockIntoFreeList+0xb0>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	e003      	b.n	8008650 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	429a      	cmp	r2, r3
 8008656:	d002      	beq.n	800865e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800865e:	bf00      	nop
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	2000895c 	.word	0x2000895c
 8008670:	20008964 	.word	0x20008964

08008674 <__errno>:
 8008674:	4b01      	ldr	r3, [pc, #4]	; (800867c <__errno+0x8>)
 8008676:	6818      	ldr	r0, [r3, #0]
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	20000014 	.word	0x20000014

08008680 <__libc_init_array>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	4d0d      	ldr	r5, [pc, #52]	; (80086b8 <__libc_init_array+0x38>)
 8008684:	4c0d      	ldr	r4, [pc, #52]	; (80086bc <__libc_init_array+0x3c>)
 8008686:	1b64      	subs	r4, r4, r5
 8008688:	10a4      	asrs	r4, r4, #2
 800868a:	2600      	movs	r6, #0
 800868c:	42a6      	cmp	r6, r4
 800868e:	d109      	bne.n	80086a4 <__libc_init_array+0x24>
 8008690:	4d0b      	ldr	r5, [pc, #44]	; (80086c0 <__libc_init_array+0x40>)
 8008692:	4c0c      	ldr	r4, [pc, #48]	; (80086c4 <__libc_init_array+0x44>)
 8008694:	f006 fb92 	bl	800edbc <_init>
 8008698:	1b64      	subs	r4, r4, r5
 800869a:	10a4      	asrs	r4, r4, #2
 800869c:	2600      	movs	r6, #0
 800869e:	42a6      	cmp	r6, r4
 80086a0:	d105      	bne.n	80086ae <__libc_init_array+0x2e>
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
 80086a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a8:	4798      	blx	r3
 80086aa:	3601      	adds	r6, #1
 80086ac:	e7ee      	b.n	800868c <__libc_init_array+0xc>
 80086ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b2:	4798      	blx	r3
 80086b4:	3601      	adds	r6, #1
 80086b6:	e7f2      	b.n	800869e <__libc_init_array+0x1e>
 80086b8:	0800f5f0 	.word	0x0800f5f0
 80086bc:	0800f5f0 	.word	0x0800f5f0
 80086c0:	0800f5f0 	.word	0x0800f5f0
 80086c4:	0800f5f4 	.word	0x0800f5f4

080086c8 <memcpy>:
 80086c8:	440a      	add	r2, r1
 80086ca:	4291      	cmp	r1, r2
 80086cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80086d0:	d100      	bne.n	80086d4 <memcpy+0xc>
 80086d2:	4770      	bx	lr
 80086d4:	b510      	push	{r4, lr}
 80086d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086de:	4291      	cmp	r1, r2
 80086e0:	d1f9      	bne.n	80086d6 <memcpy+0xe>
 80086e2:	bd10      	pop	{r4, pc}

080086e4 <memset>:
 80086e4:	4402      	add	r2, r0
 80086e6:	4603      	mov	r3, r0
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d100      	bne.n	80086ee <memset+0xa>
 80086ec:	4770      	bx	lr
 80086ee:	f803 1b01 	strb.w	r1, [r3], #1
 80086f2:	e7f9      	b.n	80086e8 <memset+0x4>

080086f4 <__cvt>:
 80086f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086f8:	ec55 4b10 	vmov	r4, r5, d0
 80086fc:	2d00      	cmp	r5, #0
 80086fe:	460e      	mov	r6, r1
 8008700:	4619      	mov	r1, r3
 8008702:	462b      	mov	r3, r5
 8008704:	bfbb      	ittet	lt
 8008706:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800870a:	461d      	movlt	r5, r3
 800870c:	2300      	movge	r3, #0
 800870e:	232d      	movlt	r3, #45	; 0x2d
 8008710:	700b      	strb	r3, [r1, #0]
 8008712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008714:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008718:	4691      	mov	r9, r2
 800871a:	f023 0820 	bic.w	r8, r3, #32
 800871e:	bfbc      	itt	lt
 8008720:	4622      	movlt	r2, r4
 8008722:	4614      	movlt	r4, r2
 8008724:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008728:	d005      	beq.n	8008736 <__cvt+0x42>
 800872a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800872e:	d100      	bne.n	8008732 <__cvt+0x3e>
 8008730:	3601      	adds	r6, #1
 8008732:	2102      	movs	r1, #2
 8008734:	e000      	b.n	8008738 <__cvt+0x44>
 8008736:	2103      	movs	r1, #3
 8008738:	ab03      	add	r3, sp, #12
 800873a:	9301      	str	r3, [sp, #4]
 800873c:	ab02      	add	r3, sp, #8
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	ec45 4b10 	vmov	d0, r4, r5
 8008744:	4653      	mov	r3, sl
 8008746:	4632      	mov	r2, r6
 8008748:	f001 fe42 	bl	800a3d0 <_dtoa_r>
 800874c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008750:	4607      	mov	r7, r0
 8008752:	d102      	bne.n	800875a <__cvt+0x66>
 8008754:	f019 0f01 	tst.w	r9, #1
 8008758:	d022      	beq.n	80087a0 <__cvt+0xac>
 800875a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800875e:	eb07 0906 	add.w	r9, r7, r6
 8008762:	d110      	bne.n	8008786 <__cvt+0x92>
 8008764:	783b      	ldrb	r3, [r7, #0]
 8008766:	2b30      	cmp	r3, #48	; 0x30
 8008768:	d10a      	bne.n	8008780 <__cvt+0x8c>
 800876a:	2200      	movs	r2, #0
 800876c:	2300      	movs	r3, #0
 800876e:	4620      	mov	r0, r4
 8008770:	4629      	mov	r1, r5
 8008772:	f7f8 f9b9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008776:	b918      	cbnz	r0, 8008780 <__cvt+0x8c>
 8008778:	f1c6 0601 	rsb	r6, r6, #1
 800877c:	f8ca 6000 	str.w	r6, [sl]
 8008780:	f8da 3000 	ldr.w	r3, [sl]
 8008784:	4499      	add	r9, r3
 8008786:	2200      	movs	r2, #0
 8008788:	2300      	movs	r3, #0
 800878a:	4620      	mov	r0, r4
 800878c:	4629      	mov	r1, r5
 800878e:	f7f8 f9ab 	bl	8000ae8 <__aeabi_dcmpeq>
 8008792:	b108      	cbz	r0, 8008798 <__cvt+0xa4>
 8008794:	f8cd 900c 	str.w	r9, [sp, #12]
 8008798:	2230      	movs	r2, #48	; 0x30
 800879a:	9b03      	ldr	r3, [sp, #12]
 800879c:	454b      	cmp	r3, r9
 800879e:	d307      	bcc.n	80087b0 <__cvt+0xbc>
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087a4:	1bdb      	subs	r3, r3, r7
 80087a6:	4638      	mov	r0, r7
 80087a8:	6013      	str	r3, [r2, #0]
 80087aa:	b004      	add	sp, #16
 80087ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b0:	1c59      	adds	r1, r3, #1
 80087b2:	9103      	str	r1, [sp, #12]
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	e7f0      	b.n	800879a <__cvt+0xa6>

080087b8 <__exponent>:
 80087b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ba:	4603      	mov	r3, r0
 80087bc:	2900      	cmp	r1, #0
 80087be:	bfb8      	it	lt
 80087c0:	4249      	neglt	r1, r1
 80087c2:	f803 2b02 	strb.w	r2, [r3], #2
 80087c6:	bfb4      	ite	lt
 80087c8:	222d      	movlt	r2, #45	; 0x2d
 80087ca:	222b      	movge	r2, #43	; 0x2b
 80087cc:	2909      	cmp	r1, #9
 80087ce:	7042      	strb	r2, [r0, #1]
 80087d0:	dd2a      	ble.n	8008828 <__exponent+0x70>
 80087d2:	f10d 0407 	add.w	r4, sp, #7
 80087d6:	46a4      	mov	ip, r4
 80087d8:	270a      	movs	r7, #10
 80087da:	46a6      	mov	lr, r4
 80087dc:	460a      	mov	r2, r1
 80087de:	fb91 f6f7 	sdiv	r6, r1, r7
 80087e2:	fb07 1516 	mls	r5, r7, r6, r1
 80087e6:	3530      	adds	r5, #48	; 0x30
 80087e8:	2a63      	cmp	r2, #99	; 0x63
 80087ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80087ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80087f2:	4631      	mov	r1, r6
 80087f4:	dcf1      	bgt.n	80087da <__exponent+0x22>
 80087f6:	3130      	adds	r1, #48	; 0x30
 80087f8:	f1ae 0502 	sub.w	r5, lr, #2
 80087fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008800:	1c44      	adds	r4, r0, #1
 8008802:	4629      	mov	r1, r5
 8008804:	4561      	cmp	r1, ip
 8008806:	d30a      	bcc.n	800881e <__exponent+0x66>
 8008808:	f10d 0209 	add.w	r2, sp, #9
 800880c:	eba2 020e 	sub.w	r2, r2, lr
 8008810:	4565      	cmp	r5, ip
 8008812:	bf88      	it	hi
 8008814:	2200      	movhi	r2, #0
 8008816:	4413      	add	r3, r2
 8008818:	1a18      	subs	r0, r3, r0
 800881a:	b003      	add	sp, #12
 800881c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800881e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008822:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008826:	e7ed      	b.n	8008804 <__exponent+0x4c>
 8008828:	2330      	movs	r3, #48	; 0x30
 800882a:	3130      	adds	r1, #48	; 0x30
 800882c:	7083      	strb	r3, [r0, #2]
 800882e:	70c1      	strb	r1, [r0, #3]
 8008830:	1d03      	adds	r3, r0, #4
 8008832:	e7f1      	b.n	8008818 <__exponent+0x60>

08008834 <_printf_float>:
 8008834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008838:	ed2d 8b02 	vpush	{d8}
 800883c:	b08d      	sub	sp, #52	; 0x34
 800883e:	460c      	mov	r4, r1
 8008840:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008844:	4616      	mov	r6, r2
 8008846:	461f      	mov	r7, r3
 8008848:	4605      	mov	r5, r0
 800884a:	f002 ff1f 	bl	800b68c <_localeconv_r>
 800884e:	f8d0 a000 	ldr.w	sl, [r0]
 8008852:	4650      	mov	r0, sl
 8008854:	f7f7 fccc 	bl	80001f0 <strlen>
 8008858:	2300      	movs	r3, #0
 800885a:	930a      	str	r3, [sp, #40]	; 0x28
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	9305      	str	r3, [sp, #20]
 8008860:	f8d8 3000 	ldr.w	r3, [r8]
 8008864:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008868:	3307      	adds	r3, #7
 800886a:	f023 0307 	bic.w	r3, r3, #7
 800886e:	f103 0208 	add.w	r2, r3, #8
 8008872:	f8c8 2000 	str.w	r2, [r8]
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800887e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008882:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008886:	9307      	str	r3, [sp, #28]
 8008888:	f8cd 8018 	str.w	r8, [sp, #24]
 800888c:	ee08 0a10 	vmov	s16, r0
 8008890:	4b9f      	ldr	r3, [pc, #636]	; (8008b10 <_printf_float+0x2dc>)
 8008892:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008896:	f04f 32ff 	mov.w	r2, #4294967295
 800889a:	f7f8 f957 	bl	8000b4c <__aeabi_dcmpun>
 800889e:	bb88      	cbnz	r0, 8008904 <_printf_float+0xd0>
 80088a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088a4:	4b9a      	ldr	r3, [pc, #616]	; (8008b10 <_printf_float+0x2dc>)
 80088a6:	f04f 32ff 	mov.w	r2, #4294967295
 80088aa:	f7f8 f931 	bl	8000b10 <__aeabi_dcmple>
 80088ae:	bb48      	cbnz	r0, 8008904 <_printf_float+0xd0>
 80088b0:	2200      	movs	r2, #0
 80088b2:	2300      	movs	r3, #0
 80088b4:	4640      	mov	r0, r8
 80088b6:	4649      	mov	r1, r9
 80088b8:	f7f8 f920 	bl	8000afc <__aeabi_dcmplt>
 80088bc:	b110      	cbz	r0, 80088c4 <_printf_float+0x90>
 80088be:	232d      	movs	r3, #45	; 0x2d
 80088c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088c4:	4b93      	ldr	r3, [pc, #588]	; (8008b14 <_printf_float+0x2e0>)
 80088c6:	4894      	ldr	r0, [pc, #592]	; (8008b18 <_printf_float+0x2e4>)
 80088c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80088cc:	bf94      	ite	ls
 80088ce:	4698      	movls	r8, r3
 80088d0:	4680      	movhi	r8, r0
 80088d2:	2303      	movs	r3, #3
 80088d4:	6123      	str	r3, [r4, #16]
 80088d6:	9b05      	ldr	r3, [sp, #20]
 80088d8:	f023 0204 	bic.w	r2, r3, #4
 80088dc:	6022      	str	r2, [r4, #0]
 80088de:	f04f 0900 	mov.w	r9, #0
 80088e2:	9700      	str	r7, [sp, #0]
 80088e4:	4633      	mov	r3, r6
 80088e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80088e8:	4621      	mov	r1, r4
 80088ea:	4628      	mov	r0, r5
 80088ec:	f000 f9d8 	bl	8008ca0 <_printf_common>
 80088f0:	3001      	adds	r0, #1
 80088f2:	f040 8090 	bne.w	8008a16 <_printf_float+0x1e2>
 80088f6:	f04f 30ff 	mov.w	r0, #4294967295
 80088fa:	b00d      	add	sp, #52	; 0x34
 80088fc:	ecbd 8b02 	vpop	{d8}
 8008900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008904:	4642      	mov	r2, r8
 8008906:	464b      	mov	r3, r9
 8008908:	4640      	mov	r0, r8
 800890a:	4649      	mov	r1, r9
 800890c:	f7f8 f91e 	bl	8000b4c <__aeabi_dcmpun>
 8008910:	b140      	cbz	r0, 8008924 <_printf_float+0xf0>
 8008912:	464b      	mov	r3, r9
 8008914:	2b00      	cmp	r3, #0
 8008916:	bfbc      	itt	lt
 8008918:	232d      	movlt	r3, #45	; 0x2d
 800891a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800891e:	487f      	ldr	r0, [pc, #508]	; (8008b1c <_printf_float+0x2e8>)
 8008920:	4b7f      	ldr	r3, [pc, #508]	; (8008b20 <_printf_float+0x2ec>)
 8008922:	e7d1      	b.n	80088c8 <_printf_float+0x94>
 8008924:	6863      	ldr	r3, [r4, #4]
 8008926:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800892a:	9206      	str	r2, [sp, #24]
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	d13f      	bne.n	80089b0 <_printf_float+0x17c>
 8008930:	2306      	movs	r3, #6
 8008932:	6063      	str	r3, [r4, #4]
 8008934:	9b05      	ldr	r3, [sp, #20]
 8008936:	6861      	ldr	r1, [r4, #4]
 8008938:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800893c:	2300      	movs	r3, #0
 800893e:	9303      	str	r3, [sp, #12]
 8008940:	ab0a      	add	r3, sp, #40	; 0x28
 8008942:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008946:	ab09      	add	r3, sp, #36	; 0x24
 8008948:	ec49 8b10 	vmov	d0, r8, r9
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	6022      	str	r2, [r4, #0]
 8008950:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008954:	4628      	mov	r0, r5
 8008956:	f7ff fecd 	bl	80086f4 <__cvt>
 800895a:	9b06      	ldr	r3, [sp, #24]
 800895c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800895e:	2b47      	cmp	r3, #71	; 0x47
 8008960:	4680      	mov	r8, r0
 8008962:	d108      	bne.n	8008976 <_printf_float+0x142>
 8008964:	1cc8      	adds	r0, r1, #3
 8008966:	db02      	blt.n	800896e <_printf_float+0x13a>
 8008968:	6863      	ldr	r3, [r4, #4]
 800896a:	4299      	cmp	r1, r3
 800896c:	dd41      	ble.n	80089f2 <_printf_float+0x1be>
 800896e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008972:	fa5f fb8b 	uxtb.w	fp, fp
 8008976:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800897a:	d820      	bhi.n	80089be <_printf_float+0x18a>
 800897c:	3901      	subs	r1, #1
 800897e:	465a      	mov	r2, fp
 8008980:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008984:	9109      	str	r1, [sp, #36]	; 0x24
 8008986:	f7ff ff17 	bl	80087b8 <__exponent>
 800898a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800898c:	1813      	adds	r3, r2, r0
 800898e:	2a01      	cmp	r2, #1
 8008990:	4681      	mov	r9, r0
 8008992:	6123      	str	r3, [r4, #16]
 8008994:	dc02      	bgt.n	800899c <_printf_float+0x168>
 8008996:	6822      	ldr	r2, [r4, #0]
 8008998:	07d2      	lsls	r2, r2, #31
 800899a:	d501      	bpl.n	80089a0 <_printf_float+0x16c>
 800899c:	3301      	adds	r3, #1
 800899e:	6123      	str	r3, [r4, #16]
 80089a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d09c      	beq.n	80088e2 <_printf_float+0xae>
 80089a8:	232d      	movs	r3, #45	; 0x2d
 80089aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ae:	e798      	b.n	80088e2 <_printf_float+0xae>
 80089b0:	9a06      	ldr	r2, [sp, #24]
 80089b2:	2a47      	cmp	r2, #71	; 0x47
 80089b4:	d1be      	bne.n	8008934 <_printf_float+0x100>
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1bc      	bne.n	8008934 <_printf_float+0x100>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e7b9      	b.n	8008932 <_printf_float+0xfe>
 80089be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80089c2:	d118      	bne.n	80089f6 <_printf_float+0x1c2>
 80089c4:	2900      	cmp	r1, #0
 80089c6:	6863      	ldr	r3, [r4, #4]
 80089c8:	dd0b      	ble.n	80089e2 <_printf_float+0x1ae>
 80089ca:	6121      	str	r1, [r4, #16]
 80089cc:	b913      	cbnz	r3, 80089d4 <_printf_float+0x1a0>
 80089ce:	6822      	ldr	r2, [r4, #0]
 80089d0:	07d0      	lsls	r0, r2, #31
 80089d2:	d502      	bpl.n	80089da <_printf_float+0x1a6>
 80089d4:	3301      	adds	r3, #1
 80089d6:	440b      	add	r3, r1
 80089d8:	6123      	str	r3, [r4, #16]
 80089da:	65a1      	str	r1, [r4, #88]	; 0x58
 80089dc:	f04f 0900 	mov.w	r9, #0
 80089e0:	e7de      	b.n	80089a0 <_printf_float+0x16c>
 80089e2:	b913      	cbnz	r3, 80089ea <_printf_float+0x1b6>
 80089e4:	6822      	ldr	r2, [r4, #0]
 80089e6:	07d2      	lsls	r2, r2, #31
 80089e8:	d501      	bpl.n	80089ee <_printf_float+0x1ba>
 80089ea:	3302      	adds	r3, #2
 80089ec:	e7f4      	b.n	80089d8 <_printf_float+0x1a4>
 80089ee:	2301      	movs	r3, #1
 80089f0:	e7f2      	b.n	80089d8 <_printf_float+0x1a4>
 80089f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80089f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f8:	4299      	cmp	r1, r3
 80089fa:	db05      	blt.n	8008a08 <_printf_float+0x1d4>
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	6121      	str	r1, [r4, #16]
 8008a00:	07d8      	lsls	r0, r3, #31
 8008a02:	d5ea      	bpl.n	80089da <_printf_float+0x1a6>
 8008a04:	1c4b      	adds	r3, r1, #1
 8008a06:	e7e7      	b.n	80089d8 <_printf_float+0x1a4>
 8008a08:	2900      	cmp	r1, #0
 8008a0a:	bfd4      	ite	le
 8008a0c:	f1c1 0202 	rsble	r2, r1, #2
 8008a10:	2201      	movgt	r2, #1
 8008a12:	4413      	add	r3, r2
 8008a14:	e7e0      	b.n	80089d8 <_printf_float+0x1a4>
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	055a      	lsls	r2, r3, #21
 8008a1a:	d407      	bmi.n	8008a2c <_printf_float+0x1f8>
 8008a1c:	6923      	ldr	r3, [r4, #16]
 8008a1e:	4642      	mov	r2, r8
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	d12c      	bne.n	8008a84 <_printf_float+0x250>
 8008a2a:	e764      	b.n	80088f6 <_printf_float+0xc2>
 8008a2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a30:	f240 80e0 	bls.w	8008bf4 <_printf_float+0x3c0>
 8008a34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f7f8 f854 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d034      	beq.n	8008aae <_printf_float+0x27a>
 8008a44:	4a37      	ldr	r2, [pc, #220]	; (8008b24 <_printf_float+0x2f0>)
 8008a46:	2301      	movs	r3, #1
 8008a48:	4631      	mov	r1, r6
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	47b8      	blx	r7
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f43f af51 	beq.w	80088f6 <_printf_float+0xc2>
 8008a54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	db02      	blt.n	8008a62 <_printf_float+0x22e>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	07d8      	lsls	r0, r3, #31
 8008a60:	d510      	bpl.n	8008a84 <_printf_float+0x250>
 8008a62:	ee18 3a10 	vmov	r3, s16
 8008a66:	4652      	mov	r2, sl
 8008a68:	4631      	mov	r1, r6
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	47b8      	blx	r7
 8008a6e:	3001      	adds	r0, #1
 8008a70:	f43f af41 	beq.w	80088f6 <_printf_float+0xc2>
 8008a74:	f04f 0800 	mov.w	r8, #0
 8008a78:	f104 091a 	add.w	r9, r4, #26
 8008a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	4543      	cmp	r3, r8
 8008a82:	dc09      	bgt.n	8008a98 <_printf_float+0x264>
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	079b      	lsls	r3, r3, #30
 8008a88:	f100 8105 	bmi.w	8008c96 <_printf_float+0x462>
 8008a8c:	68e0      	ldr	r0, [r4, #12]
 8008a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a90:	4298      	cmp	r0, r3
 8008a92:	bfb8      	it	lt
 8008a94:	4618      	movlt	r0, r3
 8008a96:	e730      	b.n	80088fa <_printf_float+0xc6>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	464a      	mov	r2, r9
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	47b8      	blx	r7
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	f43f af27 	beq.w	80088f6 <_printf_float+0xc2>
 8008aa8:	f108 0801 	add.w	r8, r8, #1
 8008aac:	e7e6      	b.n	8008a7c <_printf_float+0x248>
 8008aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	dc39      	bgt.n	8008b28 <_printf_float+0x2f4>
 8008ab4:	4a1b      	ldr	r2, [pc, #108]	; (8008b24 <_printf_float+0x2f0>)
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4628      	mov	r0, r5
 8008abc:	47b8      	blx	r7
 8008abe:	3001      	adds	r0, #1
 8008ac0:	f43f af19 	beq.w	80088f6 <_printf_float+0xc2>
 8008ac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	d102      	bne.n	8008ad2 <_printf_float+0x29e>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	07d9      	lsls	r1, r3, #31
 8008ad0:	d5d8      	bpl.n	8008a84 <_printf_float+0x250>
 8008ad2:	ee18 3a10 	vmov	r3, s16
 8008ad6:	4652      	mov	r2, sl
 8008ad8:	4631      	mov	r1, r6
 8008ada:	4628      	mov	r0, r5
 8008adc:	47b8      	blx	r7
 8008ade:	3001      	adds	r0, #1
 8008ae0:	f43f af09 	beq.w	80088f6 <_printf_float+0xc2>
 8008ae4:	f04f 0900 	mov.w	r9, #0
 8008ae8:	f104 0a1a 	add.w	sl, r4, #26
 8008aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aee:	425b      	negs	r3, r3
 8008af0:	454b      	cmp	r3, r9
 8008af2:	dc01      	bgt.n	8008af8 <_printf_float+0x2c4>
 8008af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af6:	e792      	b.n	8008a1e <_printf_float+0x1ea>
 8008af8:	2301      	movs	r3, #1
 8008afa:	4652      	mov	r2, sl
 8008afc:	4631      	mov	r1, r6
 8008afe:	4628      	mov	r0, r5
 8008b00:	47b8      	blx	r7
 8008b02:	3001      	adds	r0, #1
 8008b04:	f43f aef7 	beq.w	80088f6 <_printf_float+0xc2>
 8008b08:	f109 0901 	add.w	r9, r9, #1
 8008b0c:	e7ee      	b.n	8008aec <_printf_float+0x2b8>
 8008b0e:	bf00      	nop
 8008b10:	7fefffff 	.word	0x7fefffff
 8008b14:	0800ef18 	.word	0x0800ef18
 8008b18:	0800ef1c 	.word	0x0800ef1c
 8008b1c:	0800ef24 	.word	0x0800ef24
 8008b20:	0800ef20 	.word	0x0800ef20
 8008b24:	0800f319 	.word	0x0800f319
 8008b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	bfa8      	it	ge
 8008b30:	461a      	movge	r2, r3
 8008b32:	2a00      	cmp	r2, #0
 8008b34:	4691      	mov	r9, r2
 8008b36:	dc37      	bgt.n	8008ba8 <_printf_float+0x374>
 8008b38:	f04f 0b00 	mov.w	fp, #0
 8008b3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b40:	f104 021a 	add.w	r2, r4, #26
 8008b44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b46:	9305      	str	r3, [sp, #20]
 8008b48:	eba3 0309 	sub.w	r3, r3, r9
 8008b4c:	455b      	cmp	r3, fp
 8008b4e:	dc33      	bgt.n	8008bb8 <_printf_float+0x384>
 8008b50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b54:	429a      	cmp	r2, r3
 8008b56:	db3b      	blt.n	8008bd0 <_printf_float+0x39c>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	07da      	lsls	r2, r3, #31
 8008b5c:	d438      	bmi.n	8008bd0 <_printf_float+0x39c>
 8008b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b60:	9a05      	ldr	r2, [sp, #20]
 8008b62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b64:	1a9a      	subs	r2, r3, r2
 8008b66:	eba3 0901 	sub.w	r9, r3, r1
 8008b6a:	4591      	cmp	r9, r2
 8008b6c:	bfa8      	it	ge
 8008b6e:	4691      	movge	r9, r2
 8008b70:	f1b9 0f00 	cmp.w	r9, #0
 8008b74:	dc35      	bgt.n	8008be2 <_printf_float+0x3ae>
 8008b76:	f04f 0800 	mov.w	r8, #0
 8008b7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b7e:	f104 0a1a 	add.w	sl, r4, #26
 8008b82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b86:	1a9b      	subs	r3, r3, r2
 8008b88:	eba3 0309 	sub.w	r3, r3, r9
 8008b8c:	4543      	cmp	r3, r8
 8008b8e:	f77f af79 	ble.w	8008a84 <_printf_float+0x250>
 8008b92:	2301      	movs	r3, #1
 8008b94:	4652      	mov	r2, sl
 8008b96:	4631      	mov	r1, r6
 8008b98:	4628      	mov	r0, r5
 8008b9a:	47b8      	blx	r7
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	f43f aeaa 	beq.w	80088f6 <_printf_float+0xc2>
 8008ba2:	f108 0801 	add.w	r8, r8, #1
 8008ba6:	e7ec      	b.n	8008b82 <_printf_float+0x34e>
 8008ba8:	4613      	mov	r3, r2
 8008baa:	4631      	mov	r1, r6
 8008bac:	4642      	mov	r2, r8
 8008bae:	4628      	mov	r0, r5
 8008bb0:	47b8      	blx	r7
 8008bb2:	3001      	adds	r0, #1
 8008bb4:	d1c0      	bne.n	8008b38 <_printf_float+0x304>
 8008bb6:	e69e      	b.n	80088f6 <_printf_float+0xc2>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	9205      	str	r2, [sp, #20]
 8008bc0:	47b8      	blx	r7
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	f43f ae97 	beq.w	80088f6 <_printf_float+0xc2>
 8008bc8:	9a05      	ldr	r2, [sp, #20]
 8008bca:	f10b 0b01 	add.w	fp, fp, #1
 8008bce:	e7b9      	b.n	8008b44 <_printf_float+0x310>
 8008bd0:	ee18 3a10 	vmov	r3, s16
 8008bd4:	4652      	mov	r2, sl
 8008bd6:	4631      	mov	r1, r6
 8008bd8:	4628      	mov	r0, r5
 8008bda:	47b8      	blx	r7
 8008bdc:	3001      	adds	r0, #1
 8008bde:	d1be      	bne.n	8008b5e <_printf_float+0x32a>
 8008be0:	e689      	b.n	80088f6 <_printf_float+0xc2>
 8008be2:	9a05      	ldr	r2, [sp, #20]
 8008be4:	464b      	mov	r3, r9
 8008be6:	4442      	add	r2, r8
 8008be8:	4631      	mov	r1, r6
 8008bea:	4628      	mov	r0, r5
 8008bec:	47b8      	blx	r7
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d1c1      	bne.n	8008b76 <_printf_float+0x342>
 8008bf2:	e680      	b.n	80088f6 <_printf_float+0xc2>
 8008bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bf6:	2a01      	cmp	r2, #1
 8008bf8:	dc01      	bgt.n	8008bfe <_printf_float+0x3ca>
 8008bfa:	07db      	lsls	r3, r3, #31
 8008bfc:	d538      	bpl.n	8008c70 <_printf_float+0x43c>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	4642      	mov	r2, r8
 8008c02:	4631      	mov	r1, r6
 8008c04:	4628      	mov	r0, r5
 8008c06:	47b8      	blx	r7
 8008c08:	3001      	adds	r0, #1
 8008c0a:	f43f ae74 	beq.w	80088f6 <_printf_float+0xc2>
 8008c0e:	ee18 3a10 	vmov	r3, s16
 8008c12:	4652      	mov	r2, sl
 8008c14:	4631      	mov	r1, r6
 8008c16:	4628      	mov	r0, r5
 8008c18:	47b8      	blx	r7
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	f43f ae6b 	beq.w	80088f6 <_printf_float+0xc2>
 8008c20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c24:	2200      	movs	r2, #0
 8008c26:	2300      	movs	r3, #0
 8008c28:	f7f7 ff5e 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c2c:	b9d8      	cbnz	r0, 8008c66 <_printf_float+0x432>
 8008c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c30:	f108 0201 	add.w	r2, r8, #1
 8008c34:	3b01      	subs	r3, #1
 8008c36:	4631      	mov	r1, r6
 8008c38:	4628      	mov	r0, r5
 8008c3a:	47b8      	blx	r7
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d10e      	bne.n	8008c5e <_printf_float+0x42a>
 8008c40:	e659      	b.n	80088f6 <_printf_float+0xc2>
 8008c42:	2301      	movs	r3, #1
 8008c44:	4652      	mov	r2, sl
 8008c46:	4631      	mov	r1, r6
 8008c48:	4628      	mov	r0, r5
 8008c4a:	47b8      	blx	r7
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	f43f ae52 	beq.w	80088f6 <_printf_float+0xc2>
 8008c52:	f108 0801 	add.w	r8, r8, #1
 8008c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	4543      	cmp	r3, r8
 8008c5c:	dcf1      	bgt.n	8008c42 <_printf_float+0x40e>
 8008c5e:	464b      	mov	r3, r9
 8008c60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c64:	e6dc      	b.n	8008a20 <_printf_float+0x1ec>
 8008c66:	f04f 0800 	mov.w	r8, #0
 8008c6a:	f104 0a1a 	add.w	sl, r4, #26
 8008c6e:	e7f2      	b.n	8008c56 <_printf_float+0x422>
 8008c70:	2301      	movs	r3, #1
 8008c72:	4642      	mov	r2, r8
 8008c74:	e7df      	b.n	8008c36 <_printf_float+0x402>
 8008c76:	2301      	movs	r3, #1
 8008c78:	464a      	mov	r2, r9
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	47b8      	blx	r7
 8008c80:	3001      	adds	r0, #1
 8008c82:	f43f ae38 	beq.w	80088f6 <_printf_float+0xc2>
 8008c86:	f108 0801 	add.w	r8, r8, #1
 8008c8a:	68e3      	ldr	r3, [r4, #12]
 8008c8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c8e:	1a5b      	subs	r3, r3, r1
 8008c90:	4543      	cmp	r3, r8
 8008c92:	dcf0      	bgt.n	8008c76 <_printf_float+0x442>
 8008c94:	e6fa      	b.n	8008a8c <_printf_float+0x258>
 8008c96:	f04f 0800 	mov.w	r8, #0
 8008c9a:	f104 0919 	add.w	r9, r4, #25
 8008c9e:	e7f4      	b.n	8008c8a <_printf_float+0x456>

08008ca0 <_printf_common>:
 8008ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca4:	4616      	mov	r6, r2
 8008ca6:	4699      	mov	r9, r3
 8008ca8:	688a      	ldr	r2, [r1, #8]
 8008caa:	690b      	ldr	r3, [r1, #16]
 8008cac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	bfb8      	it	lt
 8008cb4:	4613      	movlt	r3, r2
 8008cb6:	6033      	str	r3, [r6, #0]
 8008cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	b10a      	cbz	r2, 8008cc6 <_printf_common+0x26>
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	6033      	str	r3, [r6, #0]
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	0699      	lsls	r1, r3, #26
 8008cca:	bf42      	ittt	mi
 8008ccc:	6833      	ldrmi	r3, [r6, #0]
 8008cce:	3302      	addmi	r3, #2
 8008cd0:	6033      	strmi	r3, [r6, #0]
 8008cd2:	6825      	ldr	r5, [r4, #0]
 8008cd4:	f015 0506 	ands.w	r5, r5, #6
 8008cd8:	d106      	bne.n	8008ce8 <_printf_common+0x48>
 8008cda:	f104 0a19 	add.w	sl, r4, #25
 8008cde:	68e3      	ldr	r3, [r4, #12]
 8008ce0:	6832      	ldr	r2, [r6, #0]
 8008ce2:	1a9b      	subs	r3, r3, r2
 8008ce4:	42ab      	cmp	r3, r5
 8008ce6:	dc26      	bgt.n	8008d36 <_printf_common+0x96>
 8008ce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008cec:	1e13      	subs	r3, r2, #0
 8008cee:	6822      	ldr	r2, [r4, #0]
 8008cf0:	bf18      	it	ne
 8008cf2:	2301      	movne	r3, #1
 8008cf4:	0692      	lsls	r2, r2, #26
 8008cf6:	d42b      	bmi.n	8008d50 <_printf_common+0xb0>
 8008cf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	4638      	mov	r0, r7
 8008d00:	47c0      	blx	r8
 8008d02:	3001      	adds	r0, #1
 8008d04:	d01e      	beq.n	8008d44 <_printf_common+0xa4>
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	68e5      	ldr	r5, [r4, #12]
 8008d0a:	6832      	ldr	r2, [r6, #0]
 8008d0c:	f003 0306 	and.w	r3, r3, #6
 8008d10:	2b04      	cmp	r3, #4
 8008d12:	bf08      	it	eq
 8008d14:	1aad      	subeq	r5, r5, r2
 8008d16:	68a3      	ldr	r3, [r4, #8]
 8008d18:	6922      	ldr	r2, [r4, #16]
 8008d1a:	bf0c      	ite	eq
 8008d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d20:	2500      	movne	r5, #0
 8008d22:	4293      	cmp	r3, r2
 8008d24:	bfc4      	itt	gt
 8008d26:	1a9b      	subgt	r3, r3, r2
 8008d28:	18ed      	addgt	r5, r5, r3
 8008d2a:	2600      	movs	r6, #0
 8008d2c:	341a      	adds	r4, #26
 8008d2e:	42b5      	cmp	r5, r6
 8008d30:	d11a      	bne.n	8008d68 <_printf_common+0xc8>
 8008d32:	2000      	movs	r0, #0
 8008d34:	e008      	b.n	8008d48 <_printf_common+0xa8>
 8008d36:	2301      	movs	r3, #1
 8008d38:	4652      	mov	r2, sl
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	47c0      	blx	r8
 8008d40:	3001      	adds	r0, #1
 8008d42:	d103      	bne.n	8008d4c <_printf_common+0xac>
 8008d44:	f04f 30ff 	mov.w	r0, #4294967295
 8008d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4c:	3501      	adds	r5, #1
 8008d4e:	e7c6      	b.n	8008cde <_printf_common+0x3e>
 8008d50:	18e1      	adds	r1, r4, r3
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	2030      	movs	r0, #48	; 0x30
 8008d56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d5a:	4422      	add	r2, r4
 8008d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d64:	3302      	adds	r3, #2
 8008d66:	e7c7      	b.n	8008cf8 <_printf_common+0x58>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	4638      	mov	r0, r7
 8008d70:	47c0      	blx	r8
 8008d72:	3001      	adds	r0, #1
 8008d74:	d0e6      	beq.n	8008d44 <_printf_common+0xa4>
 8008d76:	3601      	adds	r6, #1
 8008d78:	e7d9      	b.n	8008d2e <_printf_common+0x8e>
	...

08008d7c <_printf_i>:
 8008d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d80:	7e0f      	ldrb	r7, [r1, #24]
 8008d82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d84:	2f78      	cmp	r7, #120	; 0x78
 8008d86:	4691      	mov	r9, r2
 8008d88:	4680      	mov	r8, r0
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	469a      	mov	sl, r3
 8008d8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d92:	d807      	bhi.n	8008da4 <_printf_i+0x28>
 8008d94:	2f62      	cmp	r7, #98	; 0x62
 8008d96:	d80a      	bhi.n	8008dae <_printf_i+0x32>
 8008d98:	2f00      	cmp	r7, #0
 8008d9a:	f000 80d8 	beq.w	8008f4e <_printf_i+0x1d2>
 8008d9e:	2f58      	cmp	r7, #88	; 0x58
 8008da0:	f000 80a3 	beq.w	8008eea <_printf_i+0x16e>
 8008da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008da8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dac:	e03a      	b.n	8008e24 <_printf_i+0xa8>
 8008dae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008db2:	2b15      	cmp	r3, #21
 8008db4:	d8f6      	bhi.n	8008da4 <_printf_i+0x28>
 8008db6:	a101      	add	r1, pc, #4	; (adr r1, 8008dbc <_printf_i+0x40>)
 8008db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dbc:	08008e15 	.word	0x08008e15
 8008dc0:	08008e29 	.word	0x08008e29
 8008dc4:	08008da5 	.word	0x08008da5
 8008dc8:	08008da5 	.word	0x08008da5
 8008dcc:	08008da5 	.word	0x08008da5
 8008dd0:	08008da5 	.word	0x08008da5
 8008dd4:	08008e29 	.word	0x08008e29
 8008dd8:	08008da5 	.word	0x08008da5
 8008ddc:	08008da5 	.word	0x08008da5
 8008de0:	08008da5 	.word	0x08008da5
 8008de4:	08008da5 	.word	0x08008da5
 8008de8:	08008f35 	.word	0x08008f35
 8008dec:	08008e59 	.word	0x08008e59
 8008df0:	08008f17 	.word	0x08008f17
 8008df4:	08008da5 	.word	0x08008da5
 8008df8:	08008da5 	.word	0x08008da5
 8008dfc:	08008f57 	.word	0x08008f57
 8008e00:	08008da5 	.word	0x08008da5
 8008e04:	08008e59 	.word	0x08008e59
 8008e08:	08008da5 	.word	0x08008da5
 8008e0c:	08008da5 	.word	0x08008da5
 8008e10:	08008f1f 	.word	0x08008f1f
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	1d1a      	adds	r2, r3, #4
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	602a      	str	r2, [r5, #0]
 8008e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e24:	2301      	movs	r3, #1
 8008e26:	e0a3      	b.n	8008f70 <_printf_i+0x1f4>
 8008e28:	6820      	ldr	r0, [r4, #0]
 8008e2a:	6829      	ldr	r1, [r5, #0]
 8008e2c:	0606      	lsls	r6, r0, #24
 8008e2e:	f101 0304 	add.w	r3, r1, #4
 8008e32:	d50a      	bpl.n	8008e4a <_printf_i+0xce>
 8008e34:	680e      	ldr	r6, [r1, #0]
 8008e36:	602b      	str	r3, [r5, #0]
 8008e38:	2e00      	cmp	r6, #0
 8008e3a:	da03      	bge.n	8008e44 <_printf_i+0xc8>
 8008e3c:	232d      	movs	r3, #45	; 0x2d
 8008e3e:	4276      	negs	r6, r6
 8008e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e44:	485e      	ldr	r0, [pc, #376]	; (8008fc0 <_printf_i+0x244>)
 8008e46:	230a      	movs	r3, #10
 8008e48:	e019      	b.n	8008e7e <_printf_i+0x102>
 8008e4a:	680e      	ldr	r6, [r1, #0]
 8008e4c:	602b      	str	r3, [r5, #0]
 8008e4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e52:	bf18      	it	ne
 8008e54:	b236      	sxthne	r6, r6
 8008e56:	e7ef      	b.n	8008e38 <_printf_i+0xbc>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	6820      	ldr	r0, [r4, #0]
 8008e5c:	1d19      	adds	r1, r3, #4
 8008e5e:	6029      	str	r1, [r5, #0]
 8008e60:	0601      	lsls	r1, r0, #24
 8008e62:	d501      	bpl.n	8008e68 <_printf_i+0xec>
 8008e64:	681e      	ldr	r6, [r3, #0]
 8008e66:	e002      	b.n	8008e6e <_printf_i+0xf2>
 8008e68:	0646      	lsls	r6, r0, #25
 8008e6a:	d5fb      	bpl.n	8008e64 <_printf_i+0xe8>
 8008e6c:	881e      	ldrh	r6, [r3, #0]
 8008e6e:	4854      	ldr	r0, [pc, #336]	; (8008fc0 <_printf_i+0x244>)
 8008e70:	2f6f      	cmp	r7, #111	; 0x6f
 8008e72:	bf0c      	ite	eq
 8008e74:	2308      	moveq	r3, #8
 8008e76:	230a      	movne	r3, #10
 8008e78:	2100      	movs	r1, #0
 8008e7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e7e:	6865      	ldr	r5, [r4, #4]
 8008e80:	60a5      	str	r5, [r4, #8]
 8008e82:	2d00      	cmp	r5, #0
 8008e84:	bfa2      	ittt	ge
 8008e86:	6821      	ldrge	r1, [r4, #0]
 8008e88:	f021 0104 	bicge.w	r1, r1, #4
 8008e8c:	6021      	strge	r1, [r4, #0]
 8008e8e:	b90e      	cbnz	r6, 8008e94 <_printf_i+0x118>
 8008e90:	2d00      	cmp	r5, #0
 8008e92:	d04d      	beq.n	8008f30 <_printf_i+0x1b4>
 8008e94:	4615      	mov	r5, r2
 8008e96:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e9a:	fb03 6711 	mls	r7, r3, r1, r6
 8008e9e:	5dc7      	ldrb	r7, [r0, r7]
 8008ea0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ea4:	4637      	mov	r7, r6
 8008ea6:	42bb      	cmp	r3, r7
 8008ea8:	460e      	mov	r6, r1
 8008eaa:	d9f4      	bls.n	8008e96 <_printf_i+0x11a>
 8008eac:	2b08      	cmp	r3, #8
 8008eae:	d10b      	bne.n	8008ec8 <_printf_i+0x14c>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	07de      	lsls	r6, r3, #31
 8008eb4:	d508      	bpl.n	8008ec8 <_printf_i+0x14c>
 8008eb6:	6923      	ldr	r3, [r4, #16]
 8008eb8:	6861      	ldr	r1, [r4, #4]
 8008eba:	4299      	cmp	r1, r3
 8008ebc:	bfde      	ittt	le
 8008ebe:	2330      	movle	r3, #48	; 0x30
 8008ec0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ec4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ec8:	1b52      	subs	r2, r2, r5
 8008eca:	6122      	str	r2, [r4, #16]
 8008ecc:	f8cd a000 	str.w	sl, [sp]
 8008ed0:	464b      	mov	r3, r9
 8008ed2:	aa03      	add	r2, sp, #12
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	f7ff fee2 	bl	8008ca0 <_printf_common>
 8008edc:	3001      	adds	r0, #1
 8008ede:	d14c      	bne.n	8008f7a <_printf_i+0x1fe>
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	b004      	add	sp, #16
 8008ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eea:	4835      	ldr	r0, [pc, #212]	; (8008fc0 <_printf_i+0x244>)
 8008eec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ef0:	6829      	ldr	r1, [r5, #0]
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ef8:	6029      	str	r1, [r5, #0]
 8008efa:	061d      	lsls	r5, r3, #24
 8008efc:	d514      	bpl.n	8008f28 <_printf_i+0x1ac>
 8008efe:	07df      	lsls	r7, r3, #31
 8008f00:	bf44      	itt	mi
 8008f02:	f043 0320 	orrmi.w	r3, r3, #32
 8008f06:	6023      	strmi	r3, [r4, #0]
 8008f08:	b91e      	cbnz	r6, 8008f12 <_printf_i+0x196>
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	f023 0320 	bic.w	r3, r3, #32
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	2310      	movs	r3, #16
 8008f14:	e7b0      	b.n	8008e78 <_printf_i+0xfc>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	f043 0320 	orr.w	r3, r3, #32
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	2378      	movs	r3, #120	; 0x78
 8008f20:	4828      	ldr	r0, [pc, #160]	; (8008fc4 <_printf_i+0x248>)
 8008f22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f26:	e7e3      	b.n	8008ef0 <_printf_i+0x174>
 8008f28:	0659      	lsls	r1, r3, #25
 8008f2a:	bf48      	it	mi
 8008f2c:	b2b6      	uxthmi	r6, r6
 8008f2e:	e7e6      	b.n	8008efe <_printf_i+0x182>
 8008f30:	4615      	mov	r5, r2
 8008f32:	e7bb      	b.n	8008eac <_printf_i+0x130>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	6826      	ldr	r6, [r4, #0]
 8008f38:	6961      	ldr	r1, [r4, #20]
 8008f3a:	1d18      	adds	r0, r3, #4
 8008f3c:	6028      	str	r0, [r5, #0]
 8008f3e:	0635      	lsls	r5, r6, #24
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	d501      	bpl.n	8008f48 <_printf_i+0x1cc>
 8008f44:	6019      	str	r1, [r3, #0]
 8008f46:	e002      	b.n	8008f4e <_printf_i+0x1d2>
 8008f48:	0670      	lsls	r0, r6, #25
 8008f4a:	d5fb      	bpl.n	8008f44 <_printf_i+0x1c8>
 8008f4c:	8019      	strh	r1, [r3, #0]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6123      	str	r3, [r4, #16]
 8008f52:	4615      	mov	r5, r2
 8008f54:	e7ba      	b.n	8008ecc <_printf_i+0x150>
 8008f56:	682b      	ldr	r3, [r5, #0]
 8008f58:	1d1a      	adds	r2, r3, #4
 8008f5a:	602a      	str	r2, [r5, #0]
 8008f5c:	681d      	ldr	r5, [r3, #0]
 8008f5e:	6862      	ldr	r2, [r4, #4]
 8008f60:	2100      	movs	r1, #0
 8008f62:	4628      	mov	r0, r5
 8008f64:	f7f7 f94c 	bl	8000200 <memchr>
 8008f68:	b108      	cbz	r0, 8008f6e <_printf_i+0x1f2>
 8008f6a:	1b40      	subs	r0, r0, r5
 8008f6c:	6060      	str	r0, [r4, #4]
 8008f6e:	6863      	ldr	r3, [r4, #4]
 8008f70:	6123      	str	r3, [r4, #16]
 8008f72:	2300      	movs	r3, #0
 8008f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f78:	e7a8      	b.n	8008ecc <_printf_i+0x150>
 8008f7a:	6923      	ldr	r3, [r4, #16]
 8008f7c:	462a      	mov	r2, r5
 8008f7e:	4649      	mov	r1, r9
 8008f80:	4640      	mov	r0, r8
 8008f82:	47d0      	blx	sl
 8008f84:	3001      	adds	r0, #1
 8008f86:	d0ab      	beq.n	8008ee0 <_printf_i+0x164>
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	079b      	lsls	r3, r3, #30
 8008f8c:	d413      	bmi.n	8008fb6 <_printf_i+0x23a>
 8008f8e:	68e0      	ldr	r0, [r4, #12]
 8008f90:	9b03      	ldr	r3, [sp, #12]
 8008f92:	4298      	cmp	r0, r3
 8008f94:	bfb8      	it	lt
 8008f96:	4618      	movlt	r0, r3
 8008f98:	e7a4      	b.n	8008ee4 <_printf_i+0x168>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	4632      	mov	r2, r6
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	47d0      	blx	sl
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d09b      	beq.n	8008ee0 <_printf_i+0x164>
 8008fa8:	3501      	adds	r5, #1
 8008faa:	68e3      	ldr	r3, [r4, #12]
 8008fac:	9903      	ldr	r1, [sp, #12]
 8008fae:	1a5b      	subs	r3, r3, r1
 8008fb0:	42ab      	cmp	r3, r5
 8008fb2:	dcf2      	bgt.n	8008f9a <_printf_i+0x21e>
 8008fb4:	e7eb      	b.n	8008f8e <_printf_i+0x212>
 8008fb6:	2500      	movs	r5, #0
 8008fb8:	f104 0619 	add.w	r6, r4, #25
 8008fbc:	e7f5      	b.n	8008faa <_printf_i+0x22e>
 8008fbe:	bf00      	nop
 8008fc0:	0800ef28 	.word	0x0800ef28
 8008fc4:	0800ef39 	.word	0x0800ef39

08008fc8 <_scanf_float>:
 8008fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	b087      	sub	sp, #28
 8008fce:	4617      	mov	r7, r2
 8008fd0:	9303      	str	r3, [sp, #12]
 8008fd2:	688b      	ldr	r3, [r1, #8]
 8008fd4:	1e5a      	subs	r2, r3, #1
 8008fd6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008fda:	bf83      	ittte	hi
 8008fdc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008fe0:	195b      	addhi	r3, r3, r5
 8008fe2:	9302      	strhi	r3, [sp, #8]
 8008fe4:	2300      	movls	r3, #0
 8008fe6:	bf86      	itte	hi
 8008fe8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008fec:	608b      	strhi	r3, [r1, #8]
 8008fee:	9302      	strls	r3, [sp, #8]
 8008ff0:	680b      	ldr	r3, [r1, #0]
 8008ff2:	468b      	mov	fp, r1
 8008ff4:	2500      	movs	r5, #0
 8008ff6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008ffa:	f84b 3b1c 	str.w	r3, [fp], #28
 8008ffe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009002:	4680      	mov	r8, r0
 8009004:	460c      	mov	r4, r1
 8009006:	465e      	mov	r6, fp
 8009008:	46aa      	mov	sl, r5
 800900a:	46a9      	mov	r9, r5
 800900c:	9501      	str	r5, [sp, #4]
 800900e:	68a2      	ldr	r2, [r4, #8]
 8009010:	b152      	cbz	r2, 8009028 <_scanf_float+0x60>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	2b4e      	cmp	r3, #78	; 0x4e
 8009018:	d864      	bhi.n	80090e4 <_scanf_float+0x11c>
 800901a:	2b40      	cmp	r3, #64	; 0x40
 800901c:	d83c      	bhi.n	8009098 <_scanf_float+0xd0>
 800901e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009022:	b2c8      	uxtb	r0, r1
 8009024:	280e      	cmp	r0, #14
 8009026:	d93a      	bls.n	800909e <_scanf_float+0xd6>
 8009028:	f1b9 0f00 	cmp.w	r9, #0
 800902c:	d003      	beq.n	8009036 <_scanf_float+0x6e>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	f10a 3aff 	add.w	sl, sl, #4294967295
 800903a:	f1ba 0f01 	cmp.w	sl, #1
 800903e:	f200 8113 	bhi.w	8009268 <_scanf_float+0x2a0>
 8009042:	455e      	cmp	r6, fp
 8009044:	f200 8105 	bhi.w	8009252 <_scanf_float+0x28a>
 8009048:	2501      	movs	r5, #1
 800904a:	4628      	mov	r0, r5
 800904c:	b007      	add	sp, #28
 800904e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009052:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009056:	2a0d      	cmp	r2, #13
 8009058:	d8e6      	bhi.n	8009028 <_scanf_float+0x60>
 800905a:	a101      	add	r1, pc, #4	; (adr r1, 8009060 <_scanf_float+0x98>)
 800905c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009060:	0800919f 	.word	0x0800919f
 8009064:	08009029 	.word	0x08009029
 8009068:	08009029 	.word	0x08009029
 800906c:	08009029 	.word	0x08009029
 8009070:	080091ff 	.word	0x080091ff
 8009074:	080091d7 	.word	0x080091d7
 8009078:	08009029 	.word	0x08009029
 800907c:	08009029 	.word	0x08009029
 8009080:	080091ad 	.word	0x080091ad
 8009084:	08009029 	.word	0x08009029
 8009088:	08009029 	.word	0x08009029
 800908c:	08009029 	.word	0x08009029
 8009090:	08009029 	.word	0x08009029
 8009094:	08009165 	.word	0x08009165
 8009098:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800909c:	e7db      	b.n	8009056 <_scanf_float+0x8e>
 800909e:	290e      	cmp	r1, #14
 80090a0:	d8c2      	bhi.n	8009028 <_scanf_float+0x60>
 80090a2:	a001      	add	r0, pc, #4	; (adr r0, 80090a8 <_scanf_float+0xe0>)
 80090a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80090a8:	08009157 	.word	0x08009157
 80090ac:	08009029 	.word	0x08009029
 80090b0:	08009157 	.word	0x08009157
 80090b4:	080091eb 	.word	0x080091eb
 80090b8:	08009029 	.word	0x08009029
 80090bc:	08009105 	.word	0x08009105
 80090c0:	08009141 	.word	0x08009141
 80090c4:	08009141 	.word	0x08009141
 80090c8:	08009141 	.word	0x08009141
 80090cc:	08009141 	.word	0x08009141
 80090d0:	08009141 	.word	0x08009141
 80090d4:	08009141 	.word	0x08009141
 80090d8:	08009141 	.word	0x08009141
 80090dc:	08009141 	.word	0x08009141
 80090e0:	08009141 	.word	0x08009141
 80090e4:	2b6e      	cmp	r3, #110	; 0x6e
 80090e6:	d809      	bhi.n	80090fc <_scanf_float+0x134>
 80090e8:	2b60      	cmp	r3, #96	; 0x60
 80090ea:	d8b2      	bhi.n	8009052 <_scanf_float+0x8a>
 80090ec:	2b54      	cmp	r3, #84	; 0x54
 80090ee:	d077      	beq.n	80091e0 <_scanf_float+0x218>
 80090f0:	2b59      	cmp	r3, #89	; 0x59
 80090f2:	d199      	bne.n	8009028 <_scanf_float+0x60>
 80090f4:	2d07      	cmp	r5, #7
 80090f6:	d197      	bne.n	8009028 <_scanf_float+0x60>
 80090f8:	2508      	movs	r5, #8
 80090fa:	e029      	b.n	8009150 <_scanf_float+0x188>
 80090fc:	2b74      	cmp	r3, #116	; 0x74
 80090fe:	d06f      	beq.n	80091e0 <_scanf_float+0x218>
 8009100:	2b79      	cmp	r3, #121	; 0x79
 8009102:	e7f6      	b.n	80090f2 <_scanf_float+0x12a>
 8009104:	6821      	ldr	r1, [r4, #0]
 8009106:	05c8      	lsls	r0, r1, #23
 8009108:	d51a      	bpl.n	8009140 <_scanf_float+0x178>
 800910a:	9b02      	ldr	r3, [sp, #8]
 800910c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009110:	6021      	str	r1, [r4, #0]
 8009112:	f109 0901 	add.w	r9, r9, #1
 8009116:	b11b      	cbz	r3, 8009120 <_scanf_float+0x158>
 8009118:	3b01      	subs	r3, #1
 800911a:	3201      	adds	r2, #1
 800911c:	9302      	str	r3, [sp, #8]
 800911e:	60a2      	str	r2, [r4, #8]
 8009120:	68a3      	ldr	r3, [r4, #8]
 8009122:	3b01      	subs	r3, #1
 8009124:	60a3      	str	r3, [r4, #8]
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	3301      	adds	r3, #1
 800912a:	6123      	str	r3, [r4, #16]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	3b01      	subs	r3, #1
 8009130:	2b00      	cmp	r3, #0
 8009132:	607b      	str	r3, [r7, #4]
 8009134:	f340 8084 	ble.w	8009240 <_scanf_float+0x278>
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	3301      	adds	r3, #1
 800913c:	603b      	str	r3, [r7, #0]
 800913e:	e766      	b.n	800900e <_scanf_float+0x46>
 8009140:	eb1a 0f05 	cmn.w	sl, r5
 8009144:	f47f af70 	bne.w	8009028 <_scanf_float+0x60>
 8009148:	6822      	ldr	r2, [r4, #0]
 800914a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800914e:	6022      	str	r2, [r4, #0]
 8009150:	f806 3b01 	strb.w	r3, [r6], #1
 8009154:	e7e4      	b.n	8009120 <_scanf_float+0x158>
 8009156:	6822      	ldr	r2, [r4, #0]
 8009158:	0610      	lsls	r0, r2, #24
 800915a:	f57f af65 	bpl.w	8009028 <_scanf_float+0x60>
 800915e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009162:	e7f4      	b.n	800914e <_scanf_float+0x186>
 8009164:	f1ba 0f00 	cmp.w	sl, #0
 8009168:	d10e      	bne.n	8009188 <_scanf_float+0x1c0>
 800916a:	f1b9 0f00 	cmp.w	r9, #0
 800916e:	d10e      	bne.n	800918e <_scanf_float+0x1c6>
 8009170:	6822      	ldr	r2, [r4, #0]
 8009172:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009176:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800917a:	d108      	bne.n	800918e <_scanf_float+0x1c6>
 800917c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009180:	6022      	str	r2, [r4, #0]
 8009182:	f04f 0a01 	mov.w	sl, #1
 8009186:	e7e3      	b.n	8009150 <_scanf_float+0x188>
 8009188:	f1ba 0f02 	cmp.w	sl, #2
 800918c:	d055      	beq.n	800923a <_scanf_float+0x272>
 800918e:	2d01      	cmp	r5, #1
 8009190:	d002      	beq.n	8009198 <_scanf_float+0x1d0>
 8009192:	2d04      	cmp	r5, #4
 8009194:	f47f af48 	bne.w	8009028 <_scanf_float+0x60>
 8009198:	3501      	adds	r5, #1
 800919a:	b2ed      	uxtb	r5, r5
 800919c:	e7d8      	b.n	8009150 <_scanf_float+0x188>
 800919e:	f1ba 0f01 	cmp.w	sl, #1
 80091a2:	f47f af41 	bne.w	8009028 <_scanf_float+0x60>
 80091a6:	f04f 0a02 	mov.w	sl, #2
 80091aa:	e7d1      	b.n	8009150 <_scanf_float+0x188>
 80091ac:	b97d      	cbnz	r5, 80091ce <_scanf_float+0x206>
 80091ae:	f1b9 0f00 	cmp.w	r9, #0
 80091b2:	f47f af3c 	bne.w	800902e <_scanf_float+0x66>
 80091b6:	6822      	ldr	r2, [r4, #0]
 80091b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80091bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80091c0:	f47f af39 	bne.w	8009036 <_scanf_float+0x6e>
 80091c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091c8:	6022      	str	r2, [r4, #0]
 80091ca:	2501      	movs	r5, #1
 80091cc:	e7c0      	b.n	8009150 <_scanf_float+0x188>
 80091ce:	2d03      	cmp	r5, #3
 80091d0:	d0e2      	beq.n	8009198 <_scanf_float+0x1d0>
 80091d2:	2d05      	cmp	r5, #5
 80091d4:	e7de      	b.n	8009194 <_scanf_float+0x1cc>
 80091d6:	2d02      	cmp	r5, #2
 80091d8:	f47f af26 	bne.w	8009028 <_scanf_float+0x60>
 80091dc:	2503      	movs	r5, #3
 80091de:	e7b7      	b.n	8009150 <_scanf_float+0x188>
 80091e0:	2d06      	cmp	r5, #6
 80091e2:	f47f af21 	bne.w	8009028 <_scanf_float+0x60>
 80091e6:	2507      	movs	r5, #7
 80091e8:	e7b2      	b.n	8009150 <_scanf_float+0x188>
 80091ea:	6822      	ldr	r2, [r4, #0]
 80091ec:	0591      	lsls	r1, r2, #22
 80091ee:	f57f af1b 	bpl.w	8009028 <_scanf_float+0x60>
 80091f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80091f6:	6022      	str	r2, [r4, #0]
 80091f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80091fc:	e7a8      	b.n	8009150 <_scanf_float+0x188>
 80091fe:	6822      	ldr	r2, [r4, #0]
 8009200:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009204:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009208:	d006      	beq.n	8009218 <_scanf_float+0x250>
 800920a:	0550      	lsls	r0, r2, #21
 800920c:	f57f af0c 	bpl.w	8009028 <_scanf_float+0x60>
 8009210:	f1b9 0f00 	cmp.w	r9, #0
 8009214:	f43f af0f 	beq.w	8009036 <_scanf_float+0x6e>
 8009218:	0591      	lsls	r1, r2, #22
 800921a:	bf58      	it	pl
 800921c:	9901      	ldrpl	r1, [sp, #4]
 800921e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009222:	bf58      	it	pl
 8009224:	eba9 0101 	subpl.w	r1, r9, r1
 8009228:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800922c:	bf58      	it	pl
 800922e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009232:	6022      	str	r2, [r4, #0]
 8009234:	f04f 0900 	mov.w	r9, #0
 8009238:	e78a      	b.n	8009150 <_scanf_float+0x188>
 800923a:	f04f 0a03 	mov.w	sl, #3
 800923e:	e787      	b.n	8009150 <_scanf_float+0x188>
 8009240:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009244:	4639      	mov	r1, r7
 8009246:	4640      	mov	r0, r8
 8009248:	4798      	blx	r3
 800924a:	2800      	cmp	r0, #0
 800924c:	f43f aedf 	beq.w	800900e <_scanf_float+0x46>
 8009250:	e6ea      	b.n	8009028 <_scanf_float+0x60>
 8009252:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009256:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800925a:	463a      	mov	r2, r7
 800925c:	4640      	mov	r0, r8
 800925e:	4798      	blx	r3
 8009260:	6923      	ldr	r3, [r4, #16]
 8009262:	3b01      	subs	r3, #1
 8009264:	6123      	str	r3, [r4, #16]
 8009266:	e6ec      	b.n	8009042 <_scanf_float+0x7a>
 8009268:	1e6b      	subs	r3, r5, #1
 800926a:	2b06      	cmp	r3, #6
 800926c:	d825      	bhi.n	80092ba <_scanf_float+0x2f2>
 800926e:	2d02      	cmp	r5, #2
 8009270:	d836      	bhi.n	80092e0 <_scanf_float+0x318>
 8009272:	455e      	cmp	r6, fp
 8009274:	f67f aee8 	bls.w	8009048 <_scanf_float+0x80>
 8009278:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800927c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009280:	463a      	mov	r2, r7
 8009282:	4640      	mov	r0, r8
 8009284:	4798      	blx	r3
 8009286:	6923      	ldr	r3, [r4, #16]
 8009288:	3b01      	subs	r3, #1
 800928a:	6123      	str	r3, [r4, #16]
 800928c:	e7f1      	b.n	8009272 <_scanf_float+0x2aa>
 800928e:	9802      	ldr	r0, [sp, #8]
 8009290:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009294:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009298:	9002      	str	r0, [sp, #8]
 800929a:	463a      	mov	r2, r7
 800929c:	4640      	mov	r0, r8
 800929e:	4798      	blx	r3
 80092a0:	6923      	ldr	r3, [r4, #16]
 80092a2:	3b01      	subs	r3, #1
 80092a4:	6123      	str	r3, [r4, #16]
 80092a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092aa:	fa5f fa8a 	uxtb.w	sl, sl
 80092ae:	f1ba 0f02 	cmp.w	sl, #2
 80092b2:	d1ec      	bne.n	800928e <_scanf_float+0x2c6>
 80092b4:	3d03      	subs	r5, #3
 80092b6:	b2ed      	uxtb	r5, r5
 80092b8:	1b76      	subs	r6, r6, r5
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	05da      	lsls	r2, r3, #23
 80092be:	d52f      	bpl.n	8009320 <_scanf_float+0x358>
 80092c0:	055b      	lsls	r3, r3, #21
 80092c2:	d510      	bpl.n	80092e6 <_scanf_float+0x31e>
 80092c4:	455e      	cmp	r6, fp
 80092c6:	f67f aebf 	bls.w	8009048 <_scanf_float+0x80>
 80092ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092d2:	463a      	mov	r2, r7
 80092d4:	4640      	mov	r0, r8
 80092d6:	4798      	blx	r3
 80092d8:	6923      	ldr	r3, [r4, #16]
 80092da:	3b01      	subs	r3, #1
 80092dc:	6123      	str	r3, [r4, #16]
 80092de:	e7f1      	b.n	80092c4 <_scanf_float+0x2fc>
 80092e0:	46aa      	mov	sl, r5
 80092e2:	9602      	str	r6, [sp, #8]
 80092e4:	e7df      	b.n	80092a6 <_scanf_float+0x2de>
 80092e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80092ea:	6923      	ldr	r3, [r4, #16]
 80092ec:	2965      	cmp	r1, #101	; 0x65
 80092ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80092f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80092f6:	6123      	str	r3, [r4, #16]
 80092f8:	d00c      	beq.n	8009314 <_scanf_float+0x34c>
 80092fa:	2945      	cmp	r1, #69	; 0x45
 80092fc:	d00a      	beq.n	8009314 <_scanf_float+0x34c>
 80092fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009302:	463a      	mov	r2, r7
 8009304:	4640      	mov	r0, r8
 8009306:	4798      	blx	r3
 8009308:	6923      	ldr	r3, [r4, #16]
 800930a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800930e:	3b01      	subs	r3, #1
 8009310:	1eb5      	subs	r5, r6, #2
 8009312:	6123      	str	r3, [r4, #16]
 8009314:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009318:	463a      	mov	r2, r7
 800931a:	4640      	mov	r0, r8
 800931c:	4798      	blx	r3
 800931e:	462e      	mov	r6, r5
 8009320:	6825      	ldr	r5, [r4, #0]
 8009322:	f015 0510 	ands.w	r5, r5, #16
 8009326:	d159      	bne.n	80093dc <_scanf_float+0x414>
 8009328:	7035      	strb	r5, [r6, #0]
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009334:	d11b      	bne.n	800936e <_scanf_float+0x3a6>
 8009336:	9b01      	ldr	r3, [sp, #4]
 8009338:	454b      	cmp	r3, r9
 800933a:	eba3 0209 	sub.w	r2, r3, r9
 800933e:	d123      	bne.n	8009388 <_scanf_float+0x3c0>
 8009340:	2200      	movs	r2, #0
 8009342:	4659      	mov	r1, fp
 8009344:	4640      	mov	r0, r8
 8009346:	f000 ff09 	bl	800a15c <_strtod_r>
 800934a:	6822      	ldr	r2, [r4, #0]
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	f012 0f02 	tst.w	r2, #2
 8009352:	ec57 6b10 	vmov	r6, r7, d0
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	d021      	beq.n	800939e <_scanf_float+0x3d6>
 800935a:	9903      	ldr	r1, [sp, #12]
 800935c:	1d1a      	adds	r2, r3, #4
 800935e:	600a      	str	r2, [r1, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	e9c3 6700 	strd	r6, r7, [r3]
 8009366:	68e3      	ldr	r3, [r4, #12]
 8009368:	3301      	adds	r3, #1
 800936a:	60e3      	str	r3, [r4, #12]
 800936c:	e66d      	b.n	800904a <_scanf_float+0x82>
 800936e:	9b04      	ldr	r3, [sp, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0e5      	beq.n	8009340 <_scanf_float+0x378>
 8009374:	9905      	ldr	r1, [sp, #20]
 8009376:	230a      	movs	r3, #10
 8009378:	462a      	mov	r2, r5
 800937a:	3101      	adds	r1, #1
 800937c:	4640      	mov	r0, r8
 800937e:	f000 ff75 	bl	800a26c <_strtol_r>
 8009382:	9b04      	ldr	r3, [sp, #16]
 8009384:	9e05      	ldr	r6, [sp, #20]
 8009386:	1ac2      	subs	r2, r0, r3
 8009388:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800938c:	429e      	cmp	r6, r3
 800938e:	bf28      	it	cs
 8009390:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009394:	4912      	ldr	r1, [pc, #72]	; (80093e0 <_scanf_float+0x418>)
 8009396:	4630      	mov	r0, r6
 8009398:	f000 f82c 	bl	80093f4 <siprintf>
 800939c:	e7d0      	b.n	8009340 <_scanf_float+0x378>
 800939e:	9903      	ldr	r1, [sp, #12]
 80093a0:	f012 0f04 	tst.w	r2, #4
 80093a4:	f103 0204 	add.w	r2, r3, #4
 80093a8:	600a      	str	r2, [r1, #0]
 80093aa:	d1d9      	bne.n	8009360 <_scanf_float+0x398>
 80093ac:	f8d3 8000 	ldr.w	r8, [r3]
 80093b0:	ee10 2a10 	vmov	r2, s0
 80093b4:	ee10 0a10 	vmov	r0, s0
 80093b8:	463b      	mov	r3, r7
 80093ba:	4639      	mov	r1, r7
 80093bc:	f7f7 fbc6 	bl	8000b4c <__aeabi_dcmpun>
 80093c0:	b128      	cbz	r0, 80093ce <_scanf_float+0x406>
 80093c2:	4808      	ldr	r0, [pc, #32]	; (80093e4 <_scanf_float+0x41c>)
 80093c4:	f000 f810 	bl	80093e8 <nanf>
 80093c8:	ed88 0a00 	vstr	s0, [r8]
 80093cc:	e7cb      	b.n	8009366 <_scanf_float+0x39e>
 80093ce:	4630      	mov	r0, r6
 80093d0:	4639      	mov	r1, r7
 80093d2:	f7f7 fc19 	bl	8000c08 <__aeabi_d2f>
 80093d6:	f8c8 0000 	str.w	r0, [r8]
 80093da:	e7c4      	b.n	8009366 <_scanf_float+0x39e>
 80093dc:	2500      	movs	r5, #0
 80093de:	e634      	b.n	800904a <_scanf_float+0x82>
 80093e0:	0800ef4a 	.word	0x0800ef4a
 80093e4:	0800f36b 	.word	0x0800f36b

080093e8 <nanf>:
 80093e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80093f0 <nanf+0x8>
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	7fc00000 	.word	0x7fc00000

080093f4 <siprintf>:
 80093f4:	b40e      	push	{r1, r2, r3}
 80093f6:	b500      	push	{lr}
 80093f8:	b09c      	sub	sp, #112	; 0x70
 80093fa:	ab1d      	add	r3, sp, #116	; 0x74
 80093fc:	9002      	str	r0, [sp, #8]
 80093fe:	9006      	str	r0, [sp, #24]
 8009400:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009404:	4809      	ldr	r0, [pc, #36]	; (800942c <siprintf+0x38>)
 8009406:	9107      	str	r1, [sp, #28]
 8009408:	9104      	str	r1, [sp, #16]
 800940a:	4909      	ldr	r1, [pc, #36]	; (8009430 <siprintf+0x3c>)
 800940c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009410:	9105      	str	r1, [sp, #20]
 8009412:	6800      	ldr	r0, [r0, #0]
 8009414:	9301      	str	r3, [sp, #4]
 8009416:	a902      	add	r1, sp, #8
 8009418:	f002 ff7c 	bl	800c314 <_svfiprintf_r>
 800941c:	9b02      	ldr	r3, [sp, #8]
 800941e:	2200      	movs	r2, #0
 8009420:	701a      	strb	r2, [r3, #0]
 8009422:	b01c      	add	sp, #112	; 0x70
 8009424:	f85d eb04 	ldr.w	lr, [sp], #4
 8009428:	b003      	add	sp, #12
 800942a:	4770      	bx	lr
 800942c:	20000014 	.word	0x20000014
 8009430:	ffff0208 	.word	0xffff0208

08009434 <siscanf>:
 8009434:	b40e      	push	{r1, r2, r3}
 8009436:	b510      	push	{r4, lr}
 8009438:	b09f      	sub	sp, #124	; 0x7c
 800943a:	ac21      	add	r4, sp, #132	; 0x84
 800943c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009440:	f854 2b04 	ldr.w	r2, [r4], #4
 8009444:	9201      	str	r2, [sp, #4]
 8009446:	f8ad 101c 	strh.w	r1, [sp, #28]
 800944a:	9004      	str	r0, [sp, #16]
 800944c:	9008      	str	r0, [sp, #32]
 800944e:	f7f6 fecf 	bl	80001f0 <strlen>
 8009452:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <siscanf+0x50>)
 8009454:	9005      	str	r0, [sp, #20]
 8009456:	9009      	str	r0, [sp, #36]	; 0x24
 8009458:	930d      	str	r3, [sp, #52]	; 0x34
 800945a:	480b      	ldr	r0, [pc, #44]	; (8009488 <siscanf+0x54>)
 800945c:	9a01      	ldr	r2, [sp, #4]
 800945e:	6800      	ldr	r0, [r0, #0]
 8009460:	9403      	str	r4, [sp, #12]
 8009462:	2300      	movs	r3, #0
 8009464:	9311      	str	r3, [sp, #68]	; 0x44
 8009466:	9316      	str	r3, [sp, #88]	; 0x58
 8009468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800946c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009470:	a904      	add	r1, sp, #16
 8009472:	4623      	mov	r3, r4
 8009474:	f003 f8a8 	bl	800c5c8 <__ssvfiscanf_r>
 8009478:	b01f      	add	sp, #124	; 0x7c
 800947a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800947e:	b003      	add	sp, #12
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	080094af 	.word	0x080094af
 8009488:	20000014 	.word	0x20000014

0800948c <__sread>:
 800948c:	b510      	push	{r4, lr}
 800948e:	460c      	mov	r4, r1
 8009490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009494:	f003 fb62 	bl	800cb5c <_read_r>
 8009498:	2800      	cmp	r0, #0
 800949a:	bfab      	itete	ge
 800949c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800949e:	89a3      	ldrhlt	r3, [r4, #12]
 80094a0:	181b      	addge	r3, r3, r0
 80094a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094a6:	bfac      	ite	ge
 80094a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094aa:	81a3      	strhlt	r3, [r4, #12]
 80094ac:	bd10      	pop	{r4, pc}

080094ae <__seofread>:
 80094ae:	2000      	movs	r0, #0
 80094b0:	4770      	bx	lr

080094b2 <__swrite>:
 80094b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b6:	461f      	mov	r7, r3
 80094b8:	898b      	ldrh	r3, [r1, #12]
 80094ba:	05db      	lsls	r3, r3, #23
 80094bc:	4605      	mov	r5, r0
 80094be:	460c      	mov	r4, r1
 80094c0:	4616      	mov	r6, r2
 80094c2:	d505      	bpl.n	80094d0 <__swrite+0x1e>
 80094c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c8:	2302      	movs	r3, #2
 80094ca:	2200      	movs	r2, #0
 80094cc:	f002 f8e2 	bl	800b694 <_lseek_r>
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094da:	81a3      	strh	r3, [r4, #12]
 80094dc:	4632      	mov	r2, r6
 80094de:	463b      	mov	r3, r7
 80094e0:	4628      	mov	r0, r5
 80094e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094e6:	f000 bec3 	b.w	800a270 <_write_r>

080094ea <__sseek>:
 80094ea:	b510      	push	{r4, lr}
 80094ec:	460c      	mov	r4, r1
 80094ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f2:	f002 f8cf 	bl	800b694 <_lseek_r>
 80094f6:	1c43      	adds	r3, r0, #1
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	bf15      	itete	ne
 80094fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80094fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009502:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009506:	81a3      	strheq	r3, [r4, #12]
 8009508:	bf18      	it	ne
 800950a:	81a3      	strhne	r3, [r4, #12]
 800950c:	bd10      	pop	{r4, pc}

0800950e <__sclose>:
 800950e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009512:	f000 bebf 	b.w	800a294 <_close_r>

08009516 <sulp>:
 8009516:	b570      	push	{r4, r5, r6, lr}
 8009518:	4604      	mov	r4, r0
 800951a:	460d      	mov	r5, r1
 800951c:	ec45 4b10 	vmov	d0, r4, r5
 8009520:	4616      	mov	r6, r2
 8009522:	f002 fc55 	bl	800bdd0 <__ulp>
 8009526:	ec51 0b10 	vmov	r0, r1, d0
 800952a:	b17e      	cbz	r6, 800954c <sulp+0x36>
 800952c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009530:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009534:	2b00      	cmp	r3, #0
 8009536:	dd09      	ble.n	800954c <sulp+0x36>
 8009538:	051b      	lsls	r3, r3, #20
 800953a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800953e:	2400      	movs	r4, #0
 8009540:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009544:	4622      	mov	r2, r4
 8009546:	462b      	mov	r3, r5
 8009548:	f7f7 f866 	bl	8000618 <__aeabi_dmul>
 800954c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009550 <_strtod_l>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	ed2d 8b02 	vpush	{d8}
 8009558:	b09d      	sub	sp, #116	; 0x74
 800955a:	461f      	mov	r7, r3
 800955c:	2300      	movs	r3, #0
 800955e:	9318      	str	r3, [sp, #96]	; 0x60
 8009560:	4ba2      	ldr	r3, [pc, #648]	; (80097ec <_strtod_l+0x29c>)
 8009562:	9213      	str	r2, [sp, #76]	; 0x4c
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	9305      	str	r3, [sp, #20]
 8009568:	4604      	mov	r4, r0
 800956a:	4618      	mov	r0, r3
 800956c:	4688      	mov	r8, r1
 800956e:	f7f6 fe3f 	bl	80001f0 <strlen>
 8009572:	f04f 0a00 	mov.w	sl, #0
 8009576:	4605      	mov	r5, r0
 8009578:	f04f 0b00 	mov.w	fp, #0
 800957c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009582:	781a      	ldrb	r2, [r3, #0]
 8009584:	2a2b      	cmp	r2, #43	; 0x2b
 8009586:	d04e      	beq.n	8009626 <_strtod_l+0xd6>
 8009588:	d83b      	bhi.n	8009602 <_strtod_l+0xb2>
 800958a:	2a0d      	cmp	r2, #13
 800958c:	d834      	bhi.n	80095f8 <_strtod_l+0xa8>
 800958e:	2a08      	cmp	r2, #8
 8009590:	d834      	bhi.n	80095fc <_strtod_l+0xac>
 8009592:	2a00      	cmp	r2, #0
 8009594:	d03e      	beq.n	8009614 <_strtod_l+0xc4>
 8009596:	2300      	movs	r3, #0
 8009598:	930a      	str	r3, [sp, #40]	; 0x28
 800959a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800959c:	7833      	ldrb	r3, [r6, #0]
 800959e:	2b30      	cmp	r3, #48	; 0x30
 80095a0:	f040 80b0 	bne.w	8009704 <_strtod_l+0x1b4>
 80095a4:	7873      	ldrb	r3, [r6, #1]
 80095a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095aa:	2b58      	cmp	r3, #88	; 0x58
 80095ac:	d168      	bne.n	8009680 <_strtod_l+0x130>
 80095ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	ab18      	add	r3, sp, #96	; 0x60
 80095b4:	9702      	str	r7, [sp, #8]
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	4a8d      	ldr	r2, [pc, #564]	; (80097f0 <_strtod_l+0x2a0>)
 80095ba:	ab19      	add	r3, sp, #100	; 0x64
 80095bc:	a917      	add	r1, sp, #92	; 0x5c
 80095be:	4620      	mov	r0, r4
 80095c0:	f001 fd5c 	bl	800b07c <__gethex>
 80095c4:	f010 0707 	ands.w	r7, r0, #7
 80095c8:	4605      	mov	r5, r0
 80095ca:	d005      	beq.n	80095d8 <_strtod_l+0x88>
 80095cc:	2f06      	cmp	r7, #6
 80095ce:	d12c      	bne.n	800962a <_strtod_l+0xda>
 80095d0:	3601      	adds	r6, #1
 80095d2:	2300      	movs	r3, #0
 80095d4:	9617      	str	r6, [sp, #92]	; 0x5c
 80095d6:	930a      	str	r3, [sp, #40]	; 0x28
 80095d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f040 8590 	bne.w	800a100 <_strtod_l+0xbb0>
 80095e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e2:	b1eb      	cbz	r3, 8009620 <_strtod_l+0xd0>
 80095e4:	4652      	mov	r2, sl
 80095e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80095ea:	ec43 2b10 	vmov	d0, r2, r3
 80095ee:	b01d      	add	sp, #116	; 0x74
 80095f0:	ecbd 8b02 	vpop	{d8}
 80095f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f8:	2a20      	cmp	r2, #32
 80095fa:	d1cc      	bne.n	8009596 <_strtod_l+0x46>
 80095fc:	3301      	adds	r3, #1
 80095fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8009600:	e7be      	b.n	8009580 <_strtod_l+0x30>
 8009602:	2a2d      	cmp	r2, #45	; 0x2d
 8009604:	d1c7      	bne.n	8009596 <_strtod_l+0x46>
 8009606:	2201      	movs	r2, #1
 8009608:	920a      	str	r2, [sp, #40]	; 0x28
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	9217      	str	r2, [sp, #92]	; 0x5c
 800960e:	785b      	ldrb	r3, [r3, #1]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1c2      	bne.n	800959a <_strtod_l+0x4a>
 8009614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009616:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800961a:	2b00      	cmp	r3, #0
 800961c:	f040 856e 	bne.w	800a0fc <_strtod_l+0xbac>
 8009620:	4652      	mov	r2, sl
 8009622:	465b      	mov	r3, fp
 8009624:	e7e1      	b.n	80095ea <_strtod_l+0x9a>
 8009626:	2200      	movs	r2, #0
 8009628:	e7ee      	b.n	8009608 <_strtod_l+0xb8>
 800962a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800962c:	b13a      	cbz	r2, 800963e <_strtod_l+0xee>
 800962e:	2135      	movs	r1, #53	; 0x35
 8009630:	a81a      	add	r0, sp, #104	; 0x68
 8009632:	f002 fcd8 	bl	800bfe6 <__copybits>
 8009636:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009638:	4620      	mov	r0, r4
 800963a:	f002 f897 	bl	800b76c <_Bfree>
 800963e:	3f01      	subs	r7, #1
 8009640:	2f04      	cmp	r7, #4
 8009642:	d806      	bhi.n	8009652 <_strtod_l+0x102>
 8009644:	e8df f007 	tbb	[pc, r7]
 8009648:	1714030a 	.word	0x1714030a
 800964c:	0a          	.byte	0x0a
 800964d:	00          	.byte	0x00
 800964e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009652:	0728      	lsls	r0, r5, #28
 8009654:	d5c0      	bpl.n	80095d8 <_strtod_l+0x88>
 8009656:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800965a:	e7bd      	b.n	80095d8 <_strtod_l+0x88>
 800965c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009660:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009662:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009666:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800966a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800966e:	e7f0      	b.n	8009652 <_strtod_l+0x102>
 8009670:	f8df b180 	ldr.w	fp, [pc, #384]	; 80097f4 <_strtod_l+0x2a4>
 8009674:	e7ed      	b.n	8009652 <_strtod_l+0x102>
 8009676:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800967a:	f04f 3aff 	mov.w	sl, #4294967295
 800967e:	e7e8      	b.n	8009652 <_strtod_l+0x102>
 8009680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	9217      	str	r2, [sp, #92]	; 0x5c
 8009686:	785b      	ldrb	r3, [r3, #1]
 8009688:	2b30      	cmp	r3, #48	; 0x30
 800968a:	d0f9      	beq.n	8009680 <_strtod_l+0x130>
 800968c:	2b00      	cmp	r3, #0
 800968e:	d0a3      	beq.n	80095d8 <_strtod_l+0x88>
 8009690:	2301      	movs	r3, #1
 8009692:	f04f 0900 	mov.w	r9, #0
 8009696:	9304      	str	r3, [sp, #16]
 8009698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800969a:	9308      	str	r3, [sp, #32]
 800969c:	f8cd 901c 	str.w	r9, [sp, #28]
 80096a0:	464f      	mov	r7, r9
 80096a2:	220a      	movs	r2, #10
 80096a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80096a6:	7806      	ldrb	r6, [r0, #0]
 80096a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80096ac:	b2d9      	uxtb	r1, r3
 80096ae:	2909      	cmp	r1, #9
 80096b0:	d92a      	bls.n	8009708 <_strtod_l+0x1b8>
 80096b2:	9905      	ldr	r1, [sp, #20]
 80096b4:	462a      	mov	r2, r5
 80096b6:	f003 fab3 	bl	800cc20 <strncmp>
 80096ba:	b398      	cbz	r0, 8009724 <_strtod_l+0x1d4>
 80096bc:	2000      	movs	r0, #0
 80096be:	4632      	mov	r2, r6
 80096c0:	463d      	mov	r5, r7
 80096c2:	9005      	str	r0, [sp, #20]
 80096c4:	4603      	mov	r3, r0
 80096c6:	2a65      	cmp	r2, #101	; 0x65
 80096c8:	d001      	beq.n	80096ce <_strtod_l+0x17e>
 80096ca:	2a45      	cmp	r2, #69	; 0x45
 80096cc:	d118      	bne.n	8009700 <_strtod_l+0x1b0>
 80096ce:	b91d      	cbnz	r5, 80096d8 <_strtod_l+0x188>
 80096d0:	9a04      	ldr	r2, [sp, #16]
 80096d2:	4302      	orrs	r2, r0
 80096d4:	d09e      	beq.n	8009614 <_strtod_l+0xc4>
 80096d6:	2500      	movs	r5, #0
 80096d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80096dc:	f108 0201 	add.w	r2, r8, #1
 80096e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80096e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80096e6:	2a2b      	cmp	r2, #43	; 0x2b
 80096e8:	d075      	beq.n	80097d6 <_strtod_l+0x286>
 80096ea:	2a2d      	cmp	r2, #45	; 0x2d
 80096ec:	d07b      	beq.n	80097e6 <_strtod_l+0x296>
 80096ee:	f04f 0c00 	mov.w	ip, #0
 80096f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80096f6:	2909      	cmp	r1, #9
 80096f8:	f240 8082 	bls.w	8009800 <_strtod_l+0x2b0>
 80096fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009700:	2600      	movs	r6, #0
 8009702:	e09d      	b.n	8009840 <_strtod_l+0x2f0>
 8009704:	2300      	movs	r3, #0
 8009706:	e7c4      	b.n	8009692 <_strtod_l+0x142>
 8009708:	2f08      	cmp	r7, #8
 800970a:	bfd8      	it	le
 800970c:	9907      	ldrle	r1, [sp, #28]
 800970e:	f100 0001 	add.w	r0, r0, #1
 8009712:	bfda      	itte	le
 8009714:	fb02 3301 	mlale	r3, r2, r1, r3
 8009718:	9307      	strle	r3, [sp, #28]
 800971a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800971e:	3701      	adds	r7, #1
 8009720:	9017      	str	r0, [sp, #92]	; 0x5c
 8009722:	e7bf      	b.n	80096a4 <_strtod_l+0x154>
 8009724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009726:	195a      	adds	r2, r3, r5
 8009728:	9217      	str	r2, [sp, #92]	; 0x5c
 800972a:	5d5a      	ldrb	r2, [r3, r5]
 800972c:	2f00      	cmp	r7, #0
 800972e:	d037      	beq.n	80097a0 <_strtod_l+0x250>
 8009730:	9005      	str	r0, [sp, #20]
 8009732:	463d      	mov	r5, r7
 8009734:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009738:	2b09      	cmp	r3, #9
 800973a:	d912      	bls.n	8009762 <_strtod_l+0x212>
 800973c:	2301      	movs	r3, #1
 800973e:	e7c2      	b.n	80096c6 <_strtod_l+0x176>
 8009740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	9217      	str	r2, [sp, #92]	; 0x5c
 8009746:	785a      	ldrb	r2, [r3, #1]
 8009748:	3001      	adds	r0, #1
 800974a:	2a30      	cmp	r2, #48	; 0x30
 800974c:	d0f8      	beq.n	8009740 <_strtod_l+0x1f0>
 800974e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009752:	2b08      	cmp	r3, #8
 8009754:	f200 84d9 	bhi.w	800a10a <_strtod_l+0xbba>
 8009758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800975a:	9005      	str	r0, [sp, #20]
 800975c:	2000      	movs	r0, #0
 800975e:	9308      	str	r3, [sp, #32]
 8009760:	4605      	mov	r5, r0
 8009762:	3a30      	subs	r2, #48	; 0x30
 8009764:	f100 0301 	add.w	r3, r0, #1
 8009768:	d014      	beq.n	8009794 <_strtod_l+0x244>
 800976a:	9905      	ldr	r1, [sp, #20]
 800976c:	4419      	add	r1, r3
 800976e:	9105      	str	r1, [sp, #20]
 8009770:	462b      	mov	r3, r5
 8009772:	eb00 0e05 	add.w	lr, r0, r5
 8009776:	210a      	movs	r1, #10
 8009778:	4573      	cmp	r3, lr
 800977a:	d113      	bne.n	80097a4 <_strtod_l+0x254>
 800977c:	182b      	adds	r3, r5, r0
 800977e:	2b08      	cmp	r3, #8
 8009780:	f105 0501 	add.w	r5, r5, #1
 8009784:	4405      	add	r5, r0
 8009786:	dc1c      	bgt.n	80097c2 <_strtod_l+0x272>
 8009788:	9907      	ldr	r1, [sp, #28]
 800978a:	230a      	movs	r3, #10
 800978c:	fb03 2301 	mla	r3, r3, r1, r2
 8009790:	9307      	str	r3, [sp, #28]
 8009792:	2300      	movs	r3, #0
 8009794:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009796:	1c51      	adds	r1, r2, #1
 8009798:	9117      	str	r1, [sp, #92]	; 0x5c
 800979a:	7852      	ldrb	r2, [r2, #1]
 800979c:	4618      	mov	r0, r3
 800979e:	e7c9      	b.n	8009734 <_strtod_l+0x1e4>
 80097a0:	4638      	mov	r0, r7
 80097a2:	e7d2      	b.n	800974a <_strtod_l+0x1fa>
 80097a4:	2b08      	cmp	r3, #8
 80097a6:	dc04      	bgt.n	80097b2 <_strtod_l+0x262>
 80097a8:	9e07      	ldr	r6, [sp, #28]
 80097aa:	434e      	muls	r6, r1
 80097ac:	9607      	str	r6, [sp, #28]
 80097ae:	3301      	adds	r3, #1
 80097b0:	e7e2      	b.n	8009778 <_strtod_l+0x228>
 80097b2:	f103 0c01 	add.w	ip, r3, #1
 80097b6:	f1bc 0f10 	cmp.w	ip, #16
 80097ba:	bfd8      	it	le
 80097bc:	fb01 f909 	mulle.w	r9, r1, r9
 80097c0:	e7f5      	b.n	80097ae <_strtod_l+0x25e>
 80097c2:	2d10      	cmp	r5, #16
 80097c4:	bfdc      	itt	le
 80097c6:	230a      	movle	r3, #10
 80097c8:	fb03 2909 	mlale	r9, r3, r9, r2
 80097cc:	e7e1      	b.n	8009792 <_strtod_l+0x242>
 80097ce:	2300      	movs	r3, #0
 80097d0:	9305      	str	r3, [sp, #20]
 80097d2:	2301      	movs	r3, #1
 80097d4:	e77c      	b.n	80096d0 <_strtod_l+0x180>
 80097d6:	f04f 0c00 	mov.w	ip, #0
 80097da:	f108 0202 	add.w	r2, r8, #2
 80097de:	9217      	str	r2, [sp, #92]	; 0x5c
 80097e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80097e4:	e785      	b.n	80096f2 <_strtod_l+0x1a2>
 80097e6:	f04f 0c01 	mov.w	ip, #1
 80097ea:	e7f6      	b.n	80097da <_strtod_l+0x28a>
 80097ec:	0800f198 	.word	0x0800f198
 80097f0:	0800ef50 	.word	0x0800ef50
 80097f4:	7ff00000 	.word	0x7ff00000
 80097f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80097fa:	1c51      	adds	r1, r2, #1
 80097fc:	9117      	str	r1, [sp, #92]	; 0x5c
 80097fe:	7852      	ldrb	r2, [r2, #1]
 8009800:	2a30      	cmp	r2, #48	; 0x30
 8009802:	d0f9      	beq.n	80097f8 <_strtod_l+0x2a8>
 8009804:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009808:	2908      	cmp	r1, #8
 800980a:	f63f af79 	bhi.w	8009700 <_strtod_l+0x1b0>
 800980e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009812:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009814:	9206      	str	r2, [sp, #24]
 8009816:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009818:	1c51      	adds	r1, r2, #1
 800981a:	9117      	str	r1, [sp, #92]	; 0x5c
 800981c:	7852      	ldrb	r2, [r2, #1]
 800981e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009822:	2e09      	cmp	r6, #9
 8009824:	d937      	bls.n	8009896 <_strtod_l+0x346>
 8009826:	9e06      	ldr	r6, [sp, #24]
 8009828:	1b89      	subs	r1, r1, r6
 800982a:	2908      	cmp	r1, #8
 800982c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009830:	dc02      	bgt.n	8009838 <_strtod_l+0x2e8>
 8009832:	4576      	cmp	r6, lr
 8009834:	bfa8      	it	ge
 8009836:	4676      	movge	r6, lr
 8009838:	f1bc 0f00 	cmp.w	ip, #0
 800983c:	d000      	beq.n	8009840 <_strtod_l+0x2f0>
 800983e:	4276      	negs	r6, r6
 8009840:	2d00      	cmp	r5, #0
 8009842:	d14d      	bne.n	80098e0 <_strtod_l+0x390>
 8009844:	9904      	ldr	r1, [sp, #16]
 8009846:	4301      	orrs	r1, r0
 8009848:	f47f aec6 	bne.w	80095d8 <_strtod_l+0x88>
 800984c:	2b00      	cmp	r3, #0
 800984e:	f47f aee1 	bne.w	8009614 <_strtod_l+0xc4>
 8009852:	2a69      	cmp	r2, #105	; 0x69
 8009854:	d027      	beq.n	80098a6 <_strtod_l+0x356>
 8009856:	dc24      	bgt.n	80098a2 <_strtod_l+0x352>
 8009858:	2a49      	cmp	r2, #73	; 0x49
 800985a:	d024      	beq.n	80098a6 <_strtod_l+0x356>
 800985c:	2a4e      	cmp	r2, #78	; 0x4e
 800985e:	f47f aed9 	bne.w	8009614 <_strtod_l+0xc4>
 8009862:	499f      	ldr	r1, [pc, #636]	; (8009ae0 <_strtod_l+0x590>)
 8009864:	a817      	add	r0, sp, #92	; 0x5c
 8009866:	f001 fe61 	bl	800b52c <__match>
 800986a:	2800      	cmp	r0, #0
 800986c:	f43f aed2 	beq.w	8009614 <_strtod_l+0xc4>
 8009870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	2b28      	cmp	r3, #40	; 0x28
 8009876:	d12d      	bne.n	80098d4 <_strtod_l+0x384>
 8009878:	499a      	ldr	r1, [pc, #616]	; (8009ae4 <_strtod_l+0x594>)
 800987a:	aa1a      	add	r2, sp, #104	; 0x68
 800987c:	a817      	add	r0, sp, #92	; 0x5c
 800987e:	f001 fe69 	bl	800b554 <__hexnan>
 8009882:	2805      	cmp	r0, #5
 8009884:	d126      	bne.n	80098d4 <_strtod_l+0x384>
 8009886:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009888:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800988c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009890:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009894:	e6a0      	b.n	80095d8 <_strtod_l+0x88>
 8009896:	210a      	movs	r1, #10
 8009898:	fb01 2e0e 	mla	lr, r1, lr, r2
 800989c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80098a0:	e7b9      	b.n	8009816 <_strtod_l+0x2c6>
 80098a2:	2a6e      	cmp	r2, #110	; 0x6e
 80098a4:	e7db      	b.n	800985e <_strtod_l+0x30e>
 80098a6:	4990      	ldr	r1, [pc, #576]	; (8009ae8 <_strtod_l+0x598>)
 80098a8:	a817      	add	r0, sp, #92	; 0x5c
 80098aa:	f001 fe3f 	bl	800b52c <__match>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f43f aeb0 	beq.w	8009614 <_strtod_l+0xc4>
 80098b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098b6:	498d      	ldr	r1, [pc, #564]	; (8009aec <_strtod_l+0x59c>)
 80098b8:	3b01      	subs	r3, #1
 80098ba:	a817      	add	r0, sp, #92	; 0x5c
 80098bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80098be:	f001 fe35 	bl	800b52c <__match>
 80098c2:	b910      	cbnz	r0, 80098ca <_strtod_l+0x37a>
 80098c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098c6:	3301      	adds	r3, #1
 80098c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80098ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009afc <_strtod_l+0x5ac>
 80098ce:	f04f 0a00 	mov.w	sl, #0
 80098d2:	e681      	b.n	80095d8 <_strtod_l+0x88>
 80098d4:	4886      	ldr	r0, [pc, #536]	; (8009af0 <_strtod_l+0x5a0>)
 80098d6:	f003 f953 	bl	800cb80 <nan>
 80098da:	ec5b ab10 	vmov	sl, fp, d0
 80098de:	e67b      	b.n	80095d8 <_strtod_l+0x88>
 80098e0:	9b05      	ldr	r3, [sp, #20]
 80098e2:	9807      	ldr	r0, [sp, #28]
 80098e4:	1af3      	subs	r3, r6, r3
 80098e6:	2f00      	cmp	r7, #0
 80098e8:	bf08      	it	eq
 80098ea:	462f      	moveq	r7, r5
 80098ec:	2d10      	cmp	r5, #16
 80098ee:	9306      	str	r3, [sp, #24]
 80098f0:	46a8      	mov	r8, r5
 80098f2:	bfa8      	it	ge
 80098f4:	f04f 0810 	movge.w	r8, #16
 80098f8:	f7f6 fe14 	bl	8000524 <__aeabi_ui2d>
 80098fc:	2d09      	cmp	r5, #9
 80098fe:	4682      	mov	sl, r0
 8009900:	468b      	mov	fp, r1
 8009902:	dd13      	ble.n	800992c <_strtod_l+0x3dc>
 8009904:	4b7b      	ldr	r3, [pc, #492]	; (8009af4 <_strtod_l+0x5a4>)
 8009906:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800990a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800990e:	f7f6 fe83 	bl	8000618 <__aeabi_dmul>
 8009912:	4682      	mov	sl, r0
 8009914:	4648      	mov	r0, r9
 8009916:	468b      	mov	fp, r1
 8009918:	f7f6 fe04 	bl	8000524 <__aeabi_ui2d>
 800991c:	4602      	mov	r2, r0
 800991e:	460b      	mov	r3, r1
 8009920:	4650      	mov	r0, sl
 8009922:	4659      	mov	r1, fp
 8009924:	f7f6 fcc2 	bl	80002ac <__adddf3>
 8009928:	4682      	mov	sl, r0
 800992a:	468b      	mov	fp, r1
 800992c:	2d0f      	cmp	r5, #15
 800992e:	dc38      	bgt.n	80099a2 <_strtod_l+0x452>
 8009930:	9b06      	ldr	r3, [sp, #24]
 8009932:	2b00      	cmp	r3, #0
 8009934:	f43f ae50 	beq.w	80095d8 <_strtod_l+0x88>
 8009938:	dd24      	ble.n	8009984 <_strtod_l+0x434>
 800993a:	2b16      	cmp	r3, #22
 800993c:	dc0b      	bgt.n	8009956 <_strtod_l+0x406>
 800993e:	496d      	ldr	r1, [pc, #436]	; (8009af4 <_strtod_l+0x5a4>)
 8009940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009948:	4652      	mov	r2, sl
 800994a:	465b      	mov	r3, fp
 800994c:	f7f6 fe64 	bl	8000618 <__aeabi_dmul>
 8009950:	4682      	mov	sl, r0
 8009952:	468b      	mov	fp, r1
 8009954:	e640      	b.n	80095d8 <_strtod_l+0x88>
 8009956:	9a06      	ldr	r2, [sp, #24]
 8009958:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800995c:	4293      	cmp	r3, r2
 800995e:	db20      	blt.n	80099a2 <_strtod_l+0x452>
 8009960:	4c64      	ldr	r4, [pc, #400]	; (8009af4 <_strtod_l+0x5a4>)
 8009962:	f1c5 050f 	rsb	r5, r5, #15
 8009966:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800996a:	4652      	mov	r2, sl
 800996c:	465b      	mov	r3, fp
 800996e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009972:	f7f6 fe51 	bl	8000618 <__aeabi_dmul>
 8009976:	9b06      	ldr	r3, [sp, #24]
 8009978:	1b5d      	subs	r5, r3, r5
 800997a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800997e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009982:	e7e3      	b.n	800994c <_strtod_l+0x3fc>
 8009984:	9b06      	ldr	r3, [sp, #24]
 8009986:	3316      	adds	r3, #22
 8009988:	db0b      	blt.n	80099a2 <_strtod_l+0x452>
 800998a:	9b05      	ldr	r3, [sp, #20]
 800998c:	1b9e      	subs	r6, r3, r6
 800998e:	4b59      	ldr	r3, [pc, #356]	; (8009af4 <_strtod_l+0x5a4>)
 8009990:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009994:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009998:	4650      	mov	r0, sl
 800999a:	4659      	mov	r1, fp
 800999c:	f7f6 ff66 	bl	800086c <__aeabi_ddiv>
 80099a0:	e7d6      	b.n	8009950 <_strtod_l+0x400>
 80099a2:	9b06      	ldr	r3, [sp, #24]
 80099a4:	eba5 0808 	sub.w	r8, r5, r8
 80099a8:	4498      	add	r8, r3
 80099aa:	f1b8 0f00 	cmp.w	r8, #0
 80099ae:	dd74      	ble.n	8009a9a <_strtod_l+0x54a>
 80099b0:	f018 030f 	ands.w	r3, r8, #15
 80099b4:	d00a      	beq.n	80099cc <_strtod_l+0x47c>
 80099b6:	494f      	ldr	r1, [pc, #316]	; (8009af4 <_strtod_l+0x5a4>)
 80099b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099bc:	4652      	mov	r2, sl
 80099be:	465b      	mov	r3, fp
 80099c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099c4:	f7f6 fe28 	bl	8000618 <__aeabi_dmul>
 80099c8:	4682      	mov	sl, r0
 80099ca:	468b      	mov	fp, r1
 80099cc:	f038 080f 	bics.w	r8, r8, #15
 80099d0:	d04f      	beq.n	8009a72 <_strtod_l+0x522>
 80099d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80099d6:	dd22      	ble.n	8009a1e <_strtod_l+0x4ce>
 80099d8:	2500      	movs	r5, #0
 80099da:	462e      	mov	r6, r5
 80099dc:	9507      	str	r5, [sp, #28]
 80099de:	9505      	str	r5, [sp, #20]
 80099e0:	2322      	movs	r3, #34	; 0x22
 80099e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009afc <_strtod_l+0x5ac>
 80099e6:	6023      	str	r3, [r4, #0]
 80099e8:	f04f 0a00 	mov.w	sl, #0
 80099ec:	9b07      	ldr	r3, [sp, #28]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f43f adf2 	beq.w	80095d8 <_strtod_l+0x88>
 80099f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099f6:	4620      	mov	r0, r4
 80099f8:	f001 feb8 	bl	800b76c <_Bfree>
 80099fc:	9905      	ldr	r1, [sp, #20]
 80099fe:	4620      	mov	r0, r4
 8009a00:	f001 feb4 	bl	800b76c <_Bfree>
 8009a04:	4631      	mov	r1, r6
 8009a06:	4620      	mov	r0, r4
 8009a08:	f001 feb0 	bl	800b76c <_Bfree>
 8009a0c:	9907      	ldr	r1, [sp, #28]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f001 feac 	bl	800b76c <_Bfree>
 8009a14:	4629      	mov	r1, r5
 8009a16:	4620      	mov	r0, r4
 8009a18:	f001 fea8 	bl	800b76c <_Bfree>
 8009a1c:	e5dc      	b.n	80095d8 <_strtod_l+0x88>
 8009a1e:	4b36      	ldr	r3, [pc, #216]	; (8009af8 <_strtod_l+0x5a8>)
 8009a20:	9304      	str	r3, [sp, #16]
 8009a22:	2300      	movs	r3, #0
 8009a24:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009a28:	4650      	mov	r0, sl
 8009a2a:	4659      	mov	r1, fp
 8009a2c:	4699      	mov	r9, r3
 8009a2e:	f1b8 0f01 	cmp.w	r8, #1
 8009a32:	dc21      	bgt.n	8009a78 <_strtod_l+0x528>
 8009a34:	b10b      	cbz	r3, 8009a3a <_strtod_l+0x4ea>
 8009a36:	4682      	mov	sl, r0
 8009a38:	468b      	mov	fp, r1
 8009a3a:	4b2f      	ldr	r3, [pc, #188]	; (8009af8 <_strtod_l+0x5a8>)
 8009a3c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009a40:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009a44:	4652      	mov	r2, sl
 8009a46:	465b      	mov	r3, fp
 8009a48:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009a4c:	f7f6 fde4 	bl	8000618 <__aeabi_dmul>
 8009a50:	4b2a      	ldr	r3, [pc, #168]	; (8009afc <_strtod_l+0x5ac>)
 8009a52:	460a      	mov	r2, r1
 8009a54:	400b      	ands	r3, r1
 8009a56:	492a      	ldr	r1, [pc, #168]	; (8009b00 <_strtod_l+0x5b0>)
 8009a58:	428b      	cmp	r3, r1
 8009a5a:	4682      	mov	sl, r0
 8009a5c:	d8bc      	bhi.n	80099d8 <_strtod_l+0x488>
 8009a5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009a62:	428b      	cmp	r3, r1
 8009a64:	bf86      	itte	hi
 8009a66:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009b04 <_strtod_l+0x5b4>
 8009a6a:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009a72:	2300      	movs	r3, #0
 8009a74:	9304      	str	r3, [sp, #16]
 8009a76:	e084      	b.n	8009b82 <_strtod_l+0x632>
 8009a78:	f018 0f01 	tst.w	r8, #1
 8009a7c:	d005      	beq.n	8009a8a <_strtod_l+0x53a>
 8009a7e:	9b04      	ldr	r3, [sp, #16]
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	f7f6 fdc8 	bl	8000618 <__aeabi_dmul>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	9a04      	ldr	r2, [sp, #16]
 8009a8c:	3208      	adds	r2, #8
 8009a8e:	f109 0901 	add.w	r9, r9, #1
 8009a92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009a96:	9204      	str	r2, [sp, #16]
 8009a98:	e7c9      	b.n	8009a2e <_strtod_l+0x4de>
 8009a9a:	d0ea      	beq.n	8009a72 <_strtod_l+0x522>
 8009a9c:	f1c8 0800 	rsb	r8, r8, #0
 8009aa0:	f018 020f 	ands.w	r2, r8, #15
 8009aa4:	d00a      	beq.n	8009abc <_strtod_l+0x56c>
 8009aa6:	4b13      	ldr	r3, [pc, #76]	; (8009af4 <_strtod_l+0x5a4>)
 8009aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aac:	4650      	mov	r0, sl
 8009aae:	4659      	mov	r1, fp
 8009ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab4:	f7f6 feda 	bl	800086c <__aeabi_ddiv>
 8009ab8:	4682      	mov	sl, r0
 8009aba:	468b      	mov	fp, r1
 8009abc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009ac0:	d0d7      	beq.n	8009a72 <_strtod_l+0x522>
 8009ac2:	f1b8 0f1f 	cmp.w	r8, #31
 8009ac6:	dd1f      	ble.n	8009b08 <_strtod_l+0x5b8>
 8009ac8:	2500      	movs	r5, #0
 8009aca:	462e      	mov	r6, r5
 8009acc:	9507      	str	r5, [sp, #28]
 8009ace:	9505      	str	r5, [sp, #20]
 8009ad0:	2322      	movs	r3, #34	; 0x22
 8009ad2:	f04f 0a00 	mov.w	sl, #0
 8009ad6:	f04f 0b00 	mov.w	fp, #0
 8009ada:	6023      	str	r3, [r4, #0]
 8009adc:	e786      	b.n	80099ec <_strtod_l+0x49c>
 8009ade:	bf00      	nop
 8009ae0:	0800ef25 	.word	0x0800ef25
 8009ae4:	0800ef64 	.word	0x0800ef64
 8009ae8:	0800ef1d 	.word	0x0800ef1d
 8009aec:	0800f0a4 	.word	0x0800f0a4
 8009af0:	0800f36b 	.word	0x0800f36b
 8009af4:	0800f230 	.word	0x0800f230
 8009af8:	0800f208 	.word	0x0800f208
 8009afc:	7ff00000 	.word	0x7ff00000
 8009b00:	7ca00000 	.word	0x7ca00000
 8009b04:	7fefffff 	.word	0x7fefffff
 8009b08:	f018 0310 	ands.w	r3, r8, #16
 8009b0c:	bf18      	it	ne
 8009b0e:	236a      	movne	r3, #106	; 0x6a
 8009b10:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009ec0 <_strtod_l+0x970>
 8009b14:	9304      	str	r3, [sp, #16]
 8009b16:	4650      	mov	r0, sl
 8009b18:	4659      	mov	r1, fp
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f018 0f01 	tst.w	r8, #1
 8009b20:	d004      	beq.n	8009b2c <_strtod_l+0x5dc>
 8009b22:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009b26:	f7f6 fd77 	bl	8000618 <__aeabi_dmul>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009b30:	f109 0908 	add.w	r9, r9, #8
 8009b34:	d1f2      	bne.n	8009b1c <_strtod_l+0x5cc>
 8009b36:	b10b      	cbz	r3, 8009b3c <_strtod_l+0x5ec>
 8009b38:	4682      	mov	sl, r0
 8009b3a:	468b      	mov	fp, r1
 8009b3c:	9b04      	ldr	r3, [sp, #16]
 8009b3e:	b1c3      	cbz	r3, 8009b72 <_strtod_l+0x622>
 8009b40:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	4659      	mov	r1, fp
 8009b4c:	dd11      	ble.n	8009b72 <_strtod_l+0x622>
 8009b4e:	2b1f      	cmp	r3, #31
 8009b50:	f340 8124 	ble.w	8009d9c <_strtod_l+0x84c>
 8009b54:	2b34      	cmp	r3, #52	; 0x34
 8009b56:	bfde      	ittt	le
 8009b58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009b5c:	f04f 33ff 	movle.w	r3, #4294967295
 8009b60:	fa03 f202 	lslle.w	r2, r3, r2
 8009b64:	f04f 0a00 	mov.w	sl, #0
 8009b68:	bfcc      	ite	gt
 8009b6a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009b6e:	ea02 0b01 	andle.w	fp, r2, r1
 8009b72:	2200      	movs	r2, #0
 8009b74:	2300      	movs	r3, #0
 8009b76:	4650      	mov	r0, sl
 8009b78:	4659      	mov	r1, fp
 8009b7a:	f7f6 ffb5 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d1a2      	bne.n	8009ac8 <_strtod_l+0x578>
 8009b82:	9b07      	ldr	r3, [sp, #28]
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	9908      	ldr	r1, [sp, #32]
 8009b88:	462b      	mov	r3, r5
 8009b8a:	463a      	mov	r2, r7
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f001 fe55 	bl	800b83c <__s2b>
 8009b92:	9007      	str	r0, [sp, #28]
 8009b94:	2800      	cmp	r0, #0
 8009b96:	f43f af1f 	beq.w	80099d8 <_strtod_l+0x488>
 8009b9a:	9b05      	ldr	r3, [sp, #20]
 8009b9c:	1b9e      	subs	r6, r3, r6
 8009b9e:	9b06      	ldr	r3, [sp, #24]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	bfb4      	ite	lt
 8009ba4:	4633      	movlt	r3, r6
 8009ba6:	2300      	movge	r3, #0
 8009ba8:	930c      	str	r3, [sp, #48]	; 0x30
 8009baa:	9b06      	ldr	r3, [sp, #24]
 8009bac:	2500      	movs	r5, #0
 8009bae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009bb2:	9312      	str	r3, [sp, #72]	; 0x48
 8009bb4:	462e      	mov	r6, r5
 8009bb6:	9b07      	ldr	r3, [sp, #28]
 8009bb8:	4620      	mov	r0, r4
 8009bba:	6859      	ldr	r1, [r3, #4]
 8009bbc:	f001 fd96 	bl	800b6ec <_Balloc>
 8009bc0:	9005      	str	r0, [sp, #20]
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	f43f af0c 	beq.w	80099e0 <_strtod_l+0x490>
 8009bc8:	9b07      	ldr	r3, [sp, #28]
 8009bca:	691a      	ldr	r2, [r3, #16]
 8009bcc:	3202      	adds	r2, #2
 8009bce:	f103 010c 	add.w	r1, r3, #12
 8009bd2:	0092      	lsls	r2, r2, #2
 8009bd4:	300c      	adds	r0, #12
 8009bd6:	f7fe fd77 	bl	80086c8 <memcpy>
 8009bda:	ec4b ab10 	vmov	d0, sl, fp
 8009bde:	aa1a      	add	r2, sp, #104	; 0x68
 8009be0:	a919      	add	r1, sp, #100	; 0x64
 8009be2:	4620      	mov	r0, r4
 8009be4:	f002 f970 	bl	800bec8 <__d2b>
 8009be8:	ec4b ab18 	vmov	d8, sl, fp
 8009bec:	9018      	str	r0, [sp, #96]	; 0x60
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	f43f aef6 	beq.w	80099e0 <_strtod_l+0x490>
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f001 feba 	bl	800b970 <__i2b>
 8009bfc:	4606      	mov	r6, r0
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	f43f aeee 	beq.w	80099e0 <_strtod_l+0x490>
 8009c04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c06:	9904      	ldr	r1, [sp, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	bfab      	itete	ge
 8009c0c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009c0e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009c10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009c12:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009c16:	bfac      	ite	ge
 8009c18:	eb03 0902 	addge.w	r9, r3, r2
 8009c1c:	1ad7      	sublt	r7, r2, r3
 8009c1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c20:	eba3 0801 	sub.w	r8, r3, r1
 8009c24:	4490      	add	r8, r2
 8009c26:	4ba1      	ldr	r3, [pc, #644]	; (8009eac <_strtod_l+0x95c>)
 8009c28:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c2c:	4598      	cmp	r8, r3
 8009c2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c32:	f280 80c7 	bge.w	8009dc4 <_strtod_l+0x874>
 8009c36:	eba3 0308 	sub.w	r3, r3, r8
 8009c3a:	2b1f      	cmp	r3, #31
 8009c3c:	eba2 0203 	sub.w	r2, r2, r3
 8009c40:	f04f 0101 	mov.w	r1, #1
 8009c44:	f300 80b1 	bgt.w	8009daa <_strtod_l+0x85a>
 8009c48:	fa01 f303 	lsl.w	r3, r1, r3
 8009c4c:	930d      	str	r3, [sp, #52]	; 0x34
 8009c4e:	2300      	movs	r3, #0
 8009c50:	9308      	str	r3, [sp, #32]
 8009c52:	eb09 0802 	add.w	r8, r9, r2
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	45c1      	cmp	r9, r8
 8009c5a:	4417      	add	r7, r2
 8009c5c:	441f      	add	r7, r3
 8009c5e:	464b      	mov	r3, r9
 8009c60:	bfa8      	it	ge
 8009c62:	4643      	movge	r3, r8
 8009c64:	42bb      	cmp	r3, r7
 8009c66:	bfa8      	it	ge
 8009c68:	463b      	movge	r3, r7
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	bfc2      	ittt	gt
 8009c6e:	eba8 0803 	subgt.w	r8, r8, r3
 8009c72:	1aff      	subgt	r7, r7, r3
 8009c74:	eba9 0903 	subgt.w	r9, r9, r3
 8009c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	dd17      	ble.n	8009cae <_strtod_l+0x75e>
 8009c7e:	4631      	mov	r1, r6
 8009c80:	461a      	mov	r2, r3
 8009c82:	4620      	mov	r0, r4
 8009c84:	f001 ff34 	bl	800baf0 <__pow5mult>
 8009c88:	4606      	mov	r6, r0
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	f43f aea8 	beq.w	80099e0 <_strtod_l+0x490>
 8009c90:	4601      	mov	r1, r0
 8009c92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009c94:	4620      	mov	r0, r4
 8009c96:	f001 fe81 	bl	800b99c <__multiply>
 8009c9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	f43f ae9f 	beq.w	80099e0 <_strtod_l+0x490>
 8009ca2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f001 fd61 	bl	800b76c <_Bfree>
 8009caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cac:	9318      	str	r3, [sp, #96]	; 0x60
 8009cae:	f1b8 0f00 	cmp.w	r8, #0
 8009cb2:	f300 808c 	bgt.w	8009dce <_strtod_l+0x87e>
 8009cb6:	9b06      	ldr	r3, [sp, #24]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dd08      	ble.n	8009cce <_strtod_l+0x77e>
 8009cbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cbe:	9905      	ldr	r1, [sp, #20]
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f001 ff15 	bl	800baf0 <__pow5mult>
 8009cc6:	9005      	str	r0, [sp, #20]
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	f43f ae89 	beq.w	80099e0 <_strtod_l+0x490>
 8009cce:	2f00      	cmp	r7, #0
 8009cd0:	dd08      	ble.n	8009ce4 <_strtod_l+0x794>
 8009cd2:	9905      	ldr	r1, [sp, #20]
 8009cd4:	463a      	mov	r2, r7
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f001 ff64 	bl	800bba4 <__lshift>
 8009cdc:	9005      	str	r0, [sp, #20]
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f43f ae7e 	beq.w	80099e0 <_strtod_l+0x490>
 8009ce4:	f1b9 0f00 	cmp.w	r9, #0
 8009ce8:	dd08      	ble.n	8009cfc <_strtod_l+0x7ac>
 8009cea:	4631      	mov	r1, r6
 8009cec:	464a      	mov	r2, r9
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f001 ff58 	bl	800bba4 <__lshift>
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	f43f ae72 	beq.w	80099e0 <_strtod_l+0x490>
 8009cfc:	9a05      	ldr	r2, [sp, #20]
 8009cfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d00:	4620      	mov	r0, r4
 8009d02:	f001 ffdb 	bl	800bcbc <__mdiff>
 8009d06:	4605      	mov	r5, r0
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	f43f ae69 	beq.w	80099e0 <_strtod_l+0x490>
 8009d0e:	68c3      	ldr	r3, [r0, #12]
 8009d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d12:	2300      	movs	r3, #0
 8009d14:	60c3      	str	r3, [r0, #12]
 8009d16:	4631      	mov	r1, r6
 8009d18:	f001 ffb4 	bl	800bc84 <__mcmp>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	da60      	bge.n	8009de2 <_strtod_l+0x892>
 8009d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d22:	ea53 030a 	orrs.w	r3, r3, sl
 8009d26:	f040 8082 	bne.w	8009e2e <_strtod_l+0x8de>
 8009d2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d17d      	bne.n	8009e2e <_strtod_l+0x8de>
 8009d32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d36:	0d1b      	lsrs	r3, r3, #20
 8009d38:	051b      	lsls	r3, r3, #20
 8009d3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009d3e:	d976      	bls.n	8009e2e <_strtod_l+0x8de>
 8009d40:	696b      	ldr	r3, [r5, #20]
 8009d42:	b913      	cbnz	r3, 8009d4a <_strtod_l+0x7fa>
 8009d44:	692b      	ldr	r3, [r5, #16]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	dd71      	ble.n	8009e2e <_strtod_l+0x8de>
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f001 ff28 	bl	800bba4 <__lshift>
 8009d54:	4631      	mov	r1, r6
 8009d56:	4605      	mov	r5, r0
 8009d58:	f001 ff94 	bl	800bc84 <__mcmp>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	dd66      	ble.n	8009e2e <_strtod_l+0x8de>
 8009d60:	9904      	ldr	r1, [sp, #16]
 8009d62:	4a53      	ldr	r2, [pc, #332]	; (8009eb0 <_strtod_l+0x960>)
 8009d64:	465b      	mov	r3, fp
 8009d66:	2900      	cmp	r1, #0
 8009d68:	f000 8081 	beq.w	8009e6e <_strtod_l+0x91e>
 8009d6c:	ea02 010b 	and.w	r1, r2, fp
 8009d70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009d74:	dc7b      	bgt.n	8009e6e <_strtod_l+0x91e>
 8009d76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009d7a:	f77f aea9 	ble.w	8009ad0 <_strtod_l+0x580>
 8009d7e:	4b4d      	ldr	r3, [pc, #308]	; (8009eb4 <_strtod_l+0x964>)
 8009d80:	4650      	mov	r0, sl
 8009d82:	4659      	mov	r1, fp
 8009d84:	2200      	movs	r2, #0
 8009d86:	f7f6 fc47 	bl	8000618 <__aeabi_dmul>
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4303      	orrs	r3, r0
 8009d8e:	bf08      	it	eq
 8009d90:	2322      	moveq	r3, #34	; 0x22
 8009d92:	4682      	mov	sl, r0
 8009d94:	468b      	mov	fp, r1
 8009d96:	bf08      	it	eq
 8009d98:	6023      	streq	r3, [r4, #0]
 8009d9a:	e62b      	b.n	80099f4 <_strtod_l+0x4a4>
 8009d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009da0:	fa02 f303 	lsl.w	r3, r2, r3
 8009da4:	ea03 0a0a 	and.w	sl, r3, sl
 8009da8:	e6e3      	b.n	8009b72 <_strtod_l+0x622>
 8009daa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009dae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009db2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009db6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009dba:	fa01 f308 	lsl.w	r3, r1, r8
 8009dbe:	9308      	str	r3, [sp, #32]
 8009dc0:	910d      	str	r1, [sp, #52]	; 0x34
 8009dc2:	e746      	b.n	8009c52 <_strtod_l+0x702>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	9308      	str	r3, [sp, #32]
 8009dc8:	2301      	movs	r3, #1
 8009dca:	930d      	str	r3, [sp, #52]	; 0x34
 8009dcc:	e741      	b.n	8009c52 <_strtod_l+0x702>
 8009dce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009dd0:	4642      	mov	r2, r8
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f001 fee6 	bl	800bba4 <__lshift>
 8009dd8:	9018      	str	r0, [sp, #96]	; 0x60
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	f47f af6b 	bne.w	8009cb6 <_strtod_l+0x766>
 8009de0:	e5fe      	b.n	80099e0 <_strtod_l+0x490>
 8009de2:	465f      	mov	r7, fp
 8009de4:	d16e      	bne.n	8009ec4 <_strtod_l+0x974>
 8009de6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009de8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dec:	b342      	cbz	r2, 8009e40 <_strtod_l+0x8f0>
 8009dee:	4a32      	ldr	r2, [pc, #200]	; (8009eb8 <_strtod_l+0x968>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d128      	bne.n	8009e46 <_strtod_l+0x8f6>
 8009df4:	9b04      	ldr	r3, [sp, #16]
 8009df6:	4651      	mov	r1, sl
 8009df8:	b1eb      	cbz	r3, 8009e36 <_strtod_l+0x8e6>
 8009dfa:	4b2d      	ldr	r3, [pc, #180]	; (8009eb0 <_strtod_l+0x960>)
 8009dfc:	403b      	ands	r3, r7
 8009dfe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e02:	f04f 32ff 	mov.w	r2, #4294967295
 8009e06:	d819      	bhi.n	8009e3c <_strtod_l+0x8ec>
 8009e08:	0d1b      	lsrs	r3, r3, #20
 8009e0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e12:	4299      	cmp	r1, r3
 8009e14:	d117      	bne.n	8009e46 <_strtod_l+0x8f6>
 8009e16:	4b29      	ldr	r3, [pc, #164]	; (8009ebc <_strtod_l+0x96c>)
 8009e18:	429f      	cmp	r7, r3
 8009e1a:	d102      	bne.n	8009e22 <_strtod_l+0x8d2>
 8009e1c:	3101      	adds	r1, #1
 8009e1e:	f43f addf 	beq.w	80099e0 <_strtod_l+0x490>
 8009e22:	4b23      	ldr	r3, [pc, #140]	; (8009eb0 <_strtod_l+0x960>)
 8009e24:	403b      	ands	r3, r7
 8009e26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009e2a:	f04f 0a00 	mov.w	sl, #0
 8009e2e:	9b04      	ldr	r3, [sp, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1a4      	bne.n	8009d7e <_strtod_l+0x82e>
 8009e34:	e5de      	b.n	80099f4 <_strtod_l+0x4a4>
 8009e36:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3a:	e7ea      	b.n	8009e12 <_strtod_l+0x8c2>
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	e7e8      	b.n	8009e12 <_strtod_l+0x8c2>
 8009e40:	ea53 030a 	orrs.w	r3, r3, sl
 8009e44:	d08c      	beq.n	8009d60 <_strtod_l+0x810>
 8009e46:	9b08      	ldr	r3, [sp, #32]
 8009e48:	b1db      	cbz	r3, 8009e82 <_strtod_l+0x932>
 8009e4a:	423b      	tst	r3, r7
 8009e4c:	d0ef      	beq.n	8009e2e <_strtod_l+0x8de>
 8009e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e50:	9a04      	ldr	r2, [sp, #16]
 8009e52:	4650      	mov	r0, sl
 8009e54:	4659      	mov	r1, fp
 8009e56:	b1c3      	cbz	r3, 8009e8a <_strtod_l+0x93a>
 8009e58:	f7ff fb5d 	bl	8009516 <sulp>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	ec51 0b18 	vmov	r0, r1, d8
 8009e64:	f7f6 fa22 	bl	80002ac <__adddf3>
 8009e68:	4682      	mov	sl, r0
 8009e6a:	468b      	mov	fp, r1
 8009e6c:	e7df      	b.n	8009e2e <_strtod_l+0x8de>
 8009e6e:	4013      	ands	r3, r2
 8009e70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009e74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e7c:	f04f 3aff 	mov.w	sl, #4294967295
 8009e80:	e7d5      	b.n	8009e2e <_strtod_l+0x8de>
 8009e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e84:	ea13 0f0a 	tst.w	r3, sl
 8009e88:	e7e0      	b.n	8009e4c <_strtod_l+0x8fc>
 8009e8a:	f7ff fb44 	bl	8009516 <sulp>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	ec51 0b18 	vmov	r0, r1, d8
 8009e96:	f7f6 fa07 	bl	80002a8 <__aeabi_dsub>
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4682      	mov	sl, r0
 8009ea0:	468b      	mov	fp, r1
 8009ea2:	f7f6 fe21 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d0c1      	beq.n	8009e2e <_strtod_l+0x8de>
 8009eaa:	e611      	b.n	8009ad0 <_strtod_l+0x580>
 8009eac:	fffffc02 	.word	0xfffffc02
 8009eb0:	7ff00000 	.word	0x7ff00000
 8009eb4:	39500000 	.word	0x39500000
 8009eb8:	000fffff 	.word	0x000fffff
 8009ebc:	7fefffff 	.word	0x7fefffff
 8009ec0:	0800ef78 	.word	0x0800ef78
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f002 f85a 	bl	800bf80 <__ratio>
 8009ecc:	ec59 8b10 	vmov	r8, r9, d0
 8009ed0:	ee10 0a10 	vmov	r0, s0
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009eda:	4649      	mov	r1, r9
 8009edc:	f7f6 fe18 	bl	8000b10 <__aeabi_dcmple>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d07a      	beq.n	8009fda <_strtod_l+0xa8a>
 8009ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d04a      	beq.n	8009f80 <_strtod_l+0xa30>
 8009eea:	4b95      	ldr	r3, [pc, #596]	; (800a140 <_strtod_l+0xbf0>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ef2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a140 <_strtod_l+0xbf0>
 8009ef6:	f04f 0800 	mov.w	r8, #0
 8009efa:	4b92      	ldr	r3, [pc, #584]	; (800a144 <_strtod_l+0xbf4>)
 8009efc:	403b      	ands	r3, r7
 8009efe:	930d      	str	r3, [sp, #52]	; 0x34
 8009f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f02:	4b91      	ldr	r3, [pc, #580]	; (800a148 <_strtod_l+0xbf8>)
 8009f04:	429a      	cmp	r2, r3
 8009f06:	f040 80b0 	bne.w	800a06a <_strtod_l+0xb1a>
 8009f0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009f12:	ec4b ab10 	vmov	d0, sl, fp
 8009f16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f1a:	f001 ff59 	bl	800bdd0 <__ulp>
 8009f1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f22:	ec53 2b10 	vmov	r2, r3, d0
 8009f26:	f7f6 fb77 	bl	8000618 <__aeabi_dmul>
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	465b      	mov	r3, fp
 8009f2e:	f7f6 f9bd 	bl	80002ac <__adddf3>
 8009f32:	460b      	mov	r3, r1
 8009f34:	4983      	ldr	r1, [pc, #524]	; (800a144 <_strtod_l+0xbf4>)
 8009f36:	4a85      	ldr	r2, [pc, #532]	; (800a14c <_strtod_l+0xbfc>)
 8009f38:	4019      	ands	r1, r3
 8009f3a:	4291      	cmp	r1, r2
 8009f3c:	4682      	mov	sl, r0
 8009f3e:	d960      	bls.n	800a002 <_strtod_l+0xab2>
 8009f40:	ee18 3a90 	vmov	r3, s17
 8009f44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d104      	bne.n	8009f56 <_strtod_l+0xa06>
 8009f4c:	ee18 3a10 	vmov	r3, s16
 8009f50:	3301      	adds	r3, #1
 8009f52:	f43f ad45 	beq.w	80099e0 <_strtod_l+0x490>
 8009f56:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a158 <_strtod_l+0xc08>
 8009f5a:	f04f 3aff 	mov.w	sl, #4294967295
 8009f5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f60:	4620      	mov	r0, r4
 8009f62:	f001 fc03 	bl	800b76c <_Bfree>
 8009f66:	9905      	ldr	r1, [sp, #20]
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f001 fbff 	bl	800b76c <_Bfree>
 8009f6e:	4631      	mov	r1, r6
 8009f70:	4620      	mov	r0, r4
 8009f72:	f001 fbfb 	bl	800b76c <_Bfree>
 8009f76:	4629      	mov	r1, r5
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f001 fbf7 	bl	800b76c <_Bfree>
 8009f7e:	e61a      	b.n	8009bb6 <_strtod_l+0x666>
 8009f80:	f1ba 0f00 	cmp.w	sl, #0
 8009f84:	d11b      	bne.n	8009fbe <_strtod_l+0xa6e>
 8009f86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f8a:	b9f3      	cbnz	r3, 8009fca <_strtod_l+0xa7a>
 8009f8c:	4b6c      	ldr	r3, [pc, #432]	; (800a140 <_strtod_l+0xbf0>)
 8009f8e:	2200      	movs	r2, #0
 8009f90:	4640      	mov	r0, r8
 8009f92:	4649      	mov	r1, r9
 8009f94:	f7f6 fdb2 	bl	8000afc <__aeabi_dcmplt>
 8009f98:	b9d0      	cbnz	r0, 8009fd0 <_strtod_l+0xa80>
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	4649      	mov	r1, r9
 8009f9e:	4b6c      	ldr	r3, [pc, #432]	; (800a150 <_strtod_l+0xc00>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f7f6 fb39 	bl	8000618 <__aeabi_dmul>
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	4689      	mov	r9, r1
 8009faa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009fae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009fb2:	9315      	str	r3, [sp, #84]	; 0x54
 8009fb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009fb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009fbc:	e79d      	b.n	8009efa <_strtod_l+0x9aa>
 8009fbe:	f1ba 0f01 	cmp.w	sl, #1
 8009fc2:	d102      	bne.n	8009fca <_strtod_l+0xa7a>
 8009fc4:	2f00      	cmp	r7, #0
 8009fc6:	f43f ad83 	beq.w	8009ad0 <_strtod_l+0x580>
 8009fca:	4b62      	ldr	r3, [pc, #392]	; (800a154 <_strtod_l+0xc04>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	e78e      	b.n	8009eee <_strtod_l+0x99e>
 8009fd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a150 <_strtod_l+0xc00>
 8009fd4:	f04f 0800 	mov.w	r8, #0
 8009fd8:	e7e7      	b.n	8009faa <_strtod_l+0xa5a>
 8009fda:	4b5d      	ldr	r3, [pc, #372]	; (800a150 <_strtod_l+0xc00>)
 8009fdc:	4640      	mov	r0, r8
 8009fde:	4649      	mov	r1, r9
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f7f6 fb19 	bl	8000618 <__aeabi_dmul>
 8009fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe8:	4680      	mov	r8, r0
 8009fea:	4689      	mov	r9, r1
 8009fec:	b933      	cbnz	r3, 8009ffc <_strtod_l+0xaac>
 8009fee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ff2:	900e      	str	r0, [sp, #56]	; 0x38
 8009ff4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ff6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009ffa:	e7dd      	b.n	8009fb8 <_strtod_l+0xa68>
 8009ffc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a000:	e7f9      	b.n	8009ff6 <_strtod_l+0xaa6>
 800a002:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a006:	9b04      	ldr	r3, [sp, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1a8      	bne.n	8009f5e <_strtod_l+0xa0e>
 800a00c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a012:	0d1b      	lsrs	r3, r3, #20
 800a014:	051b      	lsls	r3, r3, #20
 800a016:	429a      	cmp	r2, r3
 800a018:	d1a1      	bne.n	8009f5e <_strtod_l+0xa0e>
 800a01a:	4640      	mov	r0, r8
 800a01c:	4649      	mov	r1, r9
 800a01e:	f7f6 fe5b 	bl	8000cd8 <__aeabi_d2lz>
 800a022:	f7f6 facb 	bl	80005bc <__aeabi_l2d>
 800a026:	4602      	mov	r2, r0
 800a028:	460b      	mov	r3, r1
 800a02a:	4640      	mov	r0, r8
 800a02c:	4649      	mov	r1, r9
 800a02e:	f7f6 f93b 	bl	80002a8 <__aeabi_dsub>
 800a032:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a038:	ea43 030a 	orr.w	r3, r3, sl
 800a03c:	4313      	orrs	r3, r2
 800a03e:	4680      	mov	r8, r0
 800a040:	4689      	mov	r9, r1
 800a042:	d055      	beq.n	800a0f0 <_strtod_l+0xba0>
 800a044:	a336      	add	r3, pc, #216	; (adr r3, 800a120 <_strtod_l+0xbd0>)
 800a046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04a:	f7f6 fd57 	bl	8000afc <__aeabi_dcmplt>
 800a04e:	2800      	cmp	r0, #0
 800a050:	f47f acd0 	bne.w	80099f4 <_strtod_l+0x4a4>
 800a054:	a334      	add	r3, pc, #208	; (adr r3, 800a128 <_strtod_l+0xbd8>)
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	4640      	mov	r0, r8
 800a05c:	4649      	mov	r1, r9
 800a05e:	f7f6 fd6b 	bl	8000b38 <__aeabi_dcmpgt>
 800a062:	2800      	cmp	r0, #0
 800a064:	f43f af7b 	beq.w	8009f5e <_strtod_l+0xa0e>
 800a068:	e4c4      	b.n	80099f4 <_strtod_l+0x4a4>
 800a06a:	9b04      	ldr	r3, [sp, #16]
 800a06c:	b333      	cbz	r3, 800a0bc <_strtod_l+0xb6c>
 800a06e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a070:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a074:	d822      	bhi.n	800a0bc <_strtod_l+0xb6c>
 800a076:	a32e      	add	r3, pc, #184	; (adr r3, 800a130 <_strtod_l+0xbe0>)
 800a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07c:	4640      	mov	r0, r8
 800a07e:	4649      	mov	r1, r9
 800a080:	f7f6 fd46 	bl	8000b10 <__aeabi_dcmple>
 800a084:	b1a0      	cbz	r0, 800a0b0 <_strtod_l+0xb60>
 800a086:	4649      	mov	r1, r9
 800a088:	4640      	mov	r0, r8
 800a08a:	f7f6 fd9d 	bl	8000bc8 <__aeabi_d2uiz>
 800a08e:	2801      	cmp	r0, #1
 800a090:	bf38      	it	cc
 800a092:	2001      	movcc	r0, #1
 800a094:	f7f6 fa46 	bl	8000524 <__aeabi_ui2d>
 800a098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a09a:	4680      	mov	r8, r0
 800a09c:	4689      	mov	r9, r1
 800a09e:	bb23      	cbnz	r3, 800a0ea <_strtod_l+0xb9a>
 800a0a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0a4:	9010      	str	r0, [sp, #64]	; 0x40
 800a0a6:	9311      	str	r3, [sp, #68]	; 0x44
 800a0a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a0b8:	1a9b      	subs	r3, r3, r2
 800a0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a0bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0c0:	eeb0 0a48 	vmov.f32	s0, s16
 800a0c4:	eef0 0a68 	vmov.f32	s1, s17
 800a0c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a0cc:	f001 fe80 	bl	800bdd0 <__ulp>
 800a0d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0d4:	ec53 2b10 	vmov	r2, r3, d0
 800a0d8:	f7f6 fa9e 	bl	8000618 <__aeabi_dmul>
 800a0dc:	ec53 2b18 	vmov	r2, r3, d8
 800a0e0:	f7f6 f8e4 	bl	80002ac <__adddf3>
 800a0e4:	4682      	mov	sl, r0
 800a0e6:	468b      	mov	fp, r1
 800a0e8:	e78d      	b.n	800a006 <_strtod_l+0xab6>
 800a0ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a0ee:	e7db      	b.n	800a0a8 <_strtod_l+0xb58>
 800a0f0:	a311      	add	r3, pc, #68	; (adr r3, 800a138 <_strtod_l+0xbe8>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 fd01 	bl	8000afc <__aeabi_dcmplt>
 800a0fa:	e7b2      	b.n	800a062 <_strtod_l+0xb12>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a100:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a102:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a104:	6013      	str	r3, [r2, #0]
 800a106:	f7ff ba6b 	b.w	80095e0 <_strtod_l+0x90>
 800a10a:	2a65      	cmp	r2, #101	; 0x65
 800a10c:	f43f ab5f 	beq.w	80097ce <_strtod_l+0x27e>
 800a110:	2a45      	cmp	r2, #69	; 0x45
 800a112:	f43f ab5c 	beq.w	80097ce <_strtod_l+0x27e>
 800a116:	2301      	movs	r3, #1
 800a118:	f7ff bb94 	b.w	8009844 <_strtod_l+0x2f4>
 800a11c:	f3af 8000 	nop.w
 800a120:	94a03595 	.word	0x94a03595
 800a124:	3fdfffff 	.word	0x3fdfffff
 800a128:	35afe535 	.word	0x35afe535
 800a12c:	3fe00000 	.word	0x3fe00000
 800a130:	ffc00000 	.word	0xffc00000
 800a134:	41dfffff 	.word	0x41dfffff
 800a138:	94a03595 	.word	0x94a03595
 800a13c:	3fcfffff 	.word	0x3fcfffff
 800a140:	3ff00000 	.word	0x3ff00000
 800a144:	7ff00000 	.word	0x7ff00000
 800a148:	7fe00000 	.word	0x7fe00000
 800a14c:	7c9fffff 	.word	0x7c9fffff
 800a150:	3fe00000 	.word	0x3fe00000
 800a154:	bff00000 	.word	0xbff00000
 800a158:	7fefffff 	.word	0x7fefffff

0800a15c <_strtod_r>:
 800a15c:	4b01      	ldr	r3, [pc, #4]	; (800a164 <_strtod_r+0x8>)
 800a15e:	f7ff b9f7 	b.w	8009550 <_strtod_l>
 800a162:	bf00      	nop
 800a164:	2000007c 	.word	0x2000007c

0800a168 <_strtol_l.constprop.0>:
 800a168:	2b01      	cmp	r3, #1
 800a16a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a16e:	d001      	beq.n	800a174 <_strtol_l.constprop.0+0xc>
 800a170:	2b24      	cmp	r3, #36	; 0x24
 800a172:	d906      	bls.n	800a182 <_strtol_l.constprop.0+0x1a>
 800a174:	f7fe fa7e 	bl	8008674 <__errno>
 800a178:	2316      	movs	r3, #22
 800a17a:	6003      	str	r3, [r0, #0]
 800a17c:	2000      	movs	r0, #0
 800a17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a182:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a268 <_strtol_l.constprop.0+0x100>
 800a186:	460d      	mov	r5, r1
 800a188:	462e      	mov	r6, r5
 800a18a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a18e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a192:	f017 0708 	ands.w	r7, r7, #8
 800a196:	d1f7      	bne.n	800a188 <_strtol_l.constprop.0+0x20>
 800a198:	2c2d      	cmp	r4, #45	; 0x2d
 800a19a:	d132      	bne.n	800a202 <_strtol_l.constprop.0+0x9a>
 800a19c:	782c      	ldrb	r4, [r5, #0]
 800a19e:	2701      	movs	r7, #1
 800a1a0:	1cb5      	adds	r5, r6, #2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d05b      	beq.n	800a25e <_strtol_l.constprop.0+0xf6>
 800a1a6:	2b10      	cmp	r3, #16
 800a1a8:	d109      	bne.n	800a1be <_strtol_l.constprop.0+0x56>
 800a1aa:	2c30      	cmp	r4, #48	; 0x30
 800a1ac:	d107      	bne.n	800a1be <_strtol_l.constprop.0+0x56>
 800a1ae:	782c      	ldrb	r4, [r5, #0]
 800a1b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a1b4:	2c58      	cmp	r4, #88	; 0x58
 800a1b6:	d14d      	bne.n	800a254 <_strtol_l.constprop.0+0xec>
 800a1b8:	786c      	ldrb	r4, [r5, #1]
 800a1ba:	2310      	movs	r3, #16
 800a1bc:	3502      	adds	r5, #2
 800a1be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a1c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1c6:	f04f 0c00 	mov.w	ip, #0
 800a1ca:	fbb8 f9f3 	udiv	r9, r8, r3
 800a1ce:	4666      	mov	r6, ip
 800a1d0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a1d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a1d8:	f1be 0f09 	cmp.w	lr, #9
 800a1dc:	d816      	bhi.n	800a20c <_strtol_l.constprop.0+0xa4>
 800a1de:	4674      	mov	r4, lr
 800a1e0:	42a3      	cmp	r3, r4
 800a1e2:	dd24      	ble.n	800a22e <_strtol_l.constprop.0+0xc6>
 800a1e4:	f1bc 0f00 	cmp.w	ip, #0
 800a1e8:	db1e      	blt.n	800a228 <_strtol_l.constprop.0+0xc0>
 800a1ea:	45b1      	cmp	r9, r6
 800a1ec:	d31c      	bcc.n	800a228 <_strtol_l.constprop.0+0xc0>
 800a1ee:	d101      	bne.n	800a1f4 <_strtol_l.constprop.0+0x8c>
 800a1f0:	45a2      	cmp	sl, r4
 800a1f2:	db19      	blt.n	800a228 <_strtol_l.constprop.0+0xc0>
 800a1f4:	fb06 4603 	mla	r6, r6, r3, r4
 800a1f8:	f04f 0c01 	mov.w	ip, #1
 800a1fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a200:	e7e8      	b.n	800a1d4 <_strtol_l.constprop.0+0x6c>
 800a202:	2c2b      	cmp	r4, #43	; 0x2b
 800a204:	bf04      	itt	eq
 800a206:	782c      	ldrbeq	r4, [r5, #0]
 800a208:	1cb5      	addeq	r5, r6, #2
 800a20a:	e7ca      	b.n	800a1a2 <_strtol_l.constprop.0+0x3a>
 800a20c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a210:	f1be 0f19 	cmp.w	lr, #25
 800a214:	d801      	bhi.n	800a21a <_strtol_l.constprop.0+0xb2>
 800a216:	3c37      	subs	r4, #55	; 0x37
 800a218:	e7e2      	b.n	800a1e0 <_strtol_l.constprop.0+0x78>
 800a21a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a21e:	f1be 0f19 	cmp.w	lr, #25
 800a222:	d804      	bhi.n	800a22e <_strtol_l.constprop.0+0xc6>
 800a224:	3c57      	subs	r4, #87	; 0x57
 800a226:	e7db      	b.n	800a1e0 <_strtol_l.constprop.0+0x78>
 800a228:	f04f 3cff 	mov.w	ip, #4294967295
 800a22c:	e7e6      	b.n	800a1fc <_strtol_l.constprop.0+0x94>
 800a22e:	f1bc 0f00 	cmp.w	ip, #0
 800a232:	da05      	bge.n	800a240 <_strtol_l.constprop.0+0xd8>
 800a234:	2322      	movs	r3, #34	; 0x22
 800a236:	6003      	str	r3, [r0, #0]
 800a238:	4646      	mov	r6, r8
 800a23a:	b942      	cbnz	r2, 800a24e <_strtol_l.constprop.0+0xe6>
 800a23c:	4630      	mov	r0, r6
 800a23e:	e79e      	b.n	800a17e <_strtol_l.constprop.0+0x16>
 800a240:	b107      	cbz	r7, 800a244 <_strtol_l.constprop.0+0xdc>
 800a242:	4276      	negs	r6, r6
 800a244:	2a00      	cmp	r2, #0
 800a246:	d0f9      	beq.n	800a23c <_strtol_l.constprop.0+0xd4>
 800a248:	f1bc 0f00 	cmp.w	ip, #0
 800a24c:	d000      	beq.n	800a250 <_strtol_l.constprop.0+0xe8>
 800a24e:	1e69      	subs	r1, r5, #1
 800a250:	6011      	str	r1, [r2, #0]
 800a252:	e7f3      	b.n	800a23c <_strtol_l.constprop.0+0xd4>
 800a254:	2430      	movs	r4, #48	; 0x30
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1b1      	bne.n	800a1be <_strtol_l.constprop.0+0x56>
 800a25a:	2308      	movs	r3, #8
 800a25c:	e7af      	b.n	800a1be <_strtol_l.constprop.0+0x56>
 800a25e:	2c30      	cmp	r4, #48	; 0x30
 800a260:	d0a5      	beq.n	800a1ae <_strtol_l.constprop.0+0x46>
 800a262:	230a      	movs	r3, #10
 800a264:	e7ab      	b.n	800a1be <_strtol_l.constprop.0+0x56>
 800a266:	bf00      	nop
 800a268:	0800efa1 	.word	0x0800efa1

0800a26c <_strtol_r>:
 800a26c:	f7ff bf7c 	b.w	800a168 <_strtol_l.constprop.0>

0800a270 <_write_r>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	4d07      	ldr	r5, [pc, #28]	; (800a290 <_write_r+0x20>)
 800a274:	4604      	mov	r4, r0
 800a276:	4608      	mov	r0, r1
 800a278:	4611      	mov	r1, r2
 800a27a:	2200      	movs	r2, #0
 800a27c:	602a      	str	r2, [r5, #0]
 800a27e:	461a      	mov	r2, r3
 800a280:	f7f8 fe47 	bl	8002f12 <_write>
 800a284:	1c43      	adds	r3, r0, #1
 800a286:	d102      	bne.n	800a28e <_write_r+0x1e>
 800a288:	682b      	ldr	r3, [r5, #0]
 800a28a:	b103      	cbz	r3, 800a28e <_write_r+0x1e>
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	bd38      	pop	{r3, r4, r5, pc}
 800a290:	20008984 	.word	0x20008984

0800a294 <_close_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4d06      	ldr	r5, [pc, #24]	; (800a2b0 <_close_r+0x1c>)
 800a298:	2300      	movs	r3, #0
 800a29a:	4604      	mov	r4, r0
 800a29c:	4608      	mov	r0, r1
 800a29e:	602b      	str	r3, [r5, #0]
 800a2a0:	f7f8 fe53 	bl	8002f4a <_close>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d102      	bne.n	800a2ae <_close_r+0x1a>
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	b103      	cbz	r3, 800a2ae <_close_r+0x1a>
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	20008984 	.word	0x20008984

0800a2b4 <quorem>:
 800a2b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	6903      	ldr	r3, [r0, #16]
 800a2ba:	690c      	ldr	r4, [r1, #16]
 800a2bc:	42a3      	cmp	r3, r4
 800a2be:	4607      	mov	r7, r0
 800a2c0:	f2c0 8081 	blt.w	800a3c6 <quorem+0x112>
 800a2c4:	3c01      	subs	r4, #1
 800a2c6:	f101 0814 	add.w	r8, r1, #20
 800a2ca:	f100 0514 	add.w	r5, r0, #20
 800a2ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2d2:	9301      	str	r3, [sp, #4]
 800a2d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a2e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2ec:	d331      	bcc.n	800a352 <quorem+0x9e>
 800a2ee:	f04f 0e00 	mov.w	lr, #0
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	46ac      	mov	ip, r5
 800a2f6:	46f2      	mov	sl, lr
 800a2f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a2fc:	b293      	uxth	r3, r2
 800a2fe:	fb06 e303 	mla	r3, r6, r3, lr
 800a302:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a306:	b29b      	uxth	r3, r3
 800a308:	ebaa 0303 	sub.w	r3, sl, r3
 800a30c:	f8dc a000 	ldr.w	sl, [ip]
 800a310:	0c12      	lsrs	r2, r2, #16
 800a312:	fa13 f38a 	uxtah	r3, r3, sl
 800a316:	fb06 e202 	mla	r2, r6, r2, lr
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	9b00      	ldr	r3, [sp, #0]
 800a31e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a322:	b292      	uxth	r2, r2
 800a324:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a32c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a330:	4581      	cmp	r9, r0
 800a332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a336:	f84c 3b04 	str.w	r3, [ip], #4
 800a33a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a33e:	d2db      	bcs.n	800a2f8 <quorem+0x44>
 800a340:	f855 300b 	ldr.w	r3, [r5, fp]
 800a344:	b92b      	cbnz	r3, 800a352 <quorem+0x9e>
 800a346:	9b01      	ldr	r3, [sp, #4]
 800a348:	3b04      	subs	r3, #4
 800a34a:	429d      	cmp	r5, r3
 800a34c:	461a      	mov	r2, r3
 800a34e:	d32e      	bcc.n	800a3ae <quorem+0xfa>
 800a350:	613c      	str	r4, [r7, #16]
 800a352:	4638      	mov	r0, r7
 800a354:	f001 fc96 	bl	800bc84 <__mcmp>
 800a358:	2800      	cmp	r0, #0
 800a35a:	db24      	blt.n	800a3a6 <quorem+0xf2>
 800a35c:	3601      	adds	r6, #1
 800a35e:	4628      	mov	r0, r5
 800a360:	f04f 0c00 	mov.w	ip, #0
 800a364:	f858 2b04 	ldr.w	r2, [r8], #4
 800a368:	f8d0 e000 	ldr.w	lr, [r0]
 800a36c:	b293      	uxth	r3, r2
 800a36e:	ebac 0303 	sub.w	r3, ip, r3
 800a372:	0c12      	lsrs	r2, r2, #16
 800a374:	fa13 f38e 	uxtah	r3, r3, lr
 800a378:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a37c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a380:	b29b      	uxth	r3, r3
 800a382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a386:	45c1      	cmp	r9, r8
 800a388:	f840 3b04 	str.w	r3, [r0], #4
 800a38c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a390:	d2e8      	bcs.n	800a364 <quorem+0xb0>
 800a392:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a396:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a39a:	b922      	cbnz	r2, 800a3a6 <quorem+0xf2>
 800a39c:	3b04      	subs	r3, #4
 800a39e:	429d      	cmp	r5, r3
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	d30a      	bcc.n	800a3ba <quorem+0x106>
 800a3a4:	613c      	str	r4, [r7, #16]
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	b003      	add	sp, #12
 800a3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ae:	6812      	ldr	r2, [r2, #0]
 800a3b0:	3b04      	subs	r3, #4
 800a3b2:	2a00      	cmp	r2, #0
 800a3b4:	d1cc      	bne.n	800a350 <quorem+0x9c>
 800a3b6:	3c01      	subs	r4, #1
 800a3b8:	e7c7      	b.n	800a34a <quorem+0x96>
 800a3ba:	6812      	ldr	r2, [r2, #0]
 800a3bc:	3b04      	subs	r3, #4
 800a3be:	2a00      	cmp	r2, #0
 800a3c0:	d1f0      	bne.n	800a3a4 <quorem+0xf0>
 800a3c2:	3c01      	subs	r4, #1
 800a3c4:	e7eb      	b.n	800a39e <quorem+0xea>
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	e7ee      	b.n	800a3a8 <quorem+0xf4>
 800a3ca:	0000      	movs	r0, r0
 800a3cc:	0000      	movs	r0, r0
	...

0800a3d0 <_dtoa_r>:
 800a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d4:	ed2d 8b04 	vpush	{d8-d9}
 800a3d8:	ec57 6b10 	vmov	r6, r7, d0
 800a3dc:	b093      	sub	sp, #76	; 0x4c
 800a3de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a3e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a3e4:	9106      	str	r1, [sp, #24]
 800a3e6:	ee10 aa10 	vmov	sl, s0
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a3f0:	46bb      	mov	fp, r7
 800a3f2:	b975      	cbnz	r5, 800a412 <_dtoa_r+0x42>
 800a3f4:	2010      	movs	r0, #16
 800a3f6:	f001 f95f 	bl	800b6b8 <malloc>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	6260      	str	r0, [r4, #36]	; 0x24
 800a3fe:	b920      	cbnz	r0, 800a40a <_dtoa_r+0x3a>
 800a400:	4ba7      	ldr	r3, [pc, #668]	; (800a6a0 <_dtoa_r+0x2d0>)
 800a402:	21ea      	movs	r1, #234	; 0xea
 800a404:	48a7      	ldr	r0, [pc, #668]	; (800a6a4 <_dtoa_r+0x2d4>)
 800a406:	f002 fcdb 	bl	800cdc0 <__assert_func>
 800a40a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a40e:	6005      	str	r5, [r0, #0]
 800a410:	60c5      	str	r5, [r0, #12]
 800a412:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a414:	6819      	ldr	r1, [r3, #0]
 800a416:	b151      	cbz	r1, 800a42e <_dtoa_r+0x5e>
 800a418:	685a      	ldr	r2, [r3, #4]
 800a41a:	604a      	str	r2, [r1, #4]
 800a41c:	2301      	movs	r3, #1
 800a41e:	4093      	lsls	r3, r2
 800a420:	608b      	str	r3, [r1, #8]
 800a422:	4620      	mov	r0, r4
 800a424:	f001 f9a2 	bl	800b76c <_Bfree>
 800a428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a42a:	2200      	movs	r2, #0
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	1e3b      	subs	r3, r7, #0
 800a430:	bfaa      	itet	ge
 800a432:	2300      	movge	r3, #0
 800a434:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a438:	f8c8 3000 	strge.w	r3, [r8]
 800a43c:	4b9a      	ldr	r3, [pc, #616]	; (800a6a8 <_dtoa_r+0x2d8>)
 800a43e:	bfbc      	itt	lt
 800a440:	2201      	movlt	r2, #1
 800a442:	f8c8 2000 	strlt.w	r2, [r8]
 800a446:	ea33 030b 	bics.w	r3, r3, fp
 800a44a:	d11b      	bne.n	800a484 <_dtoa_r+0xb4>
 800a44c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a44e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a452:	6013      	str	r3, [r2, #0]
 800a454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a458:	4333      	orrs	r3, r6
 800a45a:	f000 8592 	beq.w	800af82 <_dtoa_r+0xbb2>
 800a45e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a460:	b963      	cbnz	r3, 800a47c <_dtoa_r+0xac>
 800a462:	4b92      	ldr	r3, [pc, #584]	; (800a6ac <_dtoa_r+0x2dc>)
 800a464:	e022      	b.n	800a4ac <_dtoa_r+0xdc>
 800a466:	4b92      	ldr	r3, [pc, #584]	; (800a6b0 <_dtoa_r+0x2e0>)
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	3308      	adds	r3, #8
 800a46c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a46e:	6013      	str	r3, [r2, #0]
 800a470:	9801      	ldr	r0, [sp, #4]
 800a472:	b013      	add	sp, #76	; 0x4c
 800a474:	ecbd 8b04 	vpop	{d8-d9}
 800a478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47c:	4b8b      	ldr	r3, [pc, #556]	; (800a6ac <_dtoa_r+0x2dc>)
 800a47e:	9301      	str	r3, [sp, #4]
 800a480:	3303      	adds	r3, #3
 800a482:	e7f3      	b.n	800a46c <_dtoa_r+0x9c>
 800a484:	2200      	movs	r2, #0
 800a486:	2300      	movs	r3, #0
 800a488:	4650      	mov	r0, sl
 800a48a:	4659      	mov	r1, fp
 800a48c:	f7f6 fb2c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a490:	ec4b ab19 	vmov	d9, sl, fp
 800a494:	4680      	mov	r8, r0
 800a496:	b158      	cbz	r0, 800a4b0 <_dtoa_r+0xe0>
 800a498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a49a:	2301      	movs	r3, #1
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f000 856b 	beq.w	800af7c <_dtoa_r+0xbac>
 800a4a6:	4883      	ldr	r0, [pc, #524]	; (800a6b4 <_dtoa_r+0x2e4>)
 800a4a8:	6018      	str	r0, [r3, #0]
 800a4aa:	1e43      	subs	r3, r0, #1
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	e7df      	b.n	800a470 <_dtoa_r+0xa0>
 800a4b0:	ec4b ab10 	vmov	d0, sl, fp
 800a4b4:	aa10      	add	r2, sp, #64	; 0x40
 800a4b6:	a911      	add	r1, sp, #68	; 0x44
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f001 fd05 	bl	800bec8 <__d2b>
 800a4be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a4c2:	ee08 0a10 	vmov	s16, r0
 800a4c6:	2d00      	cmp	r5, #0
 800a4c8:	f000 8084 	beq.w	800a5d4 <_dtoa_r+0x204>
 800a4cc:	ee19 3a90 	vmov	r3, s19
 800a4d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a4d8:	4656      	mov	r6, sl
 800a4da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a4de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a4e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a4e6:	4b74      	ldr	r3, [pc, #464]	; (800a6b8 <_dtoa_r+0x2e8>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	4639      	mov	r1, r7
 800a4ee:	f7f5 fedb 	bl	80002a8 <__aeabi_dsub>
 800a4f2:	a365      	add	r3, pc, #404	; (adr r3, 800a688 <_dtoa_r+0x2b8>)
 800a4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f8:	f7f6 f88e 	bl	8000618 <__aeabi_dmul>
 800a4fc:	a364      	add	r3, pc, #400	; (adr r3, 800a690 <_dtoa_r+0x2c0>)
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	f7f5 fed3 	bl	80002ac <__adddf3>
 800a506:	4606      	mov	r6, r0
 800a508:	4628      	mov	r0, r5
 800a50a:	460f      	mov	r7, r1
 800a50c:	f7f6 f81a 	bl	8000544 <__aeabi_i2d>
 800a510:	a361      	add	r3, pc, #388	; (adr r3, 800a698 <_dtoa_r+0x2c8>)
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	f7f6 f87f 	bl	8000618 <__aeabi_dmul>
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	4630      	mov	r0, r6
 800a520:	4639      	mov	r1, r7
 800a522:	f7f5 fec3 	bl	80002ac <__adddf3>
 800a526:	4606      	mov	r6, r0
 800a528:	460f      	mov	r7, r1
 800a52a:	f7f6 fb25 	bl	8000b78 <__aeabi_d2iz>
 800a52e:	2200      	movs	r2, #0
 800a530:	9000      	str	r0, [sp, #0]
 800a532:	2300      	movs	r3, #0
 800a534:	4630      	mov	r0, r6
 800a536:	4639      	mov	r1, r7
 800a538:	f7f6 fae0 	bl	8000afc <__aeabi_dcmplt>
 800a53c:	b150      	cbz	r0, 800a554 <_dtoa_r+0x184>
 800a53e:	9800      	ldr	r0, [sp, #0]
 800a540:	f7f6 f800 	bl	8000544 <__aeabi_i2d>
 800a544:	4632      	mov	r2, r6
 800a546:	463b      	mov	r3, r7
 800a548:	f7f6 face 	bl	8000ae8 <__aeabi_dcmpeq>
 800a54c:	b910      	cbnz	r0, 800a554 <_dtoa_r+0x184>
 800a54e:	9b00      	ldr	r3, [sp, #0]
 800a550:	3b01      	subs	r3, #1
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	9b00      	ldr	r3, [sp, #0]
 800a556:	2b16      	cmp	r3, #22
 800a558:	d85a      	bhi.n	800a610 <_dtoa_r+0x240>
 800a55a:	9a00      	ldr	r2, [sp, #0]
 800a55c:	4b57      	ldr	r3, [pc, #348]	; (800a6bc <_dtoa_r+0x2ec>)
 800a55e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a566:	ec51 0b19 	vmov	r0, r1, d9
 800a56a:	f7f6 fac7 	bl	8000afc <__aeabi_dcmplt>
 800a56e:	2800      	cmp	r0, #0
 800a570:	d050      	beq.n	800a614 <_dtoa_r+0x244>
 800a572:	9b00      	ldr	r3, [sp, #0]
 800a574:	3b01      	subs	r3, #1
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	2300      	movs	r3, #0
 800a57a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a57e:	1b5d      	subs	r5, r3, r5
 800a580:	1e6b      	subs	r3, r5, #1
 800a582:	9305      	str	r3, [sp, #20]
 800a584:	bf45      	ittet	mi
 800a586:	f1c5 0301 	rsbmi	r3, r5, #1
 800a58a:	9304      	strmi	r3, [sp, #16]
 800a58c:	2300      	movpl	r3, #0
 800a58e:	2300      	movmi	r3, #0
 800a590:	bf4c      	ite	mi
 800a592:	9305      	strmi	r3, [sp, #20]
 800a594:	9304      	strpl	r3, [sp, #16]
 800a596:	9b00      	ldr	r3, [sp, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	db3d      	blt.n	800a618 <_dtoa_r+0x248>
 800a59c:	9b05      	ldr	r3, [sp, #20]
 800a59e:	9a00      	ldr	r2, [sp, #0]
 800a5a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a5a2:	4413      	add	r3, r2
 800a5a4:	9305      	str	r3, [sp, #20]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	9307      	str	r3, [sp, #28]
 800a5aa:	9b06      	ldr	r3, [sp, #24]
 800a5ac:	2b09      	cmp	r3, #9
 800a5ae:	f200 8089 	bhi.w	800a6c4 <_dtoa_r+0x2f4>
 800a5b2:	2b05      	cmp	r3, #5
 800a5b4:	bfc4      	itt	gt
 800a5b6:	3b04      	subgt	r3, #4
 800a5b8:	9306      	strgt	r3, [sp, #24]
 800a5ba:	9b06      	ldr	r3, [sp, #24]
 800a5bc:	f1a3 0302 	sub.w	r3, r3, #2
 800a5c0:	bfcc      	ite	gt
 800a5c2:	2500      	movgt	r5, #0
 800a5c4:	2501      	movle	r5, #1
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	f200 8087 	bhi.w	800a6da <_dtoa_r+0x30a>
 800a5cc:	e8df f003 	tbb	[pc, r3]
 800a5d0:	59383a2d 	.word	0x59383a2d
 800a5d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a5d8:	441d      	add	r5, r3
 800a5da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a5de:	2b20      	cmp	r3, #32
 800a5e0:	bfc1      	itttt	gt
 800a5e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a5ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800a5ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a5f2:	bfda      	itte	le
 800a5f4:	f1c3 0320 	rsble	r3, r3, #32
 800a5f8:	fa06 f003 	lslle.w	r0, r6, r3
 800a5fc:	4318      	orrgt	r0, r3
 800a5fe:	f7f5 ff91 	bl	8000524 <__aeabi_ui2d>
 800a602:	2301      	movs	r3, #1
 800a604:	4606      	mov	r6, r0
 800a606:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a60a:	3d01      	subs	r5, #1
 800a60c:	930e      	str	r3, [sp, #56]	; 0x38
 800a60e:	e76a      	b.n	800a4e6 <_dtoa_r+0x116>
 800a610:	2301      	movs	r3, #1
 800a612:	e7b2      	b.n	800a57a <_dtoa_r+0x1aa>
 800a614:	900b      	str	r0, [sp, #44]	; 0x2c
 800a616:	e7b1      	b.n	800a57c <_dtoa_r+0x1ac>
 800a618:	9b04      	ldr	r3, [sp, #16]
 800a61a:	9a00      	ldr	r2, [sp, #0]
 800a61c:	1a9b      	subs	r3, r3, r2
 800a61e:	9304      	str	r3, [sp, #16]
 800a620:	4253      	negs	r3, r2
 800a622:	9307      	str	r3, [sp, #28]
 800a624:	2300      	movs	r3, #0
 800a626:	930a      	str	r3, [sp, #40]	; 0x28
 800a628:	e7bf      	b.n	800a5aa <_dtoa_r+0x1da>
 800a62a:	2300      	movs	r3, #0
 800a62c:	9308      	str	r3, [sp, #32]
 800a62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a630:	2b00      	cmp	r3, #0
 800a632:	dc55      	bgt.n	800a6e0 <_dtoa_r+0x310>
 800a634:	2301      	movs	r3, #1
 800a636:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a63a:	461a      	mov	r2, r3
 800a63c:	9209      	str	r2, [sp, #36]	; 0x24
 800a63e:	e00c      	b.n	800a65a <_dtoa_r+0x28a>
 800a640:	2301      	movs	r3, #1
 800a642:	e7f3      	b.n	800a62c <_dtoa_r+0x25c>
 800a644:	2300      	movs	r3, #0
 800a646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a648:	9308      	str	r3, [sp, #32]
 800a64a:	9b00      	ldr	r3, [sp, #0]
 800a64c:	4413      	add	r3, r2
 800a64e:	9302      	str	r3, [sp, #8]
 800a650:	3301      	adds	r3, #1
 800a652:	2b01      	cmp	r3, #1
 800a654:	9303      	str	r3, [sp, #12]
 800a656:	bfb8      	it	lt
 800a658:	2301      	movlt	r3, #1
 800a65a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a65c:	2200      	movs	r2, #0
 800a65e:	6042      	str	r2, [r0, #4]
 800a660:	2204      	movs	r2, #4
 800a662:	f102 0614 	add.w	r6, r2, #20
 800a666:	429e      	cmp	r6, r3
 800a668:	6841      	ldr	r1, [r0, #4]
 800a66a:	d93d      	bls.n	800a6e8 <_dtoa_r+0x318>
 800a66c:	4620      	mov	r0, r4
 800a66e:	f001 f83d 	bl	800b6ec <_Balloc>
 800a672:	9001      	str	r0, [sp, #4]
 800a674:	2800      	cmp	r0, #0
 800a676:	d13b      	bne.n	800a6f0 <_dtoa_r+0x320>
 800a678:	4b11      	ldr	r3, [pc, #68]	; (800a6c0 <_dtoa_r+0x2f0>)
 800a67a:	4602      	mov	r2, r0
 800a67c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a680:	e6c0      	b.n	800a404 <_dtoa_r+0x34>
 800a682:	2301      	movs	r3, #1
 800a684:	e7df      	b.n	800a646 <_dtoa_r+0x276>
 800a686:	bf00      	nop
 800a688:	636f4361 	.word	0x636f4361
 800a68c:	3fd287a7 	.word	0x3fd287a7
 800a690:	8b60c8b3 	.word	0x8b60c8b3
 800a694:	3fc68a28 	.word	0x3fc68a28
 800a698:	509f79fb 	.word	0x509f79fb
 800a69c:	3fd34413 	.word	0x3fd34413
 800a6a0:	0800f0ae 	.word	0x0800f0ae
 800a6a4:	0800f0c5 	.word	0x0800f0c5
 800a6a8:	7ff00000 	.word	0x7ff00000
 800a6ac:	0800f0aa 	.word	0x0800f0aa
 800a6b0:	0800f0a1 	.word	0x0800f0a1
 800a6b4:	0800f31a 	.word	0x0800f31a
 800a6b8:	3ff80000 	.word	0x3ff80000
 800a6bc:	0800f230 	.word	0x0800f230
 800a6c0:	0800f120 	.word	0x0800f120
 800a6c4:	2501      	movs	r5, #1
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	9306      	str	r3, [sp, #24]
 800a6ca:	9508      	str	r5, [sp, #32]
 800a6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2312      	movs	r3, #18
 800a6d8:	e7b0      	b.n	800a63c <_dtoa_r+0x26c>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	9308      	str	r3, [sp, #32]
 800a6de:	e7f5      	b.n	800a6cc <_dtoa_r+0x2fc>
 800a6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a6e6:	e7b8      	b.n	800a65a <_dtoa_r+0x28a>
 800a6e8:	3101      	adds	r1, #1
 800a6ea:	6041      	str	r1, [r0, #4]
 800a6ec:	0052      	lsls	r2, r2, #1
 800a6ee:	e7b8      	b.n	800a662 <_dtoa_r+0x292>
 800a6f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6f2:	9a01      	ldr	r2, [sp, #4]
 800a6f4:	601a      	str	r2, [r3, #0]
 800a6f6:	9b03      	ldr	r3, [sp, #12]
 800a6f8:	2b0e      	cmp	r3, #14
 800a6fa:	f200 809d 	bhi.w	800a838 <_dtoa_r+0x468>
 800a6fe:	2d00      	cmp	r5, #0
 800a700:	f000 809a 	beq.w	800a838 <_dtoa_r+0x468>
 800a704:	9b00      	ldr	r3, [sp, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	dd32      	ble.n	800a770 <_dtoa_r+0x3a0>
 800a70a:	4ab7      	ldr	r2, [pc, #732]	; (800a9e8 <_dtoa_r+0x618>)
 800a70c:	f003 030f 	and.w	r3, r3, #15
 800a710:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a714:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a718:	9b00      	ldr	r3, [sp, #0]
 800a71a:	05d8      	lsls	r0, r3, #23
 800a71c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a720:	d516      	bpl.n	800a750 <_dtoa_r+0x380>
 800a722:	4bb2      	ldr	r3, [pc, #712]	; (800a9ec <_dtoa_r+0x61c>)
 800a724:	ec51 0b19 	vmov	r0, r1, d9
 800a728:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a72c:	f7f6 f89e 	bl	800086c <__aeabi_ddiv>
 800a730:	f007 070f 	and.w	r7, r7, #15
 800a734:	4682      	mov	sl, r0
 800a736:	468b      	mov	fp, r1
 800a738:	2503      	movs	r5, #3
 800a73a:	4eac      	ldr	r6, [pc, #688]	; (800a9ec <_dtoa_r+0x61c>)
 800a73c:	b957      	cbnz	r7, 800a754 <_dtoa_r+0x384>
 800a73e:	4642      	mov	r2, r8
 800a740:	464b      	mov	r3, r9
 800a742:	4650      	mov	r0, sl
 800a744:	4659      	mov	r1, fp
 800a746:	f7f6 f891 	bl	800086c <__aeabi_ddiv>
 800a74a:	4682      	mov	sl, r0
 800a74c:	468b      	mov	fp, r1
 800a74e:	e028      	b.n	800a7a2 <_dtoa_r+0x3d2>
 800a750:	2502      	movs	r5, #2
 800a752:	e7f2      	b.n	800a73a <_dtoa_r+0x36a>
 800a754:	07f9      	lsls	r1, r7, #31
 800a756:	d508      	bpl.n	800a76a <_dtoa_r+0x39a>
 800a758:	4640      	mov	r0, r8
 800a75a:	4649      	mov	r1, r9
 800a75c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a760:	f7f5 ff5a 	bl	8000618 <__aeabi_dmul>
 800a764:	3501      	adds	r5, #1
 800a766:	4680      	mov	r8, r0
 800a768:	4689      	mov	r9, r1
 800a76a:	107f      	asrs	r7, r7, #1
 800a76c:	3608      	adds	r6, #8
 800a76e:	e7e5      	b.n	800a73c <_dtoa_r+0x36c>
 800a770:	f000 809b 	beq.w	800a8aa <_dtoa_r+0x4da>
 800a774:	9b00      	ldr	r3, [sp, #0]
 800a776:	4f9d      	ldr	r7, [pc, #628]	; (800a9ec <_dtoa_r+0x61c>)
 800a778:	425e      	negs	r6, r3
 800a77a:	4b9b      	ldr	r3, [pc, #620]	; (800a9e8 <_dtoa_r+0x618>)
 800a77c:	f006 020f 	and.w	r2, r6, #15
 800a780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a788:	ec51 0b19 	vmov	r0, r1, d9
 800a78c:	f7f5 ff44 	bl	8000618 <__aeabi_dmul>
 800a790:	1136      	asrs	r6, r6, #4
 800a792:	4682      	mov	sl, r0
 800a794:	468b      	mov	fp, r1
 800a796:	2300      	movs	r3, #0
 800a798:	2502      	movs	r5, #2
 800a79a:	2e00      	cmp	r6, #0
 800a79c:	d17a      	bne.n	800a894 <_dtoa_r+0x4c4>
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1d3      	bne.n	800a74a <_dtoa_r+0x37a>
 800a7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 8082 	beq.w	800a8ae <_dtoa_r+0x4de>
 800a7aa:	4b91      	ldr	r3, [pc, #580]	; (800a9f0 <_dtoa_r+0x620>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	4650      	mov	r0, sl
 800a7b0:	4659      	mov	r1, fp
 800a7b2:	f7f6 f9a3 	bl	8000afc <__aeabi_dcmplt>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d079      	beq.n	800a8ae <_dtoa_r+0x4de>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d076      	beq.n	800a8ae <_dtoa_r+0x4de>
 800a7c0:	9b02      	ldr	r3, [sp, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	dd36      	ble.n	800a834 <_dtoa_r+0x464>
 800a7c6:	9b00      	ldr	r3, [sp, #0]
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	4659      	mov	r1, fp
 800a7cc:	1e5f      	subs	r7, r3, #1
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	4b88      	ldr	r3, [pc, #544]	; (800a9f4 <_dtoa_r+0x624>)
 800a7d2:	f7f5 ff21 	bl	8000618 <__aeabi_dmul>
 800a7d6:	9e02      	ldr	r6, [sp, #8]
 800a7d8:	4682      	mov	sl, r0
 800a7da:	468b      	mov	fp, r1
 800a7dc:	3501      	adds	r5, #1
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f7f5 feb0 	bl	8000544 <__aeabi_i2d>
 800a7e4:	4652      	mov	r2, sl
 800a7e6:	465b      	mov	r3, fp
 800a7e8:	f7f5 ff16 	bl	8000618 <__aeabi_dmul>
 800a7ec:	4b82      	ldr	r3, [pc, #520]	; (800a9f8 <_dtoa_r+0x628>)
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f7f5 fd5c 	bl	80002ac <__adddf3>
 800a7f4:	46d0      	mov	r8, sl
 800a7f6:	46d9      	mov	r9, fp
 800a7f8:	4682      	mov	sl, r0
 800a7fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a7fe:	2e00      	cmp	r6, #0
 800a800:	d158      	bne.n	800a8b4 <_dtoa_r+0x4e4>
 800a802:	4b7e      	ldr	r3, [pc, #504]	; (800a9fc <_dtoa_r+0x62c>)
 800a804:	2200      	movs	r2, #0
 800a806:	4640      	mov	r0, r8
 800a808:	4649      	mov	r1, r9
 800a80a:	f7f5 fd4d 	bl	80002a8 <__aeabi_dsub>
 800a80e:	4652      	mov	r2, sl
 800a810:	465b      	mov	r3, fp
 800a812:	4680      	mov	r8, r0
 800a814:	4689      	mov	r9, r1
 800a816:	f7f6 f98f 	bl	8000b38 <__aeabi_dcmpgt>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	f040 8295 	bne.w	800ad4a <_dtoa_r+0x97a>
 800a820:	4652      	mov	r2, sl
 800a822:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a826:	4640      	mov	r0, r8
 800a828:	4649      	mov	r1, r9
 800a82a:	f7f6 f967 	bl	8000afc <__aeabi_dcmplt>
 800a82e:	2800      	cmp	r0, #0
 800a830:	f040 8289 	bne.w	800ad46 <_dtoa_r+0x976>
 800a834:	ec5b ab19 	vmov	sl, fp, d9
 800a838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f2c0 8148 	blt.w	800aad0 <_dtoa_r+0x700>
 800a840:	9a00      	ldr	r2, [sp, #0]
 800a842:	2a0e      	cmp	r2, #14
 800a844:	f300 8144 	bgt.w	800aad0 <_dtoa_r+0x700>
 800a848:	4b67      	ldr	r3, [pc, #412]	; (800a9e8 <_dtoa_r+0x618>)
 800a84a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a84e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a854:	2b00      	cmp	r3, #0
 800a856:	f280 80d5 	bge.w	800aa04 <_dtoa_r+0x634>
 800a85a:	9b03      	ldr	r3, [sp, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f300 80d1 	bgt.w	800aa04 <_dtoa_r+0x634>
 800a862:	f040 826f 	bne.w	800ad44 <_dtoa_r+0x974>
 800a866:	4b65      	ldr	r3, [pc, #404]	; (800a9fc <_dtoa_r+0x62c>)
 800a868:	2200      	movs	r2, #0
 800a86a:	4640      	mov	r0, r8
 800a86c:	4649      	mov	r1, r9
 800a86e:	f7f5 fed3 	bl	8000618 <__aeabi_dmul>
 800a872:	4652      	mov	r2, sl
 800a874:	465b      	mov	r3, fp
 800a876:	f7f6 f955 	bl	8000b24 <__aeabi_dcmpge>
 800a87a:	9e03      	ldr	r6, [sp, #12]
 800a87c:	4637      	mov	r7, r6
 800a87e:	2800      	cmp	r0, #0
 800a880:	f040 8245 	bne.w	800ad0e <_dtoa_r+0x93e>
 800a884:	9d01      	ldr	r5, [sp, #4]
 800a886:	2331      	movs	r3, #49	; 0x31
 800a888:	f805 3b01 	strb.w	r3, [r5], #1
 800a88c:	9b00      	ldr	r3, [sp, #0]
 800a88e:	3301      	adds	r3, #1
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	e240      	b.n	800ad16 <_dtoa_r+0x946>
 800a894:	07f2      	lsls	r2, r6, #31
 800a896:	d505      	bpl.n	800a8a4 <_dtoa_r+0x4d4>
 800a898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a89c:	f7f5 febc 	bl	8000618 <__aeabi_dmul>
 800a8a0:	3501      	adds	r5, #1
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	1076      	asrs	r6, r6, #1
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	e777      	b.n	800a79a <_dtoa_r+0x3ca>
 800a8aa:	2502      	movs	r5, #2
 800a8ac:	e779      	b.n	800a7a2 <_dtoa_r+0x3d2>
 800a8ae:	9f00      	ldr	r7, [sp, #0]
 800a8b0:	9e03      	ldr	r6, [sp, #12]
 800a8b2:	e794      	b.n	800a7de <_dtoa_r+0x40e>
 800a8b4:	9901      	ldr	r1, [sp, #4]
 800a8b6:	4b4c      	ldr	r3, [pc, #304]	; (800a9e8 <_dtoa_r+0x618>)
 800a8b8:	4431      	add	r1, r6
 800a8ba:	910d      	str	r1, [sp, #52]	; 0x34
 800a8bc:	9908      	ldr	r1, [sp, #32]
 800a8be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a8c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8c6:	2900      	cmp	r1, #0
 800a8c8:	d043      	beq.n	800a952 <_dtoa_r+0x582>
 800a8ca:	494d      	ldr	r1, [pc, #308]	; (800aa00 <_dtoa_r+0x630>)
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	f7f5 ffcd 	bl	800086c <__aeabi_ddiv>
 800a8d2:	4652      	mov	r2, sl
 800a8d4:	465b      	mov	r3, fp
 800a8d6:	f7f5 fce7 	bl	80002a8 <__aeabi_dsub>
 800a8da:	9d01      	ldr	r5, [sp, #4]
 800a8dc:	4682      	mov	sl, r0
 800a8de:	468b      	mov	fp, r1
 800a8e0:	4649      	mov	r1, r9
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	f7f6 f948 	bl	8000b78 <__aeabi_d2iz>
 800a8e8:	4606      	mov	r6, r0
 800a8ea:	f7f5 fe2b 	bl	8000544 <__aeabi_i2d>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4640      	mov	r0, r8
 800a8f4:	4649      	mov	r1, r9
 800a8f6:	f7f5 fcd7 	bl	80002a8 <__aeabi_dsub>
 800a8fa:	3630      	adds	r6, #48	; 0x30
 800a8fc:	f805 6b01 	strb.w	r6, [r5], #1
 800a900:	4652      	mov	r2, sl
 800a902:	465b      	mov	r3, fp
 800a904:	4680      	mov	r8, r0
 800a906:	4689      	mov	r9, r1
 800a908:	f7f6 f8f8 	bl	8000afc <__aeabi_dcmplt>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d163      	bne.n	800a9d8 <_dtoa_r+0x608>
 800a910:	4642      	mov	r2, r8
 800a912:	464b      	mov	r3, r9
 800a914:	4936      	ldr	r1, [pc, #216]	; (800a9f0 <_dtoa_r+0x620>)
 800a916:	2000      	movs	r0, #0
 800a918:	f7f5 fcc6 	bl	80002a8 <__aeabi_dsub>
 800a91c:	4652      	mov	r2, sl
 800a91e:	465b      	mov	r3, fp
 800a920:	f7f6 f8ec 	bl	8000afc <__aeabi_dcmplt>
 800a924:	2800      	cmp	r0, #0
 800a926:	f040 80b5 	bne.w	800aa94 <_dtoa_r+0x6c4>
 800a92a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a92c:	429d      	cmp	r5, r3
 800a92e:	d081      	beq.n	800a834 <_dtoa_r+0x464>
 800a930:	4b30      	ldr	r3, [pc, #192]	; (800a9f4 <_dtoa_r+0x624>)
 800a932:	2200      	movs	r2, #0
 800a934:	4650      	mov	r0, sl
 800a936:	4659      	mov	r1, fp
 800a938:	f7f5 fe6e 	bl	8000618 <__aeabi_dmul>
 800a93c:	4b2d      	ldr	r3, [pc, #180]	; (800a9f4 <_dtoa_r+0x624>)
 800a93e:	4682      	mov	sl, r0
 800a940:	468b      	mov	fp, r1
 800a942:	4640      	mov	r0, r8
 800a944:	4649      	mov	r1, r9
 800a946:	2200      	movs	r2, #0
 800a948:	f7f5 fe66 	bl	8000618 <__aeabi_dmul>
 800a94c:	4680      	mov	r8, r0
 800a94e:	4689      	mov	r9, r1
 800a950:	e7c6      	b.n	800a8e0 <_dtoa_r+0x510>
 800a952:	4650      	mov	r0, sl
 800a954:	4659      	mov	r1, fp
 800a956:	f7f5 fe5f 	bl	8000618 <__aeabi_dmul>
 800a95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a95c:	9d01      	ldr	r5, [sp, #4]
 800a95e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a960:	4682      	mov	sl, r0
 800a962:	468b      	mov	fp, r1
 800a964:	4649      	mov	r1, r9
 800a966:	4640      	mov	r0, r8
 800a968:	f7f6 f906 	bl	8000b78 <__aeabi_d2iz>
 800a96c:	4606      	mov	r6, r0
 800a96e:	f7f5 fde9 	bl	8000544 <__aeabi_i2d>
 800a972:	3630      	adds	r6, #48	; 0x30
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	4640      	mov	r0, r8
 800a97a:	4649      	mov	r1, r9
 800a97c:	f7f5 fc94 	bl	80002a8 <__aeabi_dsub>
 800a980:	f805 6b01 	strb.w	r6, [r5], #1
 800a984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a986:	429d      	cmp	r5, r3
 800a988:	4680      	mov	r8, r0
 800a98a:	4689      	mov	r9, r1
 800a98c:	f04f 0200 	mov.w	r2, #0
 800a990:	d124      	bne.n	800a9dc <_dtoa_r+0x60c>
 800a992:	4b1b      	ldr	r3, [pc, #108]	; (800aa00 <_dtoa_r+0x630>)
 800a994:	4650      	mov	r0, sl
 800a996:	4659      	mov	r1, fp
 800a998:	f7f5 fc88 	bl	80002ac <__adddf3>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	4649      	mov	r1, r9
 800a9a4:	f7f6 f8c8 	bl	8000b38 <__aeabi_dcmpgt>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	d173      	bne.n	800aa94 <_dtoa_r+0x6c4>
 800a9ac:	4652      	mov	r2, sl
 800a9ae:	465b      	mov	r3, fp
 800a9b0:	4913      	ldr	r1, [pc, #76]	; (800aa00 <_dtoa_r+0x630>)
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	f7f5 fc78 	bl	80002a8 <__aeabi_dsub>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	4640      	mov	r0, r8
 800a9be:	4649      	mov	r1, r9
 800a9c0:	f7f6 f89c 	bl	8000afc <__aeabi_dcmplt>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	f43f af35 	beq.w	800a834 <_dtoa_r+0x464>
 800a9ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a9cc:	1e6b      	subs	r3, r5, #1
 800a9ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a9d4:	2b30      	cmp	r3, #48	; 0x30
 800a9d6:	d0f8      	beq.n	800a9ca <_dtoa_r+0x5fa>
 800a9d8:	9700      	str	r7, [sp, #0]
 800a9da:	e049      	b.n	800aa70 <_dtoa_r+0x6a0>
 800a9dc:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <_dtoa_r+0x624>)
 800a9de:	f7f5 fe1b 	bl	8000618 <__aeabi_dmul>
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	4689      	mov	r9, r1
 800a9e6:	e7bd      	b.n	800a964 <_dtoa_r+0x594>
 800a9e8:	0800f230 	.word	0x0800f230
 800a9ec:	0800f208 	.word	0x0800f208
 800a9f0:	3ff00000 	.word	0x3ff00000
 800a9f4:	40240000 	.word	0x40240000
 800a9f8:	401c0000 	.word	0x401c0000
 800a9fc:	40140000 	.word	0x40140000
 800aa00:	3fe00000 	.word	0x3fe00000
 800aa04:	9d01      	ldr	r5, [sp, #4]
 800aa06:	4656      	mov	r6, sl
 800aa08:	465f      	mov	r7, fp
 800aa0a:	4642      	mov	r2, r8
 800aa0c:	464b      	mov	r3, r9
 800aa0e:	4630      	mov	r0, r6
 800aa10:	4639      	mov	r1, r7
 800aa12:	f7f5 ff2b 	bl	800086c <__aeabi_ddiv>
 800aa16:	f7f6 f8af 	bl	8000b78 <__aeabi_d2iz>
 800aa1a:	4682      	mov	sl, r0
 800aa1c:	f7f5 fd92 	bl	8000544 <__aeabi_i2d>
 800aa20:	4642      	mov	r2, r8
 800aa22:	464b      	mov	r3, r9
 800aa24:	f7f5 fdf8 	bl	8000618 <__aeabi_dmul>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	4639      	mov	r1, r7
 800aa30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800aa34:	f7f5 fc38 	bl	80002a8 <__aeabi_dsub>
 800aa38:	f805 6b01 	strb.w	r6, [r5], #1
 800aa3c:	9e01      	ldr	r6, [sp, #4]
 800aa3e:	9f03      	ldr	r7, [sp, #12]
 800aa40:	1bae      	subs	r6, r5, r6
 800aa42:	42b7      	cmp	r7, r6
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	d135      	bne.n	800aab6 <_dtoa_r+0x6e6>
 800aa4a:	f7f5 fc2f 	bl	80002ac <__adddf3>
 800aa4e:	4642      	mov	r2, r8
 800aa50:	464b      	mov	r3, r9
 800aa52:	4606      	mov	r6, r0
 800aa54:	460f      	mov	r7, r1
 800aa56:	f7f6 f86f 	bl	8000b38 <__aeabi_dcmpgt>
 800aa5a:	b9d0      	cbnz	r0, 800aa92 <_dtoa_r+0x6c2>
 800aa5c:	4642      	mov	r2, r8
 800aa5e:	464b      	mov	r3, r9
 800aa60:	4630      	mov	r0, r6
 800aa62:	4639      	mov	r1, r7
 800aa64:	f7f6 f840 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa68:	b110      	cbz	r0, 800aa70 <_dtoa_r+0x6a0>
 800aa6a:	f01a 0f01 	tst.w	sl, #1
 800aa6e:	d110      	bne.n	800aa92 <_dtoa_r+0x6c2>
 800aa70:	4620      	mov	r0, r4
 800aa72:	ee18 1a10 	vmov	r1, s16
 800aa76:	f000 fe79 	bl	800b76c <_Bfree>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9800      	ldr	r0, [sp, #0]
 800aa7e:	702b      	strb	r3, [r5, #0]
 800aa80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa82:	3001      	adds	r0, #1
 800aa84:	6018      	str	r0, [r3, #0]
 800aa86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f43f acf1 	beq.w	800a470 <_dtoa_r+0xa0>
 800aa8e:	601d      	str	r5, [r3, #0]
 800aa90:	e4ee      	b.n	800a470 <_dtoa_r+0xa0>
 800aa92:	9f00      	ldr	r7, [sp, #0]
 800aa94:	462b      	mov	r3, r5
 800aa96:	461d      	mov	r5, r3
 800aa98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa9c:	2a39      	cmp	r2, #57	; 0x39
 800aa9e:	d106      	bne.n	800aaae <_dtoa_r+0x6de>
 800aaa0:	9a01      	ldr	r2, [sp, #4]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d1f7      	bne.n	800aa96 <_dtoa_r+0x6c6>
 800aaa6:	9901      	ldr	r1, [sp, #4]
 800aaa8:	2230      	movs	r2, #48	; 0x30
 800aaaa:	3701      	adds	r7, #1
 800aaac:	700a      	strb	r2, [r1, #0]
 800aaae:	781a      	ldrb	r2, [r3, #0]
 800aab0:	3201      	adds	r2, #1
 800aab2:	701a      	strb	r2, [r3, #0]
 800aab4:	e790      	b.n	800a9d8 <_dtoa_r+0x608>
 800aab6:	4ba6      	ldr	r3, [pc, #664]	; (800ad50 <_dtoa_r+0x980>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	f7f5 fdad 	bl	8000618 <__aeabi_dmul>
 800aabe:	2200      	movs	r2, #0
 800aac0:	2300      	movs	r3, #0
 800aac2:	4606      	mov	r6, r0
 800aac4:	460f      	mov	r7, r1
 800aac6:	f7f6 f80f 	bl	8000ae8 <__aeabi_dcmpeq>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d09d      	beq.n	800aa0a <_dtoa_r+0x63a>
 800aace:	e7cf      	b.n	800aa70 <_dtoa_r+0x6a0>
 800aad0:	9a08      	ldr	r2, [sp, #32]
 800aad2:	2a00      	cmp	r2, #0
 800aad4:	f000 80d7 	beq.w	800ac86 <_dtoa_r+0x8b6>
 800aad8:	9a06      	ldr	r2, [sp, #24]
 800aada:	2a01      	cmp	r2, #1
 800aadc:	f300 80ba 	bgt.w	800ac54 <_dtoa_r+0x884>
 800aae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aae2:	2a00      	cmp	r2, #0
 800aae4:	f000 80b2 	beq.w	800ac4c <_dtoa_r+0x87c>
 800aae8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aaec:	9e07      	ldr	r6, [sp, #28]
 800aaee:	9d04      	ldr	r5, [sp, #16]
 800aaf0:	9a04      	ldr	r2, [sp, #16]
 800aaf2:	441a      	add	r2, r3
 800aaf4:	9204      	str	r2, [sp, #16]
 800aaf6:	9a05      	ldr	r2, [sp, #20]
 800aaf8:	2101      	movs	r1, #1
 800aafa:	441a      	add	r2, r3
 800aafc:	4620      	mov	r0, r4
 800aafe:	9205      	str	r2, [sp, #20]
 800ab00:	f000 ff36 	bl	800b970 <__i2b>
 800ab04:	4607      	mov	r7, r0
 800ab06:	2d00      	cmp	r5, #0
 800ab08:	dd0c      	ble.n	800ab24 <_dtoa_r+0x754>
 800ab0a:	9b05      	ldr	r3, [sp, #20]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	dd09      	ble.n	800ab24 <_dtoa_r+0x754>
 800ab10:	42ab      	cmp	r3, r5
 800ab12:	9a04      	ldr	r2, [sp, #16]
 800ab14:	bfa8      	it	ge
 800ab16:	462b      	movge	r3, r5
 800ab18:	1ad2      	subs	r2, r2, r3
 800ab1a:	9204      	str	r2, [sp, #16]
 800ab1c:	9a05      	ldr	r2, [sp, #20]
 800ab1e:	1aed      	subs	r5, r5, r3
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	9305      	str	r3, [sp, #20]
 800ab24:	9b07      	ldr	r3, [sp, #28]
 800ab26:	b31b      	cbz	r3, 800ab70 <_dtoa_r+0x7a0>
 800ab28:	9b08      	ldr	r3, [sp, #32]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 80af 	beq.w	800ac8e <_dtoa_r+0x8be>
 800ab30:	2e00      	cmp	r6, #0
 800ab32:	dd13      	ble.n	800ab5c <_dtoa_r+0x78c>
 800ab34:	4639      	mov	r1, r7
 800ab36:	4632      	mov	r2, r6
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f000 ffd9 	bl	800baf0 <__pow5mult>
 800ab3e:	ee18 2a10 	vmov	r2, s16
 800ab42:	4601      	mov	r1, r0
 800ab44:	4607      	mov	r7, r0
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 ff28 	bl	800b99c <__multiply>
 800ab4c:	ee18 1a10 	vmov	r1, s16
 800ab50:	4680      	mov	r8, r0
 800ab52:	4620      	mov	r0, r4
 800ab54:	f000 fe0a 	bl	800b76c <_Bfree>
 800ab58:	ee08 8a10 	vmov	s16, r8
 800ab5c:	9b07      	ldr	r3, [sp, #28]
 800ab5e:	1b9a      	subs	r2, r3, r6
 800ab60:	d006      	beq.n	800ab70 <_dtoa_r+0x7a0>
 800ab62:	ee18 1a10 	vmov	r1, s16
 800ab66:	4620      	mov	r0, r4
 800ab68:	f000 ffc2 	bl	800baf0 <__pow5mult>
 800ab6c:	ee08 0a10 	vmov	s16, r0
 800ab70:	2101      	movs	r1, #1
 800ab72:	4620      	mov	r0, r4
 800ab74:	f000 fefc 	bl	800b970 <__i2b>
 800ab78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	4606      	mov	r6, r0
 800ab7e:	f340 8088 	ble.w	800ac92 <_dtoa_r+0x8c2>
 800ab82:	461a      	mov	r2, r3
 800ab84:	4601      	mov	r1, r0
 800ab86:	4620      	mov	r0, r4
 800ab88:	f000 ffb2 	bl	800baf0 <__pow5mult>
 800ab8c:	9b06      	ldr	r3, [sp, #24]
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	4606      	mov	r6, r0
 800ab92:	f340 8081 	ble.w	800ac98 <_dtoa_r+0x8c8>
 800ab96:	f04f 0800 	mov.w	r8, #0
 800ab9a:	6933      	ldr	r3, [r6, #16]
 800ab9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aba0:	6918      	ldr	r0, [r3, #16]
 800aba2:	f000 fe95 	bl	800b8d0 <__hi0bits>
 800aba6:	f1c0 0020 	rsb	r0, r0, #32
 800abaa:	9b05      	ldr	r3, [sp, #20]
 800abac:	4418      	add	r0, r3
 800abae:	f010 001f 	ands.w	r0, r0, #31
 800abb2:	f000 8092 	beq.w	800acda <_dtoa_r+0x90a>
 800abb6:	f1c0 0320 	rsb	r3, r0, #32
 800abba:	2b04      	cmp	r3, #4
 800abbc:	f340 808a 	ble.w	800acd4 <_dtoa_r+0x904>
 800abc0:	f1c0 001c 	rsb	r0, r0, #28
 800abc4:	9b04      	ldr	r3, [sp, #16]
 800abc6:	4403      	add	r3, r0
 800abc8:	9304      	str	r3, [sp, #16]
 800abca:	9b05      	ldr	r3, [sp, #20]
 800abcc:	4403      	add	r3, r0
 800abce:	4405      	add	r5, r0
 800abd0:	9305      	str	r3, [sp, #20]
 800abd2:	9b04      	ldr	r3, [sp, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	dd07      	ble.n	800abe8 <_dtoa_r+0x818>
 800abd8:	ee18 1a10 	vmov	r1, s16
 800abdc:	461a      	mov	r2, r3
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 ffe0 	bl	800bba4 <__lshift>
 800abe4:	ee08 0a10 	vmov	s16, r0
 800abe8:	9b05      	ldr	r3, [sp, #20]
 800abea:	2b00      	cmp	r3, #0
 800abec:	dd05      	ble.n	800abfa <_dtoa_r+0x82a>
 800abee:	4631      	mov	r1, r6
 800abf0:	461a      	mov	r2, r3
 800abf2:	4620      	mov	r0, r4
 800abf4:	f000 ffd6 	bl	800bba4 <__lshift>
 800abf8:	4606      	mov	r6, r0
 800abfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d06e      	beq.n	800acde <_dtoa_r+0x90e>
 800ac00:	ee18 0a10 	vmov	r0, s16
 800ac04:	4631      	mov	r1, r6
 800ac06:	f001 f83d 	bl	800bc84 <__mcmp>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	da67      	bge.n	800acde <_dtoa_r+0x90e>
 800ac0e:	9b00      	ldr	r3, [sp, #0]
 800ac10:	3b01      	subs	r3, #1
 800ac12:	ee18 1a10 	vmov	r1, s16
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	220a      	movs	r2, #10
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 fdc7 	bl	800b7b0 <__multadd>
 800ac22:	9b08      	ldr	r3, [sp, #32]
 800ac24:	ee08 0a10 	vmov	s16, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f000 81b1 	beq.w	800af90 <_dtoa_r+0xbc0>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	4639      	mov	r1, r7
 800ac32:	220a      	movs	r2, #10
 800ac34:	4620      	mov	r0, r4
 800ac36:	f000 fdbb 	bl	800b7b0 <__multadd>
 800ac3a:	9b02      	ldr	r3, [sp, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	4607      	mov	r7, r0
 800ac40:	f300 808e 	bgt.w	800ad60 <_dtoa_r+0x990>
 800ac44:	9b06      	ldr	r3, [sp, #24]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	dc51      	bgt.n	800acee <_dtoa_r+0x91e>
 800ac4a:	e089      	b.n	800ad60 <_dtoa_r+0x990>
 800ac4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac52:	e74b      	b.n	800aaec <_dtoa_r+0x71c>
 800ac54:	9b03      	ldr	r3, [sp, #12]
 800ac56:	1e5e      	subs	r6, r3, #1
 800ac58:	9b07      	ldr	r3, [sp, #28]
 800ac5a:	42b3      	cmp	r3, r6
 800ac5c:	bfbf      	itttt	lt
 800ac5e:	9b07      	ldrlt	r3, [sp, #28]
 800ac60:	9607      	strlt	r6, [sp, #28]
 800ac62:	1af2      	sublt	r2, r6, r3
 800ac64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ac66:	bfb6      	itet	lt
 800ac68:	189b      	addlt	r3, r3, r2
 800ac6a:	1b9e      	subge	r6, r3, r6
 800ac6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ac6e:	9b03      	ldr	r3, [sp, #12]
 800ac70:	bfb8      	it	lt
 800ac72:	2600      	movlt	r6, #0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bfb7      	itett	lt
 800ac78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ac7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ac80:	1a9d      	sublt	r5, r3, r2
 800ac82:	2300      	movlt	r3, #0
 800ac84:	e734      	b.n	800aaf0 <_dtoa_r+0x720>
 800ac86:	9e07      	ldr	r6, [sp, #28]
 800ac88:	9d04      	ldr	r5, [sp, #16]
 800ac8a:	9f08      	ldr	r7, [sp, #32]
 800ac8c:	e73b      	b.n	800ab06 <_dtoa_r+0x736>
 800ac8e:	9a07      	ldr	r2, [sp, #28]
 800ac90:	e767      	b.n	800ab62 <_dtoa_r+0x792>
 800ac92:	9b06      	ldr	r3, [sp, #24]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	dc18      	bgt.n	800acca <_dtoa_r+0x8fa>
 800ac98:	f1ba 0f00 	cmp.w	sl, #0
 800ac9c:	d115      	bne.n	800acca <_dtoa_r+0x8fa>
 800ac9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aca2:	b993      	cbnz	r3, 800acca <_dtoa_r+0x8fa>
 800aca4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aca8:	0d1b      	lsrs	r3, r3, #20
 800acaa:	051b      	lsls	r3, r3, #20
 800acac:	b183      	cbz	r3, 800acd0 <_dtoa_r+0x900>
 800acae:	9b04      	ldr	r3, [sp, #16]
 800acb0:	3301      	adds	r3, #1
 800acb2:	9304      	str	r3, [sp, #16]
 800acb4:	9b05      	ldr	r3, [sp, #20]
 800acb6:	3301      	adds	r3, #1
 800acb8:	9305      	str	r3, [sp, #20]
 800acba:	f04f 0801 	mov.w	r8, #1
 800acbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f47f af6a 	bne.w	800ab9a <_dtoa_r+0x7ca>
 800acc6:	2001      	movs	r0, #1
 800acc8:	e76f      	b.n	800abaa <_dtoa_r+0x7da>
 800acca:	f04f 0800 	mov.w	r8, #0
 800acce:	e7f6      	b.n	800acbe <_dtoa_r+0x8ee>
 800acd0:	4698      	mov	r8, r3
 800acd2:	e7f4      	b.n	800acbe <_dtoa_r+0x8ee>
 800acd4:	f43f af7d 	beq.w	800abd2 <_dtoa_r+0x802>
 800acd8:	4618      	mov	r0, r3
 800acda:	301c      	adds	r0, #28
 800acdc:	e772      	b.n	800abc4 <_dtoa_r+0x7f4>
 800acde:	9b03      	ldr	r3, [sp, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	dc37      	bgt.n	800ad54 <_dtoa_r+0x984>
 800ace4:	9b06      	ldr	r3, [sp, #24]
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	dd34      	ble.n	800ad54 <_dtoa_r+0x984>
 800acea:	9b03      	ldr	r3, [sp, #12]
 800acec:	9302      	str	r3, [sp, #8]
 800acee:	9b02      	ldr	r3, [sp, #8]
 800acf0:	b96b      	cbnz	r3, 800ad0e <_dtoa_r+0x93e>
 800acf2:	4631      	mov	r1, r6
 800acf4:	2205      	movs	r2, #5
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 fd5a 	bl	800b7b0 <__multadd>
 800acfc:	4601      	mov	r1, r0
 800acfe:	4606      	mov	r6, r0
 800ad00:	ee18 0a10 	vmov	r0, s16
 800ad04:	f000 ffbe 	bl	800bc84 <__mcmp>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	f73f adbb 	bgt.w	800a884 <_dtoa_r+0x4b4>
 800ad0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad10:	9d01      	ldr	r5, [sp, #4]
 800ad12:	43db      	mvns	r3, r3
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	f04f 0800 	mov.w	r8, #0
 800ad1a:	4631      	mov	r1, r6
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 fd25 	bl	800b76c <_Bfree>
 800ad22:	2f00      	cmp	r7, #0
 800ad24:	f43f aea4 	beq.w	800aa70 <_dtoa_r+0x6a0>
 800ad28:	f1b8 0f00 	cmp.w	r8, #0
 800ad2c:	d005      	beq.n	800ad3a <_dtoa_r+0x96a>
 800ad2e:	45b8      	cmp	r8, r7
 800ad30:	d003      	beq.n	800ad3a <_dtoa_r+0x96a>
 800ad32:	4641      	mov	r1, r8
 800ad34:	4620      	mov	r0, r4
 800ad36:	f000 fd19 	bl	800b76c <_Bfree>
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f000 fd15 	bl	800b76c <_Bfree>
 800ad42:	e695      	b.n	800aa70 <_dtoa_r+0x6a0>
 800ad44:	2600      	movs	r6, #0
 800ad46:	4637      	mov	r7, r6
 800ad48:	e7e1      	b.n	800ad0e <_dtoa_r+0x93e>
 800ad4a:	9700      	str	r7, [sp, #0]
 800ad4c:	4637      	mov	r7, r6
 800ad4e:	e599      	b.n	800a884 <_dtoa_r+0x4b4>
 800ad50:	40240000 	.word	0x40240000
 800ad54:	9b08      	ldr	r3, [sp, #32]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f000 80ca 	beq.w	800aef0 <_dtoa_r+0xb20>
 800ad5c:	9b03      	ldr	r3, [sp, #12]
 800ad5e:	9302      	str	r3, [sp, #8]
 800ad60:	2d00      	cmp	r5, #0
 800ad62:	dd05      	ble.n	800ad70 <_dtoa_r+0x9a0>
 800ad64:	4639      	mov	r1, r7
 800ad66:	462a      	mov	r2, r5
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f000 ff1b 	bl	800bba4 <__lshift>
 800ad6e:	4607      	mov	r7, r0
 800ad70:	f1b8 0f00 	cmp.w	r8, #0
 800ad74:	d05b      	beq.n	800ae2e <_dtoa_r+0xa5e>
 800ad76:	6879      	ldr	r1, [r7, #4]
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f000 fcb7 	bl	800b6ec <_Balloc>
 800ad7e:	4605      	mov	r5, r0
 800ad80:	b928      	cbnz	r0, 800ad8e <_dtoa_r+0x9be>
 800ad82:	4b87      	ldr	r3, [pc, #540]	; (800afa0 <_dtoa_r+0xbd0>)
 800ad84:	4602      	mov	r2, r0
 800ad86:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad8a:	f7ff bb3b 	b.w	800a404 <_dtoa_r+0x34>
 800ad8e:	693a      	ldr	r2, [r7, #16]
 800ad90:	3202      	adds	r2, #2
 800ad92:	0092      	lsls	r2, r2, #2
 800ad94:	f107 010c 	add.w	r1, r7, #12
 800ad98:	300c      	adds	r0, #12
 800ad9a:	f7fd fc95 	bl	80086c8 <memcpy>
 800ad9e:	2201      	movs	r2, #1
 800ada0:	4629      	mov	r1, r5
 800ada2:	4620      	mov	r0, r4
 800ada4:	f000 fefe 	bl	800bba4 <__lshift>
 800ada8:	9b01      	ldr	r3, [sp, #4]
 800adaa:	f103 0901 	add.w	r9, r3, #1
 800adae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800adb2:	4413      	add	r3, r2
 800adb4:	9305      	str	r3, [sp, #20]
 800adb6:	f00a 0301 	and.w	r3, sl, #1
 800adba:	46b8      	mov	r8, r7
 800adbc:	9304      	str	r3, [sp, #16]
 800adbe:	4607      	mov	r7, r0
 800adc0:	4631      	mov	r1, r6
 800adc2:	ee18 0a10 	vmov	r0, s16
 800adc6:	f7ff fa75 	bl	800a2b4 <quorem>
 800adca:	4641      	mov	r1, r8
 800adcc:	9002      	str	r0, [sp, #8]
 800adce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800add2:	ee18 0a10 	vmov	r0, s16
 800add6:	f000 ff55 	bl	800bc84 <__mcmp>
 800adda:	463a      	mov	r2, r7
 800addc:	9003      	str	r0, [sp, #12]
 800adde:	4631      	mov	r1, r6
 800ade0:	4620      	mov	r0, r4
 800ade2:	f000 ff6b 	bl	800bcbc <__mdiff>
 800ade6:	68c2      	ldr	r2, [r0, #12]
 800ade8:	f109 3bff 	add.w	fp, r9, #4294967295
 800adec:	4605      	mov	r5, r0
 800adee:	bb02      	cbnz	r2, 800ae32 <_dtoa_r+0xa62>
 800adf0:	4601      	mov	r1, r0
 800adf2:	ee18 0a10 	vmov	r0, s16
 800adf6:	f000 ff45 	bl	800bc84 <__mcmp>
 800adfa:	4602      	mov	r2, r0
 800adfc:	4629      	mov	r1, r5
 800adfe:	4620      	mov	r0, r4
 800ae00:	9207      	str	r2, [sp, #28]
 800ae02:	f000 fcb3 	bl	800b76c <_Bfree>
 800ae06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ae0a:	ea43 0102 	orr.w	r1, r3, r2
 800ae0e:	9b04      	ldr	r3, [sp, #16]
 800ae10:	430b      	orrs	r3, r1
 800ae12:	464d      	mov	r5, r9
 800ae14:	d10f      	bne.n	800ae36 <_dtoa_r+0xa66>
 800ae16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae1a:	d02a      	beq.n	800ae72 <_dtoa_r+0xaa2>
 800ae1c:	9b03      	ldr	r3, [sp, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	dd02      	ble.n	800ae28 <_dtoa_r+0xa58>
 800ae22:	9b02      	ldr	r3, [sp, #8]
 800ae24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ae28:	f88b a000 	strb.w	sl, [fp]
 800ae2c:	e775      	b.n	800ad1a <_dtoa_r+0x94a>
 800ae2e:	4638      	mov	r0, r7
 800ae30:	e7ba      	b.n	800ada8 <_dtoa_r+0x9d8>
 800ae32:	2201      	movs	r2, #1
 800ae34:	e7e2      	b.n	800adfc <_dtoa_r+0xa2c>
 800ae36:	9b03      	ldr	r3, [sp, #12]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	db04      	blt.n	800ae46 <_dtoa_r+0xa76>
 800ae3c:	9906      	ldr	r1, [sp, #24]
 800ae3e:	430b      	orrs	r3, r1
 800ae40:	9904      	ldr	r1, [sp, #16]
 800ae42:	430b      	orrs	r3, r1
 800ae44:	d122      	bne.n	800ae8c <_dtoa_r+0xabc>
 800ae46:	2a00      	cmp	r2, #0
 800ae48:	ddee      	ble.n	800ae28 <_dtoa_r+0xa58>
 800ae4a:	ee18 1a10 	vmov	r1, s16
 800ae4e:	2201      	movs	r2, #1
 800ae50:	4620      	mov	r0, r4
 800ae52:	f000 fea7 	bl	800bba4 <__lshift>
 800ae56:	4631      	mov	r1, r6
 800ae58:	ee08 0a10 	vmov	s16, r0
 800ae5c:	f000 ff12 	bl	800bc84 <__mcmp>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	dc03      	bgt.n	800ae6c <_dtoa_r+0xa9c>
 800ae64:	d1e0      	bne.n	800ae28 <_dtoa_r+0xa58>
 800ae66:	f01a 0f01 	tst.w	sl, #1
 800ae6a:	d0dd      	beq.n	800ae28 <_dtoa_r+0xa58>
 800ae6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae70:	d1d7      	bne.n	800ae22 <_dtoa_r+0xa52>
 800ae72:	2339      	movs	r3, #57	; 0x39
 800ae74:	f88b 3000 	strb.w	r3, [fp]
 800ae78:	462b      	mov	r3, r5
 800ae7a:	461d      	mov	r5, r3
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae82:	2a39      	cmp	r2, #57	; 0x39
 800ae84:	d071      	beq.n	800af6a <_dtoa_r+0xb9a>
 800ae86:	3201      	adds	r2, #1
 800ae88:	701a      	strb	r2, [r3, #0]
 800ae8a:	e746      	b.n	800ad1a <_dtoa_r+0x94a>
 800ae8c:	2a00      	cmp	r2, #0
 800ae8e:	dd07      	ble.n	800aea0 <_dtoa_r+0xad0>
 800ae90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae94:	d0ed      	beq.n	800ae72 <_dtoa_r+0xaa2>
 800ae96:	f10a 0301 	add.w	r3, sl, #1
 800ae9a:	f88b 3000 	strb.w	r3, [fp]
 800ae9e:	e73c      	b.n	800ad1a <_dtoa_r+0x94a>
 800aea0:	9b05      	ldr	r3, [sp, #20]
 800aea2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aea6:	4599      	cmp	r9, r3
 800aea8:	d047      	beq.n	800af3a <_dtoa_r+0xb6a>
 800aeaa:	ee18 1a10 	vmov	r1, s16
 800aeae:	2300      	movs	r3, #0
 800aeb0:	220a      	movs	r2, #10
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f000 fc7c 	bl	800b7b0 <__multadd>
 800aeb8:	45b8      	cmp	r8, r7
 800aeba:	ee08 0a10 	vmov	s16, r0
 800aebe:	f04f 0300 	mov.w	r3, #0
 800aec2:	f04f 020a 	mov.w	r2, #10
 800aec6:	4641      	mov	r1, r8
 800aec8:	4620      	mov	r0, r4
 800aeca:	d106      	bne.n	800aeda <_dtoa_r+0xb0a>
 800aecc:	f000 fc70 	bl	800b7b0 <__multadd>
 800aed0:	4680      	mov	r8, r0
 800aed2:	4607      	mov	r7, r0
 800aed4:	f109 0901 	add.w	r9, r9, #1
 800aed8:	e772      	b.n	800adc0 <_dtoa_r+0x9f0>
 800aeda:	f000 fc69 	bl	800b7b0 <__multadd>
 800aede:	4639      	mov	r1, r7
 800aee0:	4680      	mov	r8, r0
 800aee2:	2300      	movs	r3, #0
 800aee4:	220a      	movs	r2, #10
 800aee6:	4620      	mov	r0, r4
 800aee8:	f000 fc62 	bl	800b7b0 <__multadd>
 800aeec:	4607      	mov	r7, r0
 800aeee:	e7f1      	b.n	800aed4 <_dtoa_r+0xb04>
 800aef0:	9b03      	ldr	r3, [sp, #12]
 800aef2:	9302      	str	r3, [sp, #8]
 800aef4:	9d01      	ldr	r5, [sp, #4]
 800aef6:	ee18 0a10 	vmov	r0, s16
 800aefa:	4631      	mov	r1, r6
 800aefc:	f7ff f9da 	bl	800a2b4 <quorem>
 800af00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af04:	9b01      	ldr	r3, [sp, #4]
 800af06:	f805 ab01 	strb.w	sl, [r5], #1
 800af0a:	1aea      	subs	r2, r5, r3
 800af0c:	9b02      	ldr	r3, [sp, #8]
 800af0e:	4293      	cmp	r3, r2
 800af10:	dd09      	ble.n	800af26 <_dtoa_r+0xb56>
 800af12:	ee18 1a10 	vmov	r1, s16
 800af16:	2300      	movs	r3, #0
 800af18:	220a      	movs	r2, #10
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 fc48 	bl	800b7b0 <__multadd>
 800af20:	ee08 0a10 	vmov	s16, r0
 800af24:	e7e7      	b.n	800aef6 <_dtoa_r+0xb26>
 800af26:	9b02      	ldr	r3, [sp, #8]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	bfc8      	it	gt
 800af2c:	461d      	movgt	r5, r3
 800af2e:	9b01      	ldr	r3, [sp, #4]
 800af30:	bfd8      	it	le
 800af32:	2501      	movle	r5, #1
 800af34:	441d      	add	r5, r3
 800af36:	f04f 0800 	mov.w	r8, #0
 800af3a:	ee18 1a10 	vmov	r1, s16
 800af3e:	2201      	movs	r2, #1
 800af40:	4620      	mov	r0, r4
 800af42:	f000 fe2f 	bl	800bba4 <__lshift>
 800af46:	4631      	mov	r1, r6
 800af48:	ee08 0a10 	vmov	s16, r0
 800af4c:	f000 fe9a 	bl	800bc84 <__mcmp>
 800af50:	2800      	cmp	r0, #0
 800af52:	dc91      	bgt.n	800ae78 <_dtoa_r+0xaa8>
 800af54:	d102      	bne.n	800af5c <_dtoa_r+0xb8c>
 800af56:	f01a 0f01 	tst.w	sl, #1
 800af5a:	d18d      	bne.n	800ae78 <_dtoa_r+0xaa8>
 800af5c:	462b      	mov	r3, r5
 800af5e:	461d      	mov	r5, r3
 800af60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af64:	2a30      	cmp	r2, #48	; 0x30
 800af66:	d0fa      	beq.n	800af5e <_dtoa_r+0xb8e>
 800af68:	e6d7      	b.n	800ad1a <_dtoa_r+0x94a>
 800af6a:	9a01      	ldr	r2, [sp, #4]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d184      	bne.n	800ae7a <_dtoa_r+0xaaa>
 800af70:	9b00      	ldr	r3, [sp, #0]
 800af72:	3301      	adds	r3, #1
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	2331      	movs	r3, #49	; 0x31
 800af78:	7013      	strb	r3, [r2, #0]
 800af7a:	e6ce      	b.n	800ad1a <_dtoa_r+0x94a>
 800af7c:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <_dtoa_r+0xbd4>)
 800af7e:	f7ff ba95 	b.w	800a4ac <_dtoa_r+0xdc>
 800af82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af84:	2b00      	cmp	r3, #0
 800af86:	f47f aa6e 	bne.w	800a466 <_dtoa_r+0x96>
 800af8a:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <_dtoa_r+0xbd8>)
 800af8c:	f7ff ba8e 	b.w	800a4ac <_dtoa_r+0xdc>
 800af90:	9b02      	ldr	r3, [sp, #8]
 800af92:	2b00      	cmp	r3, #0
 800af94:	dcae      	bgt.n	800aef4 <_dtoa_r+0xb24>
 800af96:	9b06      	ldr	r3, [sp, #24]
 800af98:	2b02      	cmp	r3, #2
 800af9a:	f73f aea8 	bgt.w	800acee <_dtoa_r+0x91e>
 800af9e:	e7a9      	b.n	800aef4 <_dtoa_r+0xb24>
 800afa0:	0800f120 	.word	0x0800f120
 800afa4:	0800f319 	.word	0x0800f319
 800afa8:	0800f0a1 	.word	0x0800f0a1

0800afac <rshift>:
 800afac:	6903      	ldr	r3, [r0, #16]
 800afae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800afb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800afba:	f100 0414 	add.w	r4, r0, #20
 800afbe:	dd45      	ble.n	800b04c <rshift+0xa0>
 800afc0:	f011 011f 	ands.w	r1, r1, #31
 800afc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800afc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800afcc:	d10c      	bne.n	800afe8 <rshift+0x3c>
 800afce:	f100 0710 	add.w	r7, r0, #16
 800afd2:	4629      	mov	r1, r5
 800afd4:	42b1      	cmp	r1, r6
 800afd6:	d334      	bcc.n	800b042 <rshift+0x96>
 800afd8:	1a9b      	subs	r3, r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	1eea      	subs	r2, r5, #3
 800afde:	4296      	cmp	r6, r2
 800afe0:	bf38      	it	cc
 800afe2:	2300      	movcc	r3, #0
 800afe4:	4423      	add	r3, r4
 800afe6:	e015      	b.n	800b014 <rshift+0x68>
 800afe8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800afec:	f1c1 0820 	rsb	r8, r1, #32
 800aff0:	40cf      	lsrs	r7, r1
 800aff2:	f105 0e04 	add.w	lr, r5, #4
 800aff6:	46a1      	mov	r9, r4
 800aff8:	4576      	cmp	r6, lr
 800affa:	46f4      	mov	ip, lr
 800affc:	d815      	bhi.n	800b02a <rshift+0x7e>
 800affe:	1a9a      	subs	r2, r3, r2
 800b000:	0092      	lsls	r2, r2, #2
 800b002:	3a04      	subs	r2, #4
 800b004:	3501      	adds	r5, #1
 800b006:	42ae      	cmp	r6, r5
 800b008:	bf38      	it	cc
 800b00a:	2200      	movcc	r2, #0
 800b00c:	18a3      	adds	r3, r4, r2
 800b00e:	50a7      	str	r7, [r4, r2]
 800b010:	b107      	cbz	r7, 800b014 <rshift+0x68>
 800b012:	3304      	adds	r3, #4
 800b014:	1b1a      	subs	r2, r3, r4
 800b016:	42a3      	cmp	r3, r4
 800b018:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b01c:	bf08      	it	eq
 800b01e:	2300      	moveq	r3, #0
 800b020:	6102      	str	r2, [r0, #16]
 800b022:	bf08      	it	eq
 800b024:	6143      	streq	r3, [r0, #20]
 800b026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b02a:	f8dc c000 	ldr.w	ip, [ip]
 800b02e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b032:	ea4c 0707 	orr.w	r7, ip, r7
 800b036:	f849 7b04 	str.w	r7, [r9], #4
 800b03a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b03e:	40cf      	lsrs	r7, r1
 800b040:	e7da      	b.n	800aff8 <rshift+0x4c>
 800b042:	f851 cb04 	ldr.w	ip, [r1], #4
 800b046:	f847 cf04 	str.w	ip, [r7, #4]!
 800b04a:	e7c3      	b.n	800afd4 <rshift+0x28>
 800b04c:	4623      	mov	r3, r4
 800b04e:	e7e1      	b.n	800b014 <rshift+0x68>

0800b050 <__hexdig_fun>:
 800b050:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b054:	2b09      	cmp	r3, #9
 800b056:	d802      	bhi.n	800b05e <__hexdig_fun+0xe>
 800b058:	3820      	subs	r0, #32
 800b05a:	b2c0      	uxtb	r0, r0
 800b05c:	4770      	bx	lr
 800b05e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b062:	2b05      	cmp	r3, #5
 800b064:	d801      	bhi.n	800b06a <__hexdig_fun+0x1a>
 800b066:	3847      	subs	r0, #71	; 0x47
 800b068:	e7f7      	b.n	800b05a <__hexdig_fun+0xa>
 800b06a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b06e:	2b05      	cmp	r3, #5
 800b070:	d801      	bhi.n	800b076 <__hexdig_fun+0x26>
 800b072:	3827      	subs	r0, #39	; 0x27
 800b074:	e7f1      	b.n	800b05a <__hexdig_fun+0xa>
 800b076:	2000      	movs	r0, #0
 800b078:	4770      	bx	lr
	...

0800b07c <__gethex>:
 800b07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b080:	ed2d 8b02 	vpush	{d8}
 800b084:	b089      	sub	sp, #36	; 0x24
 800b086:	ee08 0a10 	vmov	s16, r0
 800b08a:	9304      	str	r3, [sp, #16]
 800b08c:	4bb4      	ldr	r3, [pc, #720]	; (800b360 <__gethex+0x2e4>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	9301      	str	r3, [sp, #4]
 800b092:	4618      	mov	r0, r3
 800b094:	468b      	mov	fp, r1
 800b096:	4690      	mov	r8, r2
 800b098:	f7f5 f8aa 	bl	80001f0 <strlen>
 800b09c:	9b01      	ldr	r3, [sp, #4]
 800b09e:	f8db 2000 	ldr.w	r2, [fp]
 800b0a2:	4403      	add	r3, r0
 800b0a4:	4682      	mov	sl, r0
 800b0a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b0aa:	9305      	str	r3, [sp, #20]
 800b0ac:	1c93      	adds	r3, r2, #2
 800b0ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b0b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b0b6:	32fe      	adds	r2, #254	; 0xfe
 800b0b8:	18d1      	adds	r1, r2, r3
 800b0ba:	461f      	mov	r7, r3
 800b0bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b0c0:	9100      	str	r1, [sp, #0]
 800b0c2:	2830      	cmp	r0, #48	; 0x30
 800b0c4:	d0f8      	beq.n	800b0b8 <__gethex+0x3c>
 800b0c6:	f7ff ffc3 	bl	800b050 <__hexdig_fun>
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d13a      	bne.n	800b146 <__gethex+0xca>
 800b0d0:	9901      	ldr	r1, [sp, #4]
 800b0d2:	4652      	mov	r2, sl
 800b0d4:	4638      	mov	r0, r7
 800b0d6:	f001 fda3 	bl	800cc20 <strncmp>
 800b0da:	4605      	mov	r5, r0
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d168      	bne.n	800b1b2 <__gethex+0x136>
 800b0e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b0e4:	eb07 060a 	add.w	r6, r7, sl
 800b0e8:	f7ff ffb2 	bl	800b050 <__hexdig_fun>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d062      	beq.n	800b1b6 <__gethex+0x13a>
 800b0f0:	4633      	mov	r3, r6
 800b0f2:	7818      	ldrb	r0, [r3, #0]
 800b0f4:	2830      	cmp	r0, #48	; 0x30
 800b0f6:	461f      	mov	r7, r3
 800b0f8:	f103 0301 	add.w	r3, r3, #1
 800b0fc:	d0f9      	beq.n	800b0f2 <__gethex+0x76>
 800b0fe:	f7ff ffa7 	bl	800b050 <__hexdig_fun>
 800b102:	2301      	movs	r3, #1
 800b104:	fab0 f480 	clz	r4, r0
 800b108:	0964      	lsrs	r4, r4, #5
 800b10a:	4635      	mov	r5, r6
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	463a      	mov	r2, r7
 800b110:	4616      	mov	r6, r2
 800b112:	3201      	adds	r2, #1
 800b114:	7830      	ldrb	r0, [r6, #0]
 800b116:	f7ff ff9b 	bl	800b050 <__hexdig_fun>
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d1f8      	bne.n	800b110 <__gethex+0x94>
 800b11e:	9901      	ldr	r1, [sp, #4]
 800b120:	4652      	mov	r2, sl
 800b122:	4630      	mov	r0, r6
 800b124:	f001 fd7c 	bl	800cc20 <strncmp>
 800b128:	b980      	cbnz	r0, 800b14c <__gethex+0xd0>
 800b12a:	b94d      	cbnz	r5, 800b140 <__gethex+0xc4>
 800b12c:	eb06 050a 	add.w	r5, r6, sl
 800b130:	462a      	mov	r2, r5
 800b132:	4616      	mov	r6, r2
 800b134:	3201      	adds	r2, #1
 800b136:	7830      	ldrb	r0, [r6, #0]
 800b138:	f7ff ff8a 	bl	800b050 <__hexdig_fun>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d1f8      	bne.n	800b132 <__gethex+0xb6>
 800b140:	1bad      	subs	r5, r5, r6
 800b142:	00ad      	lsls	r5, r5, #2
 800b144:	e004      	b.n	800b150 <__gethex+0xd4>
 800b146:	2400      	movs	r4, #0
 800b148:	4625      	mov	r5, r4
 800b14a:	e7e0      	b.n	800b10e <__gethex+0x92>
 800b14c:	2d00      	cmp	r5, #0
 800b14e:	d1f7      	bne.n	800b140 <__gethex+0xc4>
 800b150:	7833      	ldrb	r3, [r6, #0]
 800b152:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b156:	2b50      	cmp	r3, #80	; 0x50
 800b158:	d13b      	bne.n	800b1d2 <__gethex+0x156>
 800b15a:	7873      	ldrb	r3, [r6, #1]
 800b15c:	2b2b      	cmp	r3, #43	; 0x2b
 800b15e:	d02c      	beq.n	800b1ba <__gethex+0x13e>
 800b160:	2b2d      	cmp	r3, #45	; 0x2d
 800b162:	d02e      	beq.n	800b1c2 <__gethex+0x146>
 800b164:	1c71      	adds	r1, r6, #1
 800b166:	f04f 0900 	mov.w	r9, #0
 800b16a:	7808      	ldrb	r0, [r1, #0]
 800b16c:	f7ff ff70 	bl	800b050 <__hexdig_fun>
 800b170:	1e43      	subs	r3, r0, #1
 800b172:	b2db      	uxtb	r3, r3
 800b174:	2b18      	cmp	r3, #24
 800b176:	d82c      	bhi.n	800b1d2 <__gethex+0x156>
 800b178:	f1a0 0210 	sub.w	r2, r0, #16
 800b17c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b180:	f7ff ff66 	bl	800b050 <__hexdig_fun>
 800b184:	1e43      	subs	r3, r0, #1
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b18      	cmp	r3, #24
 800b18a:	d91d      	bls.n	800b1c8 <__gethex+0x14c>
 800b18c:	f1b9 0f00 	cmp.w	r9, #0
 800b190:	d000      	beq.n	800b194 <__gethex+0x118>
 800b192:	4252      	negs	r2, r2
 800b194:	4415      	add	r5, r2
 800b196:	f8cb 1000 	str.w	r1, [fp]
 800b19a:	b1e4      	cbz	r4, 800b1d6 <__gethex+0x15a>
 800b19c:	9b00      	ldr	r3, [sp, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	bf14      	ite	ne
 800b1a2:	2700      	movne	r7, #0
 800b1a4:	2706      	moveq	r7, #6
 800b1a6:	4638      	mov	r0, r7
 800b1a8:	b009      	add	sp, #36	; 0x24
 800b1aa:	ecbd 8b02 	vpop	{d8}
 800b1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b2:	463e      	mov	r6, r7
 800b1b4:	4625      	mov	r5, r4
 800b1b6:	2401      	movs	r4, #1
 800b1b8:	e7ca      	b.n	800b150 <__gethex+0xd4>
 800b1ba:	f04f 0900 	mov.w	r9, #0
 800b1be:	1cb1      	adds	r1, r6, #2
 800b1c0:	e7d3      	b.n	800b16a <__gethex+0xee>
 800b1c2:	f04f 0901 	mov.w	r9, #1
 800b1c6:	e7fa      	b.n	800b1be <__gethex+0x142>
 800b1c8:	230a      	movs	r3, #10
 800b1ca:	fb03 0202 	mla	r2, r3, r2, r0
 800b1ce:	3a10      	subs	r2, #16
 800b1d0:	e7d4      	b.n	800b17c <__gethex+0x100>
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	e7df      	b.n	800b196 <__gethex+0x11a>
 800b1d6:	1bf3      	subs	r3, r6, r7
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	4621      	mov	r1, r4
 800b1dc:	2b07      	cmp	r3, #7
 800b1de:	dc0b      	bgt.n	800b1f8 <__gethex+0x17c>
 800b1e0:	ee18 0a10 	vmov	r0, s16
 800b1e4:	f000 fa82 	bl	800b6ec <_Balloc>
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	b940      	cbnz	r0, 800b1fe <__gethex+0x182>
 800b1ec:	4b5d      	ldr	r3, [pc, #372]	; (800b364 <__gethex+0x2e8>)
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	21de      	movs	r1, #222	; 0xde
 800b1f2:	485d      	ldr	r0, [pc, #372]	; (800b368 <__gethex+0x2ec>)
 800b1f4:	f001 fde4 	bl	800cdc0 <__assert_func>
 800b1f8:	3101      	adds	r1, #1
 800b1fa:	105b      	asrs	r3, r3, #1
 800b1fc:	e7ee      	b.n	800b1dc <__gethex+0x160>
 800b1fe:	f100 0914 	add.w	r9, r0, #20
 800b202:	f04f 0b00 	mov.w	fp, #0
 800b206:	f1ca 0301 	rsb	r3, sl, #1
 800b20a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b20e:	f8cd b000 	str.w	fp, [sp]
 800b212:	9306      	str	r3, [sp, #24]
 800b214:	42b7      	cmp	r7, r6
 800b216:	d340      	bcc.n	800b29a <__gethex+0x21e>
 800b218:	9802      	ldr	r0, [sp, #8]
 800b21a:	9b00      	ldr	r3, [sp, #0]
 800b21c:	f840 3b04 	str.w	r3, [r0], #4
 800b220:	eba0 0009 	sub.w	r0, r0, r9
 800b224:	1080      	asrs	r0, r0, #2
 800b226:	0146      	lsls	r6, r0, #5
 800b228:	6120      	str	r0, [r4, #16]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f000 fb50 	bl	800b8d0 <__hi0bits>
 800b230:	1a30      	subs	r0, r6, r0
 800b232:	f8d8 6000 	ldr.w	r6, [r8]
 800b236:	42b0      	cmp	r0, r6
 800b238:	dd63      	ble.n	800b302 <__gethex+0x286>
 800b23a:	1b87      	subs	r7, r0, r6
 800b23c:	4639      	mov	r1, r7
 800b23e:	4620      	mov	r0, r4
 800b240:	f000 fef4 	bl	800c02c <__any_on>
 800b244:	4682      	mov	sl, r0
 800b246:	b1a8      	cbz	r0, 800b274 <__gethex+0x1f8>
 800b248:	1e7b      	subs	r3, r7, #1
 800b24a:	1159      	asrs	r1, r3, #5
 800b24c:	f003 021f 	and.w	r2, r3, #31
 800b250:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b254:	f04f 0a01 	mov.w	sl, #1
 800b258:	fa0a f202 	lsl.w	r2, sl, r2
 800b25c:	420a      	tst	r2, r1
 800b25e:	d009      	beq.n	800b274 <__gethex+0x1f8>
 800b260:	4553      	cmp	r3, sl
 800b262:	dd05      	ble.n	800b270 <__gethex+0x1f4>
 800b264:	1eb9      	subs	r1, r7, #2
 800b266:	4620      	mov	r0, r4
 800b268:	f000 fee0 	bl	800c02c <__any_on>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d145      	bne.n	800b2fc <__gethex+0x280>
 800b270:	f04f 0a02 	mov.w	sl, #2
 800b274:	4639      	mov	r1, r7
 800b276:	4620      	mov	r0, r4
 800b278:	f7ff fe98 	bl	800afac <rshift>
 800b27c:	443d      	add	r5, r7
 800b27e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b282:	42ab      	cmp	r3, r5
 800b284:	da4c      	bge.n	800b320 <__gethex+0x2a4>
 800b286:	ee18 0a10 	vmov	r0, s16
 800b28a:	4621      	mov	r1, r4
 800b28c:	f000 fa6e 	bl	800b76c <_Bfree>
 800b290:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b292:	2300      	movs	r3, #0
 800b294:	6013      	str	r3, [r2, #0]
 800b296:	27a3      	movs	r7, #163	; 0xa3
 800b298:	e785      	b.n	800b1a6 <__gethex+0x12a>
 800b29a:	1e73      	subs	r3, r6, #1
 800b29c:	9a05      	ldr	r2, [sp, #20]
 800b29e:	9303      	str	r3, [sp, #12]
 800b2a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d019      	beq.n	800b2dc <__gethex+0x260>
 800b2a8:	f1bb 0f20 	cmp.w	fp, #32
 800b2ac:	d107      	bne.n	800b2be <__gethex+0x242>
 800b2ae:	9b02      	ldr	r3, [sp, #8]
 800b2b0:	9a00      	ldr	r2, [sp, #0]
 800b2b2:	f843 2b04 	str.w	r2, [r3], #4
 800b2b6:	9302      	str	r3, [sp, #8]
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	469b      	mov	fp, r3
 800b2be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b2c2:	f7ff fec5 	bl	800b050 <__hexdig_fun>
 800b2c6:	9b00      	ldr	r3, [sp, #0]
 800b2c8:	f000 000f 	and.w	r0, r0, #15
 800b2cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800b2d0:	4303      	orrs	r3, r0
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	f10b 0b04 	add.w	fp, fp, #4
 800b2d8:	9b03      	ldr	r3, [sp, #12]
 800b2da:	e00d      	b.n	800b2f8 <__gethex+0x27c>
 800b2dc:	9b03      	ldr	r3, [sp, #12]
 800b2de:	9a06      	ldr	r2, [sp, #24]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	42bb      	cmp	r3, r7
 800b2e4:	d3e0      	bcc.n	800b2a8 <__gethex+0x22c>
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	9901      	ldr	r1, [sp, #4]
 800b2ea:	9307      	str	r3, [sp, #28]
 800b2ec:	4652      	mov	r2, sl
 800b2ee:	f001 fc97 	bl	800cc20 <strncmp>
 800b2f2:	9b07      	ldr	r3, [sp, #28]
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d1d7      	bne.n	800b2a8 <__gethex+0x22c>
 800b2f8:	461e      	mov	r6, r3
 800b2fa:	e78b      	b.n	800b214 <__gethex+0x198>
 800b2fc:	f04f 0a03 	mov.w	sl, #3
 800b300:	e7b8      	b.n	800b274 <__gethex+0x1f8>
 800b302:	da0a      	bge.n	800b31a <__gethex+0x29e>
 800b304:	1a37      	subs	r7, r6, r0
 800b306:	4621      	mov	r1, r4
 800b308:	ee18 0a10 	vmov	r0, s16
 800b30c:	463a      	mov	r2, r7
 800b30e:	f000 fc49 	bl	800bba4 <__lshift>
 800b312:	1bed      	subs	r5, r5, r7
 800b314:	4604      	mov	r4, r0
 800b316:	f100 0914 	add.w	r9, r0, #20
 800b31a:	f04f 0a00 	mov.w	sl, #0
 800b31e:	e7ae      	b.n	800b27e <__gethex+0x202>
 800b320:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b324:	42a8      	cmp	r0, r5
 800b326:	dd72      	ble.n	800b40e <__gethex+0x392>
 800b328:	1b45      	subs	r5, r0, r5
 800b32a:	42ae      	cmp	r6, r5
 800b32c:	dc36      	bgt.n	800b39c <__gethex+0x320>
 800b32e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b332:	2b02      	cmp	r3, #2
 800b334:	d02a      	beq.n	800b38c <__gethex+0x310>
 800b336:	2b03      	cmp	r3, #3
 800b338:	d02c      	beq.n	800b394 <__gethex+0x318>
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d11c      	bne.n	800b378 <__gethex+0x2fc>
 800b33e:	42ae      	cmp	r6, r5
 800b340:	d11a      	bne.n	800b378 <__gethex+0x2fc>
 800b342:	2e01      	cmp	r6, #1
 800b344:	d112      	bne.n	800b36c <__gethex+0x2f0>
 800b346:	9a04      	ldr	r2, [sp, #16]
 800b348:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b34c:	6013      	str	r3, [r2, #0]
 800b34e:	2301      	movs	r3, #1
 800b350:	6123      	str	r3, [r4, #16]
 800b352:	f8c9 3000 	str.w	r3, [r9]
 800b356:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b358:	2762      	movs	r7, #98	; 0x62
 800b35a:	601c      	str	r4, [r3, #0]
 800b35c:	e723      	b.n	800b1a6 <__gethex+0x12a>
 800b35e:	bf00      	nop
 800b360:	0800f198 	.word	0x0800f198
 800b364:	0800f120 	.word	0x0800f120
 800b368:	0800f131 	.word	0x0800f131
 800b36c:	1e71      	subs	r1, r6, #1
 800b36e:	4620      	mov	r0, r4
 800b370:	f000 fe5c 	bl	800c02c <__any_on>
 800b374:	2800      	cmp	r0, #0
 800b376:	d1e6      	bne.n	800b346 <__gethex+0x2ca>
 800b378:	ee18 0a10 	vmov	r0, s16
 800b37c:	4621      	mov	r1, r4
 800b37e:	f000 f9f5 	bl	800b76c <_Bfree>
 800b382:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b384:	2300      	movs	r3, #0
 800b386:	6013      	str	r3, [r2, #0]
 800b388:	2750      	movs	r7, #80	; 0x50
 800b38a:	e70c      	b.n	800b1a6 <__gethex+0x12a>
 800b38c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1f2      	bne.n	800b378 <__gethex+0x2fc>
 800b392:	e7d8      	b.n	800b346 <__gethex+0x2ca>
 800b394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1d5      	bne.n	800b346 <__gethex+0x2ca>
 800b39a:	e7ed      	b.n	800b378 <__gethex+0x2fc>
 800b39c:	1e6f      	subs	r7, r5, #1
 800b39e:	f1ba 0f00 	cmp.w	sl, #0
 800b3a2:	d131      	bne.n	800b408 <__gethex+0x38c>
 800b3a4:	b127      	cbz	r7, 800b3b0 <__gethex+0x334>
 800b3a6:	4639      	mov	r1, r7
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f000 fe3f 	bl	800c02c <__any_on>
 800b3ae:	4682      	mov	sl, r0
 800b3b0:	117b      	asrs	r3, r7, #5
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b3b8:	f007 071f 	and.w	r7, r7, #31
 800b3bc:	fa01 f707 	lsl.w	r7, r1, r7
 800b3c0:	421f      	tst	r7, r3
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	bf18      	it	ne
 800b3c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800b3cc:	1b76      	subs	r6, r6, r5
 800b3ce:	f7ff fded 	bl	800afac <rshift>
 800b3d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b3d6:	2702      	movs	r7, #2
 800b3d8:	f1ba 0f00 	cmp.w	sl, #0
 800b3dc:	d048      	beq.n	800b470 <__gethex+0x3f4>
 800b3de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d015      	beq.n	800b412 <__gethex+0x396>
 800b3e6:	2b03      	cmp	r3, #3
 800b3e8:	d017      	beq.n	800b41a <__gethex+0x39e>
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d109      	bne.n	800b402 <__gethex+0x386>
 800b3ee:	f01a 0f02 	tst.w	sl, #2
 800b3f2:	d006      	beq.n	800b402 <__gethex+0x386>
 800b3f4:	f8d9 0000 	ldr.w	r0, [r9]
 800b3f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b3fc:	f01a 0f01 	tst.w	sl, #1
 800b400:	d10e      	bne.n	800b420 <__gethex+0x3a4>
 800b402:	f047 0710 	orr.w	r7, r7, #16
 800b406:	e033      	b.n	800b470 <__gethex+0x3f4>
 800b408:	f04f 0a01 	mov.w	sl, #1
 800b40c:	e7d0      	b.n	800b3b0 <__gethex+0x334>
 800b40e:	2701      	movs	r7, #1
 800b410:	e7e2      	b.n	800b3d8 <__gethex+0x35c>
 800b412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b414:	f1c3 0301 	rsb	r3, r3, #1
 800b418:	9315      	str	r3, [sp, #84]	; 0x54
 800b41a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0f0      	beq.n	800b402 <__gethex+0x386>
 800b420:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b424:	f104 0314 	add.w	r3, r4, #20
 800b428:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b42c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b430:	f04f 0c00 	mov.w	ip, #0
 800b434:	4618      	mov	r0, r3
 800b436:	f853 2b04 	ldr.w	r2, [r3], #4
 800b43a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b43e:	d01c      	beq.n	800b47a <__gethex+0x3fe>
 800b440:	3201      	adds	r2, #1
 800b442:	6002      	str	r2, [r0, #0]
 800b444:	2f02      	cmp	r7, #2
 800b446:	f104 0314 	add.w	r3, r4, #20
 800b44a:	d13f      	bne.n	800b4cc <__gethex+0x450>
 800b44c:	f8d8 2000 	ldr.w	r2, [r8]
 800b450:	3a01      	subs	r2, #1
 800b452:	42b2      	cmp	r2, r6
 800b454:	d10a      	bne.n	800b46c <__gethex+0x3f0>
 800b456:	1171      	asrs	r1, r6, #5
 800b458:	2201      	movs	r2, #1
 800b45a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b45e:	f006 061f 	and.w	r6, r6, #31
 800b462:	fa02 f606 	lsl.w	r6, r2, r6
 800b466:	421e      	tst	r6, r3
 800b468:	bf18      	it	ne
 800b46a:	4617      	movne	r7, r2
 800b46c:	f047 0720 	orr.w	r7, r7, #32
 800b470:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b472:	601c      	str	r4, [r3, #0]
 800b474:	9b04      	ldr	r3, [sp, #16]
 800b476:	601d      	str	r5, [r3, #0]
 800b478:	e695      	b.n	800b1a6 <__gethex+0x12a>
 800b47a:	4299      	cmp	r1, r3
 800b47c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b480:	d8d8      	bhi.n	800b434 <__gethex+0x3b8>
 800b482:	68a3      	ldr	r3, [r4, #8]
 800b484:	459b      	cmp	fp, r3
 800b486:	db19      	blt.n	800b4bc <__gethex+0x440>
 800b488:	6861      	ldr	r1, [r4, #4]
 800b48a:	ee18 0a10 	vmov	r0, s16
 800b48e:	3101      	adds	r1, #1
 800b490:	f000 f92c 	bl	800b6ec <_Balloc>
 800b494:	4681      	mov	r9, r0
 800b496:	b918      	cbnz	r0, 800b4a0 <__gethex+0x424>
 800b498:	4b1a      	ldr	r3, [pc, #104]	; (800b504 <__gethex+0x488>)
 800b49a:	4602      	mov	r2, r0
 800b49c:	2184      	movs	r1, #132	; 0x84
 800b49e:	e6a8      	b.n	800b1f2 <__gethex+0x176>
 800b4a0:	6922      	ldr	r2, [r4, #16]
 800b4a2:	3202      	adds	r2, #2
 800b4a4:	f104 010c 	add.w	r1, r4, #12
 800b4a8:	0092      	lsls	r2, r2, #2
 800b4aa:	300c      	adds	r0, #12
 800b4ac:	f7fd f90c 	bl	80086c8 <memcpy>
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	ee18 0a10 	vmov	r0, s16
 800b4b6:	f000 f959 	bl	800b76c <_Bfree>
 800b4ba:	464c      	mov	r4, r9
 800b4bc:	6923      	ldr	r3, [r4, #16]
 800b4be:	1c5a      	adds	r2, r3, #1
 800b4c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b4c4:	6122      	str	r2, [r4, #16]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	615a      	str	r2, [r3, #20]
 800b4ca:	e7bb      	b.n	800b444 <__gethex+0x3c8>
 800b4cc:	6922      	ldr	r2, [r4, #16]
 800b4ce:	455a      	cmp	r2, fp
 800b4d0:	dd0b      	ble.n	800b4ea <__gethex+0x46e>
 800b4d2:	2101      	movs	r1, #1
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f7ff fd69 	bl	800afac <rshift>
 800b4da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4de:	3501      	adds	r5, #1
 800b4e0:	42ab      	cmp	r3, r5
 800b4e2:	f6ff aed0 	blt.w	800b286 <__gethex+0x20a>
 800b4e6:	2701      	movs	r7, #1
 800b4e8:	e7c0      	b.n	800b46c <__gethex+0x3f0>
 800b4ea:	f016 061f 	ands.w	r6, r6, #31
 800b4ee:	d0fa      	beq.n	800b4e6 <__gethex+0x46a>
 800b4f0:	4453      	add	r3, sl
 800b4f2:	f1c6 0620 	rsb	r6, r6, #32
 800b4f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b4fa:	f000 f9e9 	bl	800b8d0 <__hi0bits>
 800b4fe:	42b0      	cmp	r0, r6
 800b500:	dbe7      	blt.n	800b4d2 <__gethex+0x456>
 800b502:	e7f0      	b.n	800b4e6 <__gethex+0x46a>
 800b504:	0800f120 	.word	0x0800f120

0800b508 <L_shift>:
 800b508:	f1c2 0208 	rsb	r2, r2, #8
 800b50c:	0092      	lsls	r2, r2, #2
 800b50e:	b570      	push	{r4, r5, r6, lr}
 800b510:	f1c2 0620 	rsb	r6, r2, #32
 800b514:	6843      	ldr	r3, [r0, #4]
 800b516:	6804      	ldr	r4, [r0, #0]
 800b518:	fa03 f506 	lsl.w	r5, r3, r6
 800b51c:	432c      	orrs	r4, r5
 800b51e:	40d3      	lsrs	r3, r2
 800b520:	6004      	str	r4, [r0, #0]
 800b522:	f840 3f04 	str.w	r3, [r0, #4]!
 800b526:	4288      	cmp	r0, r1
 800b528:	d3f4      	bcc.n	800b514 <L_shift+0xc>
 800b52a:	bd70      	pop	{r4, r5, r6, pc}

0800b52c <__match>:
 800b52c:	b530      	push	{r4, r5, lr}
 800b52e:	6803      	ldr	r3, [r0, #0]
 800b530:	3301      	adds	r3, #1
 800b532:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b536:	b914      	cbnz	r4, 800b53e <__match+0x12>
 800b538:	6003      	str	r3, [r0, #0]
 800b53a:	2001      	movs	r0, #1
 800b53c:	bd30      	pop	{r4, r5, pc}
 800b53e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b542:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b546:	2d19      	cmp	r5, #25
 800b548:	bf98      	it	ls
 800b54a:	3220      	addls	r2, #32
 800b54c:	42a2      	cmp	r2, r4
 800b54e:	d0f0      	beq.n	800b532 <__match+0x6>
 800b550:	2000      	movs	r0, #0
 800b552:	e7f3      	b.n	800b53c <__match+0x10>

0800b554 <__hexnan>:
 800b554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b558:	680b      	ldr	r3, [r1, #0]
 800b55a:	115e      	asrs	r6, r3, #5
 800b55c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b560:	f013 031f 	ands.w	r3, r3, #31
 800b564:	b087      	sub	sp, #28
 800b566:	bf18      	it	ne
 800b568:	3604      	addne	r6, #4
 800b56a:	2500      	movs	r5, #0
 800b56c:	1f37      	subs	r7, r6, #4
 800b56e:	4690      	mov	r8, r2
 800b570:	6802      	ldr	r2, [r0, #0]
 800b572:	9301      	str	r3, [sp, #4]
 800b574:	4682      	mov	sl, r0
 800b576:	f846 5c04 	str.w	r5, [r6, #-4]
 800b57a:	46b9      	mov	r9, r7
 800b57c:	463c      	mov	r4, r7
 800b57e:	9502      	str	r5, [sp, #8]
 800b580:	46ab      	mov	fp, r5
 800b582:	7851      	ldrb	r1, [r2, #1]
 800b584:	1c53      	adds	r3, r2, #1
 800b586:	9303      	str	r3, [sp, #12]
 800b588:	b341      	cbz	r1, 800b5dc <__hexnan+0x88>
 800b58a:	4608      	mov	r0, r1
 800b58c:	9205      	str	r2, [sp, #20]
 800b58e:	9104      	str	r1, [sp, #16]
 800b590:	f7ff fd5e 	bl	800b050 <__hexdig_fun>
 800b594:	2800      	cmp	r0, #0
 800b596:	d14f      	bne.n	800b638 <__hexnan+0xe4>
 800b598:	9904      	ldr	r1, [sp, #16]
 800b59a:	9a05      	ldr	r2, [sp, #20]
 800b59c:	2920      	cmp	r1, #32
 800b59e:	d818      	bhi.n	800b5d2 <__hexnan+0x7e>
 800b5a0:	9b02      	ldr	r3, [sp, #8]
 800b5a2:	459b      	cmp	fp, r3
 800b5a4:	dd13      	ble.n	800b5ce <__hexnan+0x7a>
 800b5a6:	454c      	cmp	r4, r9
 800b5a8:	d206      	bcs.n	800b5b8 <__hexnan+0x64>
 800b5aa:	2d07      	cmp	r5, #7
 800b5ac:	dc04      	bgt.n	800b5b8 <__hexnan+0x64>
 800b5ae:	462a      	mov	r2, r5
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	f7ff ffa8 	bl	800b508 <L_shift>
 800b5b8:	4544      	cmp	r4, r8
 800b5ba:	d950      	bls.n	800b65e <__hexnan+0x10a>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	f1a4 0904 	sub.w	r9, r4, #4
 800b5c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5c6:	f8cd b008 	str.w	fp, [sp, #8]
 800b5ca:	464c      	mov	r4, r9
 800b5cc:	461d      	mov	r5, r3
 800b5ce:	9a03      	ldr	r2, [sp, #12]
 800b5d0:	e7d7      	b.n	800b582 <__hexnan+0x2e>
 800b5d2:	2929      	cmp	r1, #41	; 0x29
 800b5d4:	d156      	bne.n	800b684 <__hexnan+0x130>
 800b5d6:	3202      	adds	r2, #2
 800b5d8:	f8ca 2000 	str.w	r2, [sl]
 800b5dc:	f1bb 0f00 	cmp.w	fp, #0
 800b5e0:	d050      	beq.n	800b684 <__hexnan+0x130>
 800b5e2:	454c      	cmp	r4, r9
 800b5e4:	d206      	bcs.n	800b5f4 <__hexnan+0xa0>
 800b5e6:	2d07      	cmp	r5, #7
 800b5e8:	dc04      	bgt.n	800b5f4 <__hexnan+0xa0>
 800b5ea:	462a      	mov	r2, r5
 800b5ec:	4649      	mov	r1, r9
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f7ff ff8a 	bl	800b508 <L_shift>
 800b5f4:	4544      	cmp	r4, r8
 800b5f6:	d934      	bls.n	800b662 <__hexnan+0x10e>
 800b5f8:	f1a8 0204 	sub.w	r2, r8, #4
 800b5fc:	4623      	mov	r3, r4
 800b5fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800b602:	f842 1f04 	str.w	r1, [r2, #4]!
 800b606:	429f      	cmp	r7, r3
 800b608:	d2f9      	bcs.n	800b5fe <__hexnan+0xaa>
 800b60a:	1b3b      	subs	r3, r7, r4
 800b60c:	f023 0303 	bic.w	r3, r3, #3
 800b610:	3304      	adds	r3, #4
 800b612:	3401      	adds	r4, #1
 800b614:	3e03      	subs	r6, #3
 800b616:	42b4      	cmp	r4, r6
 800b618:	bf88      	it	hi
 800b61a:	2304      	movhi	r3, #4
 800b61c:	4443      	add	r3, r8
 800b61e:	2200      	movs	r2, #0
 800b620:	f843 2b04 	str.w	r2, [r3], #4
 800b624:	429f      	cmp	r7, r3
 800b626:	d2fb      	bcs.n	800b620 <__hexnan+0xcc>
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	b91b      	cbnz	r3, 800b634 <__hexnan+0xe0>
 800b62c:	4547      	cmp	r7, r8
 800b62e:	d127      	bne.n	800b680 <__hexnan+0x12c>
 800b630:	2301      	movs	r3, #1
 800b632:	603b      	str	r3, [r7, #0]
 800b634:	2005      	movs	r0, #5
 800b636:	e026      	b.n	800b686 <__hexnan+0x132>
 800b638:	3501      	adds	r5, #1
 800b63a:	2d08      	cmp	r5, #8
 800b63c:	f10b 0b01 	add.w	fp, fp, #1
 800b640:	dd06      	ble.n	800b650 <__hexnan+0xfc>
 800b642:	4544      	cmp	r4, r8
 800b644:	d9c3      	bls.n	800b5ce <__hexnan+0x7a>
 800b646:	2300      	movs	r3, #0
 800b648:	f844 3c04 	str.w	r3, [r4, #-4]
 800b64c:	2501      	movs	r5, #1
 800b64e:	3c04      	subs	r4, #4
 800b650:	6822      	ldr	r2, [r4, #0]
 800b652:	f000 000f 	and.w	r0, r0, #15
 800b656:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b65a:	6022      	str	r2, [r4, #0]
 800b65c:	e7b7      	b.n	800b5ce <__hexnan+0x7a>
 800b65e:	2508      	movs	r5, #8
 800b660:	e7b5      	b.n	800b5ce <__hexnan+0x7a>
 800b662:	9b01      	ldr	r3, [sp, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d0df      	beq.n	800b628 <__hexnan+0xd4>
 800b668:	f04f 32ff 	mov.w	r2, #4294967295
 800b66c:	f1c3 0320 	rsb	r3, r3, #32
 800b670:	fa22 f303 	lsr.w	r3, r2, r3
 800b674:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b678:	401a      	ands	r2, r3
 800b67a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b67e:	e7d3      	b.n	800b628 <__hexnan+0xd4>
 800b680:	3f04      	subs	r7, #4
 800b682:	e7d1      	b.n	800b628 <__hexnan+0xd4>
 800b684:	2004      	movs	r0, #4
 800b686:	b007      	add	sp, #28
 800b688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b68c <_localeconv_r>:
 800b68c:	4800      	ldr	r0, [pc, #0]	; (800b690 <_localeconv_r+0x4>)
 800b68e:	4770      	bx	lr
 800b690:	2000016c 	.word	0x2000016c

0800b694 <_lseek_r>:
 800b694:	b538      	push	{r3, r4, r5, lr}
 800b696:	4d07      	ldr	r5, [pc, #28]	; (800b6b4 <_lseek_r+0x20>)
 800b698:	4604      	mov	r4, r0
 800b69a:	4608      	mov	r0, r1
 800b69c:	4611      	mov	r1, r2
 800b69e:	2200      	movs	r2, #0
 800b6a0:	602a      	str	r2, [r5, #0]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	f7f7 fc78 	bl	8002f98 <_lseek>
 800b6a8:	1c43      	adds	r3, r0, #1
 800b6aa:	d102      	bne.n	800b6b2 <_lseek_r+0x1e>
 800b6ac:	682b      	ldr	r3, [r5, #0]
 800b6ae:	b103      	cbz	r3, 800b6b2 <_lseek_r+0x1e>
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	bd38      	pop	{r3, r4, r5, pc}
 800b6b4:	20008984 	.word	0x20008984

0800b6b8 <malloc>:
 800b6b8:	4b02      	ldr	r3, [pc, #8]	; (800b6c4 <malloc+0xc>)
 800b6ba:	4601      	mov	r1, r0
 800b6bc:	6818      	ldr	r0, [r3, #0]
 800b6be:	f000 bd59 	b.w	800c174 <_malloc_r>
 800b6c2:	bf00      	nop
 800b6c4:	20000014 	.word	0x20000014

0800b6c8 <__ascii_mbtowc>:
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	b901      	cbnz	r1, 800b6ce <__ascii_mbtowc+0x6>
 800b6cc:	a901      	add	r1, sp, #4
 800b6ce:	b142      	cbz	r2, 800b6e2 <__ascii_mbtowc+0x1a>
 800b6d0:	b14b      	cbz	r3, 800b6e6 <__ascii_mbtowc+0x1e>
 800b6d2:	7813      	ldrb	r3, [r2, #0]
 800b6d4:	600b      	str	r3, [r1, #0]
 800b6d6:	7812      	ldrb	r2, [r2, #0]
 800b6d8:	1e10      	subs	r0, r2, #0
 800b6da:	bf18      	it	ne
 800b6dc:	2001      	movne	r0, #1
 800b6de:	b002      	add	sp, #8
 800b6e0:	4770      	bx	lr
 800b6e2:	4610      	mov	r0, r2
 800b6e4:	e7fb      	b.n	800b6de <__ascii_mbtowc+0x16>
 800b6e6:	f06f 0001 	mvn.w	r0, #1
 800b6ea:	e7f8      	b.n	800b6de <__ascii_mbtowc+0x16>

0800b6ec <_Balloc>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	460d      	mov	r5, r1
 800b6f4:	b976      	cbnz	r6, 800b714 <_Balloc+0x28>
 800b6f6:	2010      	movs	r0, #16
 800b6f8:	f7ff ffde 	bl	800b6b8 <malloc>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	6260      	str	r0, [r4, #36]	; 0x24
 800b700:	b920      	cbnz	r0, 800b70c <_Balloc+0x20>
 800b702:	4b18      	ldr	r3, [pc, #96]	; (800b764 <_Balloc+0x78>)
 800b704:	4818      	ldr	r0, [pc, #96]	; (800b768 <_Balloc+0x7c>)
 800b706:	2166      	movs	r1, #102	; 0x66
 800b708:	f001 fb5a 	bl	800cdc0 <__assert_func>
 800b70c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b710:	6006      	str	r6, [r0, #0]
 800b712:	60c6      	str	r6, [r0, #12]
 800b714:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b716:	68f3      	ldr	r3, [r6, #12]
 800b718:	b183      	cbz	r3, 800b73c <_Balloc+0x50>
 800b71a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b722:	b9b8      	cbnz	r0, 800b754 <_Balloc+0x68>
 800b724:	2101      	movs	r1, #1
 800b726:	fa01 f605 	lsl.w	r6, r1, r5
 800b72a:	1d72      	adds	r2, r6, #5
 800b72c:	0092      	lsls	r2, r2, #2
 800b72e:	4620      	mov	r0, r4
 800b730:	f000 fc9d 	bl	800c06e <_calloc_r>
 800b734:	b160      	cbz	r0, 800b750 <_Balloc+0x64>
 800b736:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b73a:	e00e      	b.n	800b75a <_Balloc+0x6e>
 800b73c:	2221      	movs	r2, #33	; 0x21
 800b73e:	2104      	movs	r1, #4
 800b740:	4620      	mov	r0, r4
 800b742:	f000 fc94 	bl	800c06e <_calloc_r>
 800b746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b748:	60f0      	str	r0, [r6, #12]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1e4      	bne.n	800b71a <_Balloc+0x2e>
 800b750:	2000      	movs	r0, #0
 800b752:	bd70      	pop	{r4, r5, r6, pc}
 800b754:	6802      	ldr	r2, [r0, #0]
 800b756:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b75a:	2300      	movs	r3, #0
 800b75c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b760:	e7f7      	b.n	800b752 <_Balloc+0x66>
 800b762:	bf00      	nop
 800b764:	0800f0ae 	.word	0x0800f0ae
 800b768:	0800f1ac 	.word	0x0800f1ac

0800b76c <_Bfree>:
 800b76c:	b570      	push	{r4, r5, r6, lr}
 800b76e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b770:	4605      	mov	r5, r0
 800b772:	460c      	mov	r4, r1
 800b774:	b976      	cbnz	r6, 800b794 <_Bfree+0x28>
 800b776:	2010      	movs	r0, #16
 800b778:	f7ff ff9e 	bl	800b6b8 <malloc>
 800b77c:	4602      	mov	r2, r0
 800b77e:	6268      	str	r0, [r5, #36]	; 0x24
 800b780:	b920      	cbnz	r0, 800b78c <_Bfree+0x20>
 800b782:	4b09      	ldr	r3, [pc, #36]	; (800b7a8 <_Bfree+0x3c>)
 800b784:	4809      	ldr	r0, [pc, #36]	; (800b7ac <_Bfree+0x40>)
 800b786:	218a      	movs	r1, #138	; 0x8a
 800b788:	f001 fb1a 	bl	800cdc0 <__assert_func>
 800b78c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b790:	6006      	str	r6, [r0, #0]
 800b792:	60c6      	str	r6, [r0, #12]
 800b794:	b13c      	cbz	r4, 800b7a6 <_Bfree+0x3a>
 800b796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b798:	6862      	ldr	r2, [r4, #4]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7a0:	6021      	str	r1, [r4, #0]
 800b7a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7a6:	bd70      	pop	{r4, r5, r6, pc}
 800b7a8:	0800f0ae 	.word	0x0800f0ae
 800b7ac:	0800f1ac 	.word	0x0800f1ac

0800b7b0 <__multadd>:
 800b7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b4:	690d      	ldr	r5, [r1, #16]
 800b7b6:	4607      	mov	r7, r0
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	461e      	mov	r6, r3
 800b7bc:	f101 0c14 	add.w	ip, r1, #20
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	f8dc 3000 	ldr.w	r3, [ip]
 800b7c6:	b299      	uxth	r1, r3
 800b7c8:	fb02 6101 	mla	r1, r2, r1, r6
 800b7cc:	0c1e      	lsrs	r6, r3, #16
 800b7ce:	0c0b      	lsrs	r3, r1, #16
 800b7d0:	fb02 3306 	mla	r3, r2, r6, r3
 800b7d4:	b289      	uxth	r1, r1
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7dc:	4285      	cmp	r5, r0
 800b7de:	f84c 1b04 	str.w	r1, [ip], #4
 800b7e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7e6:	dcec      	bgt.n	800b7c2 <__multadd+0x12>
 800b7e8:	b30e      	cbz	r6, 800b82e <__multadd+0x7e>
 800b7ea:	68a3      	ldr	r3, [r4, #8]
 800b7ec:	42ab      	cmp	r3, r5
 800b7ee:	dc19      	bgt.n	800b824 <__multadd+0x74>
 800b7f0:	6861      	ldr	r1, [r4, #4]
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	3101      	adds	r1, #1
 800b7f6:	f7ff ff79 	bl	800b6ec <_Balloc>
 800b7fa:	4680      	mov	r8, r0
 800b7fc:	b928      	cbnz	r0, 800b80a <__multadd+0x5a>
 800b7fe:	4602      	mov	r2, r0
 800b800:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <__multadd+0x84>)
 800b802:	480d      	ldr	r0, [pc, #52]	; (800b838 <__multadd+0x88>)
 800b804:	21b5      	movs	r1, #181	; 0xb5
 800b806:	f001 fadb 	bl	800cdc0 <__assert_func>
 800b80a:	6922      	ldr	r2, [r4, #16]
 800b80c:	3202      	adds	r2, #2
 800b80e:	f104 010c 	add.w	r1, r4, #12
 800b812:	0092      	lsls	r2, r2, #2
 800b814:	300c      	adds	r0, #12
 800b816:	f7fc ff57 	bl	80086c8 <memcpy>
 800b81a:	4621      	mov	r1, r4
 800b81c:	4638      	mov	r0, r7
 800b81e:	f7ff ffa5 	bl	800b76c <_Bfree>
 800b822:	4644      	mov	r4, r8
 800b824:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b828:	3501      	adds	r5, #1
 800b82a:	615e      	str	r6, [r3, #20]
 800b82c:	6125      	str	r5, [r4, #16]
 800b82e:	4620      	mov	r0, r4
 800b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b834:	0800f120 	.word	0x0800f120
 800b838:	0800f1ac 	.word	0x0800f1ac

0800b83c <__s2b>:
 800b83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b840:	460c      	mov	r4, r1
 800b842:	4615      	mov	r5, r2
 800b844:	461f      	mov	r7, r3
 800b846:	2209      	movs	r2, #9
 800b848:	3308      	adds	r3, #8
 800b84a:	4606      	mov	r6, r0
 800b84c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b850:	2100      	movs	r1, #0
 800b852:	2201      	movs	r2, #1
 800b854:	429a      	cmp	r2, r3
 800b856:	db09      	blt.n	800b86c <__s2b+0x30>
 800b858:	4630      	mov	r0, r6
 800b85a:	f7ff ff47 	bl	800b6ec <_Balloc>
 800b85e:	b940      	cbnz	r0, 800b872 <__s2b+0x36>
 800b860:	4602      	mov	r2, r0
 800b862:	4b19      	ldr	r3, [pc, #100]	; (800b8c8 <__s2b+0x8c>)
 800b864:	4819      	ldr	r0, [pc, #100]	; (800b8cc <__s2b+0x90>)
 800b866:	21ce      	movs	r1, #206	; 0xce
 800b868:	f001 faaa 	bl	800cdc0 <__assert_func>
 800b86c:	0052      	lsls	r2, r2, #1
 800b86e:	3101      	adds	r1, #1
 800b870:	e7f0      	b.n	800b854 <__s2b+0x18>
 800b872:	9b08      	ldr	r3, [sp, #32]
 800b874:	6143      	str	r3, [r0, #20]
 800b876:	2d09      	cmp	r5, #9
 800b878:	f04f 0301 	mov.w	r3, #1
 800b87c:	6103      	str	r3, [r0, #16]
 800b87e:	dd16      	ble.n	800b8ae <__s2b+0x72>
 800b880:	f104 0909 	add.w	r9, r4, #9
 800b884:	46c8      	mov	r8, r9
 800b886:	442c      	add	r4, r5
 800b888:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b88c:	4601      	mov	r1, r0
 800b88e:	3b30      	subs	r3, #48	; 0x30
 800b890:	220a      	movs	r2, #10
 800b892:	4630      	mov	r0, r6
 800b894:	f7ff ff8c 	bl	800b7b0 <__multadd>
 800b898:	45a0      	cmp	r8, r4
 800b89a:	d1f5      	bne.n	800b888 <__s2b+0x4c>
 800b89c:	f1a5 0408 	sub.w	r4, r5, #8
 800b8a0:	444c      	add	r4, r9
 800b8a2:	1b2d      	subs	r5, r5, r4
 800b8a4:	1963      	adds	r3, r4, r5
 800b8a6:	42bb      	cmp	r3, r7
 800b8a8:	db04      	blt.n	800b8b4 <__s2b+0x78>
 800b8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ae:	340a      	adds	r4, #10
 800b8b0:	2509      	movs	r5, #9
 800b8b2:	e7f6      	b.n	800b8a2 <__s2b+0x66>
 800b8b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8b8:	4601      	mov	r1, r0
 800b8ba:	3b30      	subs	r3, #48	; 0x30
 800b8bc:	220a      	movs	r2, #10
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f7ff ff76 	bl	800b7b0 <__multadd>
 800b8c4:	e7ee      	b.n	800b8a4 <__s2b+0x68>
 800b8c6:	bf00      	nop
 800b8c8:	0800f120 	.word	0x0800f120
 800b8cc:	0800f1ac 	.word	0x0800f1ac

0800b8d0 <__hi0bits>:
 800b8d0:	0c03      	lsrs	r3, r0, #16
 800b8d2:	041b      	lsls	r3, r3, #16
 800b8d4:	b9d3      	cbnz	r3, 800b90c <__hi0bits+0x3c>
 800b8d6:	0400      	lsls	r0, r0, #16
 800b8d8:	2310      	movs	r3, #16
 800b8da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b8de:	bf04      	itt	eq
 800b8e0:	0200      	lsleq	r0, r0, #8
 800b8e2:	3308      	addeq	r3, #8
 800b8e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b8e8:	bf04      	itt	eq
 800b8ea:	0100      	lsleq	r0, r0, #4
 800b8ec:	3304      	addeq	r3, #4
 800b8ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b8f2:	bf04      	itt	eq
 800b8f4:	0080      	lsleq	r0, r0, #2
 800b8f6:	3302      	addeq	r3, #2
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	db05      	blt.n	800b908 <__hi0bits+0x38>
 800b8fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b900:	f103 0301 	add.w	r3, r3, #1
 800b904:	bf08      	it	eq
 800b906:	2320      	moveq	r3, #32
 800b908:	4618      	mov	r0, r3
 800b90a:	4770      	bx	lr
 800b90c:	2300      	movs	r3, #0
 800b90e:	e7e4      	b.n	800b8da <__hi0bits+0xa>

0800b910 <__lo0bits>:
 800b910:	6803      	ldr	r3, [r0, #0]
 800b912:	f013 0207 	ands.w	r2, r3, #7
 800b916:	4601      	mov	r1, r0
 800b918:	d00b      	beq.n	800b932 <__lo0bits+0x22>
 800b91a:	07da      	lsls	r2, r3, #31
 800b91c:	d423      	bmi.n	800b966 <__lo0bits+0x56>
 800b91e:	0798      	lsls	r0, r3, #30
 800b920:	bf49      	itett	mi
 800b922:	085b      	lsrmi	r3, r3, #1
 800b924:	089b      	lsrpl	r3, r3, #2
 800b926:	2001      	movmi	r0, #1
 800b928:	600b      	strmi	r3, [r1, #0]
 800b92a:	bf5c      	itt	pl
 800b92c:	600b      	strpl	r3, [r1, #0]
 800b92e:	2002      	movpl	r0, #2
 800b930:	4770      	bx	lr
 800b932:	b298      	uxth	r0, r3
 800b934:	b9a8      	cbnz	r0, 800b962 <__lo0bits+0x52>
 800b936:	0c1b      	lsrs	r3, r3, #16
 800b938:	2010      	movs	r0, #16
 800b93a:	b2da      	uxtb	r2, r3
 800b93c:	b90a      	cbnz	r2, 800b942 <__lo0bits+0x32>
 800b93e:	3008      	adds	r0, #8
 800b940:	0a1b      	lsrs	r3, r3, #8
 800b942:	071a      	lsls	r2, r3, #28
 800b944:	bf04      	itt	eq
 800b946:	091b      	lsreq	r3, r3, #4
 800b948:	3004      	addeq	r0, #4
 800b94a:	079a      	lsls	r2, r3, #30
 800b94c:	bf04      	itt	eq
 800b94e:	089b      	lsreq	r3, r3, #2
 800b950:	3002      	addeq	r0, #2
 800b952:	07da      	lsls	r2, r3, #31
 800b954:	d403      	bmi.n	800b95e <__lo0bits+0x4e>
 800b956:	085b      	lsrs	r3, r3, #1
 800b958:	f100 0001 	add.w	r0, r0, #1
 800b95c:	d005      	beq.n	800b96a <__lo0bits+0x5a>
 800b95e:	600b      	str	r3, [r1, #0]
 800b960:	4770      	bx	lr
 800b962:	4610      	mov	r0, r2
 800b964:	e7e9      	b.n	800b93a <__lo0bits+0x2a>
 800b966:	2000      	movs	r0, #0
 800b968:	4770      	bx	lr
 800b96a:	2020      	movs	r0, #32
 800b96c:	4770      	bx	lr
	...

0800b970 <__i2b>:
 800b970:	b510      	push	{r4, lr}
 800b972:	460c      	mov	r4, r1
 800b974:	2101      	movs	r1, #1
 800b976:	f7ff feb9 	bl	800b6ec <_Balloc>
 800b97a:	4602      	mov	r2, r0
 800b97c:	b928      	cbnz	r0, 800b98a <__i2b+0x1a>
 800b97e:	4b05      	ldr	r3, [pc, #20]	; (800b994 <__i2b+0x24>)
 800b980:	4805      	ldr	r0, [pc, #20]	; (800b998 <__i2b+0x28>)
 800b982:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b986:	f001 fa1b 	bl	800cdc0 <__assert_func>
 800b98a:	2301      	movs	r3, #1
 800b98c:	6144      	str	r4, [r0, #20]
 800b98e:	6103      	str	r3, [r0, #16]
 800b990:	bd10      	pop	{r4, pc}
 800b992:	bf00      	nop
 800b994:	0800f120 	.word	0x0800f120
 800b998:	0800f1ac 	.word	0x0800f1ac

0800b99c <__multiply>:
 800b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a0:	4691      	mov	r9, r2
 800b9a2:	690a      	ldr	r2, [r1, #16]
 800b9a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	bfb8      	it	lt
 800b9ac:	460b      	movlt	r3, r1
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	bfbc      	itt	lt
 800b9b2:	464c      	movlt	r4, r9
 800b9b4:	4699      	movlt	r9, r3
 800b9b6:	6927      	ldr	r7, [r4, #16]
 800b9b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9bc:	68a3      	ldr	r3, [r4, #8]
 800b9be:	6861      	ldr	r1, [r4, #4]
 800b9c0:	eb07 060a 	add.w	r6, r7, sl
 800b9c4:	42b3      	cmp	r3, r6
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	bfb8      	it	lt
 800b9ca:	3101      	addlt	r1, #1
 800b9cc:	f7ff fe8e 	bl	800b6ec <_Balloc>
 800b9d0:	b930      	cbnz	r0, 800b9e0 <__multiply+0x44>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	4b44      	ldr	r3, [pc, #272]	; (800bae8 <__multiply+0x14c>)
 800b9d6:	4845      	ldr	r0, [pc, #276]	; (800baec <__multiply+0x150>)
 800b9d8:	f240 115d 	movw	r1, #349	; 0x15d
 800b9dc:	f001 f9f0 	bl	800cdc0 <__assert_func>
 800b9e0:	f100 0514 	add.w	r5, r0, #20
 800b9e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9e8:	462b      	mov	r3, r5
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	4543      	cmp	r3, r8
 800b9ee:	d321      	bcc.n	800ba34 <__multiply+0x98>
 800b9f0:	f104 0314 	add.w	r3, r4, #20
 800b9f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b9f8:	f109 0314 	add.w	r3, r9, #20
 800b9fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba00:	9202      	str	r2, [sp, #8]
 800ba02:	1b3a      	subs	r2, r7, r4
 800ba04:	3a15      	subs	r2, #21
 800ba06:	f022 0203 	bic.w	r2, r2, #3
 800ba0a:	3204      	adds	r2, #4
 800ba0c:	f104 0115 	add.w	r1, r4, #21
 800ba10:	428f      	cmp	r7, r1
 800ba12:	bf38      	it	cc
 800ba14:	2204      	movcc	r2, #4
 800ba16:	9201      	str	r2, [sp, #4]
 800ba18:	9a02      	ldr	r2, [sp, #8]
 800ba1a:	9303      	str	r3, [sp, #12]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d80c      	bhi.n	800ba3a <__multiply+0x9e>
 800ba20:	2e00      	cmp	r6, #0
 800ba22:	dd03      	ble.n	800ba2c <__multiply+0x90>
 800ba24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d05a      	beq.n	800bae2 <__multiply+0x146>
 800ba2c:	6106      	str	r6, [r0, #16]
 800ba2e:	b005      	add	sp, #20
 800ba30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba34:	f843 2b04 	str.w	r2, [r3], #4
 800ba38:	e7d8      	b.n	800b9ec <__multiply+0x50>
 800ba3a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba3e:	f1ba 0f00 	cmp.w	sl, #0
 800ba42:	d024      	beq.n	800ba8e <__multiply+0xf2>
 800ba44:	f104 0e14 	add.w	lr, r4, #20
 800ba48:	46a9      	mov	r9, r5
 800ba4a:	f04f 0c00 	mov.w	ip, #0
 800ba4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba52:	f8d9 1000 	ldr.w	r1, [r9]
 800ba56:	fa1f fb82 	uxth.w	fp, r2
 800ba5a:	b289      	uxth	r1, r1
 800ba5c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba64:	f8d9 2000 	ldr.w	r2, [r9]
 800ba68:	4461      	add	r1, ip
 800ba6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba6e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ba72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba76:	b289      	uxth	r1, r1
 800ba78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba7c:	4577      	cmp	r7, lr
 800ba7e:	f849 1b04 	str.w	r1, [r9], #4
 800ba82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba86:	d8e2      	bhi.n	800ba4e <__multiply+0xb2>
 800ba88:	9a01      	ldr	r2, [sp, #4]
 800ba8a:	f845 c002 	str.w	ip, [r5, r2]
 800ba8e:	9a03      	ldr	r2, [sp, #12]
 800ba90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba94:	3304      	adds	r3, #4
 800ba96:	f1b9 0f00 	cmp.w	r9, #0
 800ba9a:	d020      	beq.n	800bade <__multiply+0x142>
 800ba9c:	6829      	ldr	r1, [r5, #0]
 800ba9e:	f104 0c14 	add.w	ip, r4, #20
 800baa2:	46ae      	mov	lr, r5
 800baa4:	f04f 0a00 	mov.w	sl, #0
 800baa8:	f8bc b000 	ldrh.w	fp, [ip]
 800baac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bab0:	fb09 220b 	mla	r2, r9, fp, r2
 800bab4:	4492      	add	sl, r2
 800bab6:	b289      	uxth	r1, r1
 800bab8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800babc:	f84e 1b04 	str.w	r1, [lr], #4
 800bac0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bac4:	f8be 1000 	ldrh.w	r1, [lr]
 800bac8:	0c12      	lsrs	r2, r2, #16
 800baca:	fb09 1102 	mla	r1, r9, r2, r1
 800bace:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bad2:	4567      	cmp	r7, ip
 800bad4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bad8:	d8e6      	bhi.n	800baa8 <__multiply+0x10c>
 800bada:	9a01      	ldr	r2, [sp, #4]
 800badc:	50a9      	str	r1, [r5, r2]
 800bade:	3504      	adds	r5, #4
 800bae0:	e79a      	b.n	800ba18 <__multiply+0x7c>
 800bae2:	3e01      	subs	r6, #1
 800bae4:	e79c      	b.n	800ba20 <__multiply+0x84>
 800bae6:	bf00      	nop
 800bae8:	0800f120 	.word	0x0800f120
 800baec:	0800f1ac 	.word	0x0800f1ac

0800baf0 <__pow5mult>:
 800baf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baf4:	4615      	mov	r5, r2
 800baf6:	f012 0203 	ands.w	r2, r2, #3
 800bafa:	4606      	mov	r6, r0
 800bafc:	460f      	mov	r7, r1
 800bafe:	d007      	beq.n	800bb10 <__pow5mult+0x20>
 800bb00:	4c25      	ldr	r4, [pc, #148]	; (800bb98 <__pow5mult+0xa8>)
 800bb02:	3a01      	subs	r2, #1
 800bb04:	2300      	movs	r3, #0
 800bb06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb0a:	f7ff fe51 	bl	800b7b0 <__multadd>
 800bb0e:	4607      	mov	r7, r0
 800bb10:	10ad      	asrs	r5, r5, #2
 800bb12:	d03d      	beq.n	800bb90 <__pow5mult+0xa0>
 800bb14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb16:	b97c      	cbnz	r4, 800bb38 <__pow5mult+0x48>
 800bb18:	2010      	movs	r0, #16
 800bb1a:	f7ff fdcd 	bl	800b6b8 <malloc>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	6270      	str	r0, [r6, #36]	; 0x24
 800bb22:	b928      	cbnz	r0, 800bb30 <__pow5mult+0x40>
 800bb24:	4b1d      	ldr	r3, [pc, #116]	; (800bb9c <__pow5mult+0xac>)
 800bb26:	481e      	ldr	r0, [pc, #120]	; (800bba0 <__pow5mult+0xb0>)
 800bb28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb2c:	f001 f948 	bl	800cdc0 <__assert_func>
 800bb30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb34:	6004      	str	r4, [r0, #0]
 800bb36:	60c4      	str	r4, [r0, #12]
 800bb38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb40:	b94c      	cbnz	r4, 800bb56 <__pow5mult+0x66>
 800bb42:	f240 2171 	movw	r1, #625	; 0x271
 800bb46:	4630      	mov	r0, r6
 800bb48:	f7ff ff12 	bl	800b970 <__i2b>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb52:	4604      	mov	r4, r0
 800bb54:	6003      	str	r3, [r0, #0]
 800bb56:	f04f 0900 	mov.w	r9, #0
 800bb5a:	07eb      	lsls	r3, r5, #31
 800bb5c:	d50a      	bpl.n	800bb74 <__pow5mult+0x84>
 800bb5e:	4639      	mov	r1, r7
 800bb60:	4622      	mov	r2, r4
 800bb62:	4630      	mov	r0, r6
 800bb64:	f7ff ff1a 	bl	800b99c <__multiply>
 800bb68:	4639      	mov	r1, r7
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	f7ff fdfd 	bl	800b76c <_Bfree>
 800bb72:	4647      	mov	r7, r8
 800bb74:	106d      	asrs	r5, r5, #1
 800bb76:	d00b      	beq.n	800bb90 <__pow5mult+0xa0>
 800bb78:	6820      	ldr	r0, [r4, #0]
 800bb7a:	b938      	cbnz	r0, 800bb8c <__pow5mult+0x9c>
 800bb7c:	4622      	mov	r2, r4
 800bb7e:	4621      	mov	r1, r4
 800bb80:	4630      	mov	r0, r6
 800bb82:	f7ff ff0b 	bl	800b99c <__multiply>
 800bb86:	6020      	str	r0, [r4, #0]
 800bb88:	f8c0 9000 	str.w	r9, [r0]
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	e7e4      	b.n	800bb5a <__pow5mult+0x6a>
 800bb90:	4638      	mov	r0, r7
 800bb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb96:	bf00      	nop
 800bb98:	0800f2f8 	.word	0x0800f2f8
 800bb9c:	0800f0ae 	.word	0x0800f0ae
 800bba0:	0800f1ac 	.word	0x0800f1ac

0800bba4 <__lshift>:
 800bba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba8:	460c      	mov	r4, r1
 800bbaa:	6849      	ldr	r1, [r1, #4]
 800bbac:	6923      	ldr	r3, [r4, #16]
 800bbae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbb2:	68a3      	ldr	r3, [r4, #8]
 800bbb4:	4607      	mov	r7, r0
 800bbb6:	4691      	mov	r9, r2
 800bbb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbbc:	f108 0601 	add.w	r6, r8, #1
 800bbc0:	42b3      	cmp	r3, r6
 800bbc2:	db0b      	blt.n	800bbdc <__lshift+0x38>
 800bbc4:	4638      	mov	r0, r7
 800bbc6:	f7ff fd91 	bl	800b6ec <_Balloc>
 800bbca:	4605      	mov	r5, r0
 800bbcc:	b948      	cbnz	r0, 800bbe2 <__lshift+0x3e>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	4b2a      	ldr	r3, [pc, #168]	; (800bc7c <__lshift+0xd8>)
 800bbd2:	482b      	ldr	r0, [pc, #172]	; (800bc80 <__lshift+0xdc>)
 800bbd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bbd8:	f001 f8f2 	bl	800cdc0 <__assert_func>
 800bbdc:	3101      	adds	r1, #1
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	e7ee      	b.n	800bbc0 <__lshift+0x1c>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f100 0114 	add.w	r1, r0, #20
 800bbe8:	f100 0210 	add.w	r2, r0, #16
 800bbec:	4618      	mov	r0, r3
 800bbee:	4553      	cmp	r3, sl
 800bbf0:	db37      	blt.n	800bc62 <__lshift+0xbe>
 800bbf2:	6920      	ldr	r0, [r4, #16]
 800bbf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbf8:	f104 0314 	add.w	r3, r4, #20
 800bbfc:	f019 091f 	ands.w	r9, r9, #31
 800bc00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bc08:	d02f      	beq.n	800bc6a <__lshift+0xc6>
 800bc0a:	f1c9 0e20 	rsb	lr, r9, #32
 800bc0e:	468a      	mov	sl, r1
 800bc10:	f04f 0c00 	mov.w	ip, #0
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	fa02 f209 	lsl.w	r2, r2, r9
 800bc1a:	ea42 020c 	orr.w	r2, r2, ip
 800bc1e:	f84a 2b04 	str.w	r2, [sl], #4
 800bc22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc26:	4298      	cmp	r0, r3
 800bc28:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bc2c:	d8f2      	bhi.n	800bc14 <__lshift+0x70>
 800bc2e:	1b03      	subs	r3, r0, r4
 800bc30:	3b15      	subs	r3, #21
 800bc32:	f023 0303 	bic.w	r3, r3, #3
 800bc36:	3304      	adds	r3, #4
 800bc38:	f104 0215 	add.w	r2, r4, #21
 800bc3c:	4290      	cmp	r0, r2
 800bc3e:	bf38      	it	cc
 800bc40:	2304      	movcc	r3, #4
 800bc42:	f841 c003 	str.w	ip, [r1, r3]
 800bc46:	f1bc 0f00 	cmp.w	ip, #0
 800bc4a:	d001      	beq.n	800bc50 <__lshift+0xac>
 800bc4c:	f108 0602 	add.w	r6, r8, #2
 800bc50:	3e01      	subs	r6, #1
 800bc52:	4638      	mov	r0, r7
 800bc54:	612e      	str	r6, [r5, #16]
 800bc56:	4621      	mov	r1, r4
 800bc58:	f7ff fd88 	bl	800b76c <_Bfree>
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc62:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc66:	3301      	adds	r3, #1
 800bc68:	e7c1      	b.n	800bbee <__lshift+0x4a>
 800bc6a:	3904      	subs	r1, #4
 800bc6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc70:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc74:	4298      	cmp	r0, r3
 800bc76:	d8f9      	bhi.n	800bc6c <__lshift+0xc8>
 800bc78:	e7ea      	b.n	800bc50 <__lshift+0xac>
 800bc7a:	bf00      	nop
 800bc7c:	0800f120 	.word	0x0800f120
 800bc80:	0800f1ac 	.word	0x0800f1ac

0800bc84 <__mcmp>:
 800bc84:	b530      	push	{r4, r5, lr}
 800bc86:	6902      	ldr	r2, [r0, #16]
 800bc88:	690c      	ldr	r4, [r1, #16]
 800bc8a:	1b12      	subs	r2, r2, r4
 800bc8c:	d10e      	bne.n	800bcac <__mcmp+0x28>
 800bc8e:	f100 0314 	add.w	r3, r0, #20
 800bc92:	3114      	adds	r1, #20
 800bc94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bca0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bca4:	42a5      	cmp	r5, r4
 800bca6:	d003      	beq.n	800bcb0 <__mcmp+0x2c>
 800bca8:	d305      	bcc.n	800bcb6 <__mcmp+0x32>
 800bcaa:	2201      	movs	r2, #1
 800bcac:	4610      	mov	r0, r2
 800bcae:	bd30      	pop	{r4, r5, pc}
 800bcb0:	4283      	cmp	r3, r0
 800bcb2:	d3f3      	bcc.n	800bc9c <__mcmp+0x18>
 800bcb4:	e7fa      	b.n	800bcac <__mcmp+0x28>
 800bcb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcba:	e7f7      	b.n	800bcac <__mcmp+0x28>

0800bcbc <__mdiff>:
 800bcbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	460c      	mov	r4, r1
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	4690      	mov	r8, r2
 800bcca:	f7ff ffdb 	bl	800bc84 <__mcmp>
 800bcce:	1e05      	subs	r5, r0, #0
 800bcd0:	d110      	bne.n	800bcf4 <__mdiff+0x38>
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	f7ff fd09 	bl	800b6ec <_Balloc>
 800bcda:	b930      	cbnz	r0, 800bcea <__mdiff+0x2e>
 800bcdc:	4b3a      	ldr	r3, [pc, #232]	; (800bdc8 <__mdiff+0x10c>)
 800bcde:	4602      	mov	r2, r0
 800bce0:	f240 2132 	movw	r1, #562	; 0x232
 800bce4:	4839      	ldr	r0, [pc, #228]	; (800bdcc <__mdiff+0x110>)
 800bce6:	f001 f86b 	bl	800cdc0 <__assert_func>
 800bcea:	2301      	movs	r3, #1
 800bcec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf4:	bfa4      	itt	ge
 800bcf6:	4643      	movge	r3, r8
 800bcf8:	46a0      	movge	r8, r4
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd00:	bfa6      	itte	ge
 800bd02:	461c      	movge	r4, r3
 800bd04:	2500      	movge	r5, #0
 800bd06:	2501      	movlt	r5, #1
 800bd08:	f7ff fcf0 	bl	800b6ec <_Balloc>
 800bd0c:	b920      	cbnz	r0, 800bd18 <__mdiff+0x5c>
 800bd0e:	4b2e      	ldr	r3, [pc, #184]	; (800bdc8 <__mdiff+0x10c>)
 800bd10:	4602      	mov	r2, r0
 800bd12:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd16:	e7e5      	b.n	800bce4 <__mdiff+0x28>
 800bd18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd1c:	6926      	ldr	r6, [r4, #16]
 800bd1e:	60c5      	str	r5, [r0, #12]
 800bd20:	f104 0914 	add.w	r9, r4, #20
 800bd24:	f108 0514 	add.w	r5, r8, #20
 800bd28:	f100 0e14 	add.w	lr, r0, #20
 800bd2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bd30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd34:	f108 0210 	add.w	r2, r8, #16
 800bd38:	46f2      	mov	sl, lr
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd44:	fa1f f883 	uxth.w	r8, r3
 800bd48:	fa11 f18b 	uxtah	r1, r1, fp
 800bd4c:	0c1b      	lsrs	r3, r3, #16
 800bd4e:	eba1 0808 	sub.w	r8, r1, r8
 800bd52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd5a:	fa1f f888 	uxth.w	r8, r8
 800bd5e:	1419      	asrs	r1, r3, #16
 800bd60:	454e      	cmp	r6, r9
 800bd62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd66:	f84a 3b04 	str.w	r3, [sl], #4
 800bd6a:	d8e7      	bhi.n	800bd3c <__mdiff+0x80>
 800bd6c:	1b33      	subs	r3, r6, r4
 800bd6e:	3b15      	subs	r3, #21
 800bd70:	f023 0303 	bic.w	r3, r3, #3
 800bd74:	3304      	adds	r3, #4
 800bd76:	3415      	adds	r4, #21
 800bd78:	42a6      	cmp	r6, r4
 800bd7a:	bf38      	it	cc
 800bd7c:	2304      	movcc	r3, #4
 800bd7e:	441d      	add	r5, r3
 800bd80:	4473      	add	r3, lr
 800bd82:	469e      	mov	lr, r3
 800bd84:	462e      	mov	r6, r5
 800bd86:	4566      	cmp	r6, ip
 800bd88:	d30e      	bcc.n	800bda8 <__mdiff+0xec>
 800bd8a:	f10c 0203 	add.w	r2, ip, #3
 800bd8e:	1b52      	subs	r2, r2, r5
 800bd90:	f022 0203 	bic.w	r2, r2, #3
 800bd94:	3d03      	subs	r5, #3
 800bd96:	45ac      	cmp	ip, r5
 800bd98:	bf38      	it	cc
 800bd9a:	2200      	movcc	r2, #0
 800bd9c:	441a      	add	r2, r3
 800bd9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bda2:	b17b      	cbz	r3, 800bdc4 <__mdiff+0x108>
 800bda4:	6107      	str	r7, [r0, #16]
 800bda6:	e7a3      	b.n	800bcf0 <__mdiff+0x34>
 800bda8:	f856 8b04 	ldr.w	r8, [r6], #4
 800bdac:	fa11 f288 	uxtah	r2, r1, r8
 800bdb0:	1414      	asrs	r4, r2, #16
 800bdb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bdb6:	b292      	uxth	r2, r2
 800bdb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bdbc:	f84e 2b04 	str.w	r2, [lr], #4
 800bdc0:	1421      	asrs	r1, r4, #16
 800bdc2:	e7e0      	b.n	800bd86 <__mdiff+0xca>
 800bdc4:	3f01      	subs	r7, #1
 800bdc6:	e7ea      	b.n	800bd9e <__mdiff+0xe2>
 800bdc8:	0800f120 	.word	0x0800f120
 800bdcc:	0800f1ac 	.word	0x0800f1ac

0800bdd0 <__ulp>:
 800bdd0:	b082      	sub	sp, #8
 800bdd2:	ed8d 0b00 	vstr	d0, [sp]
 800bdd6:	9b01      	ldr	r3, [sp, #4]
 800bdd8:	4912      	ldr	r1, [pc, #72]	; (800be24 <__ulp+0x54>)
 800bdda:	4019      	ands	r1, r3
 800bddc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bde0:	2900      	cmp	r1, #0
 800bde2:	dd05      	ble.n	800bdf0 <__ulp+0x20>
 800bde4:	2200      	movs	r2, #0
 800bde6:	460b      	mov	r3, r1
 800bde8:	ec43 2b10 	vmov	d0, r2, r3
 800bdec:	b002      	add	sp, #8
 800bdee:	4770      	bx	lr
 800bdf0:	4249      	negs	r1, r1
 800bdf2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bdf6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bdfa:	f04f 0200 	mov.w	r2, #0
 800bdfe:	f04f 0300 	mov.w	r3, #0
 800be02:	da04      	bge.n	800be0e <__ulp+0x3e>
 800be04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800be08:	fa41 f300 	asr.w	r3, r1, r0
 800be0c:	e7ec      	b.n	800bde8 <__ulp+0x18>
 800be0e:	f1a0 0114 	sub.w	r1, r0, #20
 800be12:	291e      	cmp	r1, #30
 800be14:	bfda      	itte	le
 800be16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800be1a:	fa20 f101 	lsrle.w	r1, r0, r1
 800be1e:	2101      	movgt	r1, #1
 800be20:	460a      	mov	r2, r1
 800be22:	e7e1      	b.n	800bde8 <__ulp+0x18>
 800be24:	7ff00000 	.word	0x7ff00000

0800be28 <__b2d>:
 800be28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2a:	6905      	ldr	r5, [r0, #16]
 800be2c:	f100 0714 	add.w	r7, r0, #20
 800be30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800be34:	1f2e      	subs	r6, r5, #4
 800be36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800be3a:	4620      	mov	r0, r4
 800be3c:	f7ff fd48 	bl	800b8d0 <__hi0bits>
 800be40:	f1c0 0320 	rsb	r3, r0, #32
 800be44:	280a      	cmp	r0, #10
 800be46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bec4 <__b2d+0x9c>
 800be4a:	600b      	str	r3, [r1, #0]
 800be4c:	dc14      	bgt.n	800be78 <__b2d+0x50>
 800be4e:	f1c0 0e0b 	rsb	lr, r0, #11
 800be52:	fa24 f10e 	lsr.w	r1, r4, lr
 800be56:	42b7      	cmp	r7, r6
 800be58:	ea41 030c 	orr.w	r3, r1, ip
 800be5c:	bf34      	ite	cc
 800be5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be62:	2100      	movcs	r1, #0
 800be64:	3015      	adds	r0, #21
 800be66:	fa04 f000 	lsl.w	r0, r4, r0
 800be6a:	fa21 f10e 	lsr.w	r1, r1, lr
 800be6e:	ea40 0201 	orr.w	r2, r0, r1
 800be72:	ec43 2b10 	vmov	d0, r2, r3
 800be76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be78:	42b7      	cmp	r7, r6
 800be7a:	bf3a      	itte	cc
 800be7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be80:	f1a5 0608 	subcc.w	r6, r5, #8
 800be84:	2100      	movcs	r1, #0
 800be86:	380b      	subs	r0, #11
 800be88:	d017      	beq.n	800beba <__b2d+0x92>
 800be8a:	f1c0 0c20 	rsb	ip, r0, #32
 800be8e:	fa04 f500 	lsl.w	r5, r4, r0
 800be92:	42be      	cmp	r6, r7
 800be94:	fa21 f40c 	lsr.w	r4, r1, ip
 800be98:	ea45 0504 	orr.w	r5, r5, r4
 800be9c:	bf8c      	ite	hi
 800be9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bea2:	2400      	movls	r4, #0
 800bea4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bea8:	fa01 f000 	lsl.w	r0, r1, r0
 800beac:	fa24 f40c 	lsr.w	r4, r4, ip
 800beb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800beb4:	ea40 0204 	orr.w	r2, r0, r4
 800beb8:	e7db      	b.n	800be72 <__b2d+0x4a>
 800beba:	ea44 030c 	orr.w	r3, r4, ip
 800bebe:	460a      	mov	r2, r1
 800bec0:	e7d7      	b.n	800be72 <__b2d+0x4a>
 800bec2:	bf00      	nop
 800bec4:	3ff00000 	.word	0x3ff00000

0800bec8 <__d2b>:
 800bec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800becc:	4689      	mov	r9, r1
 800bece:	2101      	movs	r1, #1
 800bed0:	ec57 6b10 	vmov	r6, r7, d0
 800bed4:	4690      	mov	r8, r2
 800bed6:	f7ff fc09 	bl	800b6ec <_Balloc>
 800beda:	4604      	mov	r4, r0
 800bedc:	b930      	cbnz	r0, 800beec <__d2b+0x24>
 800bede:	4602      	mov	r2, r0
 800bee0:	4b25      	ldr	r3, [pc, #148]	; (800bf78 <__d2b+0xb0>)
 800bee2:	4826      	ldr	r0, [pc, #152]	; (800bf7c <__d2b+0xb4>)
 800bee4:	f240 310a 	movw	r1, #778	; 0x30a
 800bee8:	f000 ff6a 	bl	800cdc0 <__assert_func>
 800beec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bef4:	bb35      	cbnz	r5, 800bf44 <__d2b+0x7c>
 800bef6:	2e00      	cmp	r6, #0
 800bef8:	9301      	str	r3, [sp, #4]
 800befa:	d028      	beq.n	800bf4e <__d2b+0x86>
 800befc:	4668      	mov	r0, sp
 800befe:	9600      	str	r6, [sp, #0]
 800bf00:	f7ff fd06 	bl	800b910 <__lo0bits>
 800bf04:	9900      	ldr	r1, [sp, #0]
 800bf06:	b300      	cbz	r0, 800bf4a <__d2b+0x82>
 800bf08:	9a01      	ldr	r2, [sp, #4]
 800bf0a:	f1c0 0320 	rsb	r3, r0, #32
 800bf0e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf12:	430b      	orrs	r3, r1
 800bf14:	40c2      	lsrs	r2, r0
 800bf16:	6163      	str	r3, [r4, #20]
 800bf18:	9201      	str	r2, [sp, #4]
 800bf1a:	9b01      	ldr	r3, [sp, #4]
 800bf1c:	61a3      	str	r3, [r4, #24]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	bf14      	ite	ne
 800bf22:	2202      	movne	r2, #2
 800bf24:	2201      	moveq	r2, #1
 800bf26:	6122      	str	r2, [r4, #16]
 800bf28:	b1d5      	cbz	r5, 800bf60 <__d2b+0x98>
 800bf2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf2e:	4405      	add	r5, r0
 800bf30:	f8c9 5000 	str.w	r5, [r9]
 800bf34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf38:	f8c8 0000 	str.w	r0, [r8]
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	b003      	add	sp, #12
 800bf40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf48:	e7d5      	b.n	800bef6 <__d2b+0x2e>
 800bf4a:	6161      	str	r1, [r4, #20]
 800bf4c:	e7e5      	b.n	800bf1a <__d2b+0x52>
 800bf4e:	a801      	add	r0, sp, #4
 800bf50:	f7ff fcde 	bl	800b910 <__lo0bits>
 800bf54:	9b01      	ldr	r3, [sp, #4]
 800bf56:	6163      	str	r3, [r4, #20]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	6122      	str	r2, [r4, #16]
 800bf5c:	3020      	adds	r0, #32
 800bf5e:	e7e3      	b.n	800bf28 <__d2b+0x60>
 800bf60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf68:	f8c9 0000 	str.w	r0, [r9]
 800bf6c:	6918      	ldr	r0, [r3, #16]
 800bf6e:	f7ff fcaf 	bl	800b8d0 <__hi0bits>
 800bf72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf76:	e7df      	b.n	800bf38 <__d2b+0x70>
 800bf78:	0800f120 	.word	0x0800f120
 800bf7c:	0800f1ac 	.word	0x0800f1ac

0800bf80 <__ratio>:
 800bf80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	4688      	mov	r8, r1
 800bf86:	4669      	mov	r1, sp
 800bf88:	4681      	mov	r9, r0
 800bf8a:	f7ff ff4d 	bl	800be28 <__b2d>
 800bf8e:	a901      	add	r1, sp, #4
 800bf90:	4640      	mov	r0, r8
 800bf92:	ec55 4b10 	vmov	r4, r5, d0
 800bf96:	f7ff ff47 	bl	800be28 <__b2d>
 800bf9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bfa2:	eba3 0c02 	sub.w	ip, r3, r2
 800bfa6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bfaa:	1a9b      	subs	r3, r3, r2
 800bfac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bfb0:	ec51 0b10 	vmov	r0, r1, d0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	bfd6      	itet	le
 800bfb8:	460a      	movle	r2, r1
 800bfba:	462a      	movgt	r2, r5
 800bfbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bfc0:	468b      	mov	fp, r1
 800bfc2:	462f      	mov	r7, r5
 800bfc4:	bfd4      	ite	le
 800bfc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bfca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bfce:	4620      	mov	r0, r4
 800bfd0:	ee10 2a10 	vmov	r2, s0
 800bfd4:	465b      	mov	r3, fp
 800bfd6:	4639      	mov	r1, r7
 800bfd8:	f7f4 fc48 	bl	800086c <__aeabi_ddiv>
 800bfdc:	ec41 0b10 	vmov	d0, r0, r1
 800bfe0:	b003      	add	sp, #12
 800bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfe6 <__copybits>:
 800bfe6:	3901      	subs	r1, #1
 800bfe8:	b570      	push	{r4, r5, r6, lr}
 800bfea:	1149      	asrs	r1, r1, #5
 800bfec:	6914      	ldr	r4, [r2, #16]
 800bfee:	3101      	adds	r1, #1
 800bff0:	f102 0314 	add.w	r3, r2, #20
 800bff4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bff8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bffc:	1f05      	subs	r5, r0, #4
 800bffe:	42a3      	cmp	r3, r4
 800c000:	d30c      	bcc.n	800c01c <__copybits+0x36>
 800c002:	1aa3      	subs	r3, r4, r2
 800c004:	3b11      	subs	r3, #17
 800c006:	f023 0303 	bic.w	r3, r3, #3
 800c00a:	3211      	adds	r2, #17
 800c00c:	42a2      	cmp	r2, r4
 800c00e:	bf88      	it	hi
 800c010:	2300      	movhi	r3, #0
 800c012:	4418      	add	r0, r3
 800c014:	2300      	movs	r3, #0
 800c016:	4288      	cmp	r0, r1
 800c018:	d305      	bcc.n	800c026 <__copybits+0x40>
 800c01a:	bd70      	pop	{r4, r5, r6, pc}
 800c01c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c020:	f845 6f04 	str.w	r6, [r5, #4]!
 800c024:	e7eb      	b.n	800bffe <__copybits+0x18>
 800c026:	f840 3b04 	str.w	r3, [r0], #4
 800c02a:	e7f4      	b.n	800c016 <__copybits+0x30>

0800c02c <__any_on>:
 800c02c:	f100 0214 	add.w	r2, r0, #20
 800c030:	6900      	ldr	r0, [r0, #16]
 800c032:	114b      	asrs	r3, r1, #5
 800c034:	4298      	cmp	r0, r3
 800c036:	b510      	push	{r4, lr}
 800c038:	db11      	blt.n	800c05e <__any_on+0x32>
 800c03a:	dd0a      	ble.n	800c052 <__any_on+0x26>
 800c03c:	f011 011f 	ands.w	r1, r1, #31
 800c040:	d007      	beq.n	800c052 <__any_on+0x26>
 800c042:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c046:	fa24 f001 	lsr.w	r0, r4, r1
 800c04a:	fa00 f101 	lsl.w	r1, r0, r1
 800c04e:	428c      	cmp	r4, r1
 800c050:	d10b      	bne.n	800c06a <__any_on+0x3e>
 800c052:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c056:	4293      	cmp	r3, r2
 800c058:	d803      	bhi.n	800c062 <__any_on+0x36>
 800c05a:	2000      	movs	r0, #0
 800c05c:	bd10      	pop	{r4, pc}
 800c05e:	4603      	mov	r3, r0
 800c060:	e7f7      	b.n	800c052 <__any_on+0x26>
 800c062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c066:	2900      	cmp	r1, #0
 800c068:	d0f5      	beq.n	800c056 <__any_on+0x2a>
 800c06a:	2001      	movs	r0, #1
 800c06c:	e7f6      	b.n	800c05c <__any_on+0x30>

0800c06e <_calloc_r>:
 800c06e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c070:	fba1 2402 	umull	r2, r4, r1, r2
 800c074:	b94c      	cbnz	r4, 800c08a <_calloc_r+0x1c>
 800c076:	4611      	mov	r1, r2
 800c078:	9201      	str	r2, [sp, #4]
 800c07a:	f000 f87b 	bl	800c174 <_malloc_r>
 800c07e:	9a01      	ldr	r2, [sp, #4]
 800c080:	4605      	mov	r5, r0
 800c082:	b930      	cbnz	r0, 800c092 <_calloc_r+0x24>
 800c084:	4628      	mov	r0, r5
 800c086:	b003      	add	sp, #12
 800c088:	bd30      	pop	{r4, r5, pc}
 800c08a:	220c      	movs	r2, #12
 800c08c:	6002      	str	r2, [r0, #0]
 800c08e:	2500      	movs	r5, #0
 800c090:	e7f8      	b.n	800c084 <_calloc_r+0x16>
 800c092:	4621      	mov	r1, r4
 800c094:	f7fc fb26 	bl	80086e4 <memset>
 800c098:	e7f4      	b.n	800c084 <_calloc_r+0x16>
	...

0800c09c <_free_r>:
 800c09c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c09e:	2900      	cmp	r1, #0
 800c0a0:	d044      	beq.n	800c12c <_free_r+0x90>
 800c0a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0a6:	9001      	str	r0, [sp, #4]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f1a1 0404 	sub.w	r4, r1, #4
 800c0ae:	bfb8      	it	lt
 800c0b0:	18e4      	addlt	r4, r4, r3
 800c0b2:	f001 f889 	bl	800d1c8 <__malloc_lock>
 800c0b6:	4a1e      	ldr	r2, [pc, #120]	; (800c130 <_free_r+0x94>)
 800c0b8:	9801      	ldr	r0, [sp, #4]
 800c0ba:	6813      	ldr	r3, [r2, #0]
 800c0bc:	b933      	cbnz	r3, 800c0cc <_free_r+0x30>
 800c0be:	6063      	str	r3, [r4, #4]
 800c0c0:	6014      	str	r4, [r2, #0]
 800c0c2:	b003      	add	sp, #12
 800c0c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0c8:	f001 b884 	b.w	800d1d4 <__malloc_unlock>
 800c0cc:	42a3      	cmp	r3, r4
 800c0ce:	d908      	bls.n	800c0e2 <_free_r+0x46>
 800c0d0:	6825      	ldr	r5, [r4, #0]
 800c0d2:	1961      	adds	r1, r4, r5
 800c0d4:	428b      	cmp	r3, r1
 800c0d6:	bf01      	itttt	eq
 800c0d8:	6819      	ldreq	r1, [r3, #0]
 800c0da:	685b      	ldreq	r3, [r3, #4]
 800c0dc:	1949      	addeq	r1, r1, r5
 800c0de:	6021      	streq	r1, [r4, #0]
 800c0e0:	e7ed      	b.n	800c0be <_free_r+0x22>
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	b10b      	cbz	r3, 800c0ec <_free_r+0x50>
 800c0e8:	42a3      	cmp	r3, r4
 800c0ea:	d9fa      	bls.n	800c0e2 <_free_r+0x46>
 800c0ec:	6811      	ldr	r1, [r2, #0]
 800c0ee:	1855      	adds	r5, r2, r1
 800c0f0:	42a5      	cmp	r5, r4
 800c0f2:	d10b      	bne.n	800c10c <_free_r+0x70>
 800c0f4:	6824      	ldr	r4, [r4, #0]
 800c0f6:	4421      	add	r1, r4
 800c0f8:	1854      	adds	r4, r2, r1
 800c0fa:	42a3      	cmp	r3, r4
 800c0fc:	6011      	str	r1, [r2, #0]
 800c0fe:	d1e0      	bne.n	800c0c2 <_free_r+0x26>
 800c100:	681c      	ldr	r4, [r3, #0]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	6053      	str	r3, [r2, #4]
 800c106:	4421      	add	r1, r4
 800c108:	6011      	str	r1, [r2, #0]
 800c10a:	e7da      	b.n	800c0c2 <_free_r+0x26>
 800c10c:	d902      	bls.n	800c114 <_free_r+0x78>
 800c10e:	230c      	movs	r3, #12
 800c110:	6003      	str	r3, [r0, #0]
 800c112:	e7d6      	b.n	800c0c2 <_free_r+0x26>
 800c114:	6825      	ldr	r5, [r4, #0]
 800c116:	1961      	adds	r1, r4, r5
 800c118:	428b      	cmp	r3, r1
 800c11a:	bf04      	itt	eq
 800c11c:	6819      	ldreq	r1, [r3, #0]
 800c11e:	685b      	ldreq	r3, [r3, #4]
 800c120:	6063      	str	r3, [r4, #4]
 800c122:	bf04      	itt	eq
 800c124:	1949      	addeq	r1, r1, r5
 800c126:	6021      	streq	r1, [r4, #0]
 800c128:	6054      	str	r4, [r2, #4]
 800c12a:	e7ca      	b.n	800c0c2 <_free_r+0x26>
 800c12c:	b003      	add	sp, #12
 800c12e:	bd30      	pop	{r4, r5, pc}
 800c130:	2000897c 	.word	0x2000897c

0800c134 <sbrk_aligned>:
 800c134:	b570      	push	{r4, r5, r6, lr}
 800c136:	4e0e      	ldr	r6, [pc, #56]	; (800c170 <sbrk_aligned+0x3c>)
 800c138:	460c      	mov	r4, r1
 800c13a:	6831      	ldr	r1, [r6, #0]
 800c13c:	4605      	mov	r5, r0
 800c13e:	b911      	cbnz	r1, 800c146 <sbrk_aligned+0x12>
 800c140:	f000 fd26 	bl	800cb90 <_sbrk_r>
 800c144:	6030      	str	r0, [r6, #0]
 800c146:	4621      	mov	r1, r4
 800c148:	4628      	mov	r0, r5
 800c14a:	f000 fd21 	bl	800cb90 <_sbrk_r>
 800c14e:	1c43      	adds	r3, r0, #1
 800c150:	d00a      	beq.n	800c168 <sbrk_aligned+0x34>
 800c152:	1cc4      	adds	r4, r0, #3
 800c154:	f024 0403 	bic.w	r4, r4, #3
 800c158:	42a0      	cmp	r0, r4
 800c15a:	d007      	beq.n	800c16c <sbrk_aligned+0x38>
 800c15c:	1a21      	subs	r1, r4, r0
 800c15e:	4628      	mov	r0, r5
 800c160:	f000 fd16 	bl	800cb90 <_sbrk_r>
 800c164:	3001      	adds	r0, #1
 800c166:	d101      	bne.n	800c16c <sbrk_aligned+0x38>
 800c168:	f04f 34ff 	mov.w	r4, #4294967295
 800c16c:	4620      	mov	r0, r4
 800c16e:	bd70      	pop	{r4, r5, r6, pc}
 800c170:	20008980 	.word	0x20008980

0800c174 <_malloc_r>:
 800c174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c178:	1ccd      	adds	r5, r1, #3
 800c17a:	f025 0503 	bic.w	r5, r5, #3
 800c17e:	3508      	adds	r5, #8
 800c180:	2d0c      	cmp	r5, #12
 800c182:	bf38      	it	cc
 800c184:	250c      	movcc	r5, #12
 800c186:	2d00      	cmp	r5, #0
 800c188:	4607      	mov	r7, r0
 800c18a:	db01      	blt.n	800c190 <_malloc_r+0x1c>
 800c18c:	42a9      	cmp	r1, r5
 800c18e:	d905      	bls.n	800c19c <_malloc_r+0x28>
 800c190:	230c      	movs	r3, #12
 800c192:	603b      	str	r3, [r7, #0]
 800c194:	2600      	movs	r6, #0
 800c196:	4630      	mov	r0, r6
 800c198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c19c:	4e2e      	ldr	r6, [pc, #184]	; (800c258 <_malloc_r+0xe4>)
 800c19e:	f001 f813 	bl	800d1c8 <__malloc_lock>
 800c1a2:	6833      	ldr	r3, [r6, #0]
 800c1a4:	461c      	mov	r4, r3
 800c1a6:	bb34      	cbnz	r4, 800c1f6 <_malloc_r+0x82>
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	4638      	mov	r0, r7
 800c1ac:	f7ff ffc2 	bl	800c134 <sbrk_aligned>
 800c1b0:	1c43      	adds	r3, r0, #1
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	d14d      	bne.n	800c252 <_malloc_r+0xde>
 800c1b6:	6834      	ldr	r4, [r6, #0]
 800c1b8:	4626      	mov	r6, r4
 800c1ba:	2e00      	cmp	r6, #0
 800c1bc:	d140      	bne.n	800c240 <_malloc_r+0xcc>
 800c1be:	6823      	ldr	r3, [r4, #0]
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	4638      	mov	r0, r7
 800c1c4:	eb04 0803 	add.w	r8, r4, r3
 800c1c8:	f000 fce2 	bl	800cb90 <_sbrk_r>
 800c1cc:	4580      	cmp	r8, r0
 800c1ce:	d13a      	bne.n	800c246 <_malloc_r+0xd2>
 800c1d0:	6821      	ldr	r1, [r4, #0]
 800c1d2:	3503      	adds	r5, #3
 800c1d4:	1a6d      	subs	r5, r5, r1
 800c1d6:	f025 0503 	bic.w	r5, r5, #3
 800c1da:	3508      	adds	r5, #8
 800c1dc:	2d0c      	cmp	r5, #12
 800c1de:	bf38      	it	cc
 800c1e0:	250c      	movcc	r5, #12
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	4638      	mov	r0, r7
 800c1e6:	f7ff ffa5 	bl	800c134 <sbrk_aligned>
 800c1ea:	3001      	adds	r0, #1
 800c1ec:	d02b      	beq.n	800c246 <_malloc_r+0xd2>
 800c1ee:	6823      	ldr	r3, [r4, #0]
 800c1f0:	442b      	add	r3, r5
 800c1f2:	6023      	str	r3, [r4, #0]
 800c1f4:	e00e      	b.n	800c214 <_malloc_r+0xa0>
 800c1f6:	6822      	ldr	r2, [r4, #0]
 800c1f8:	1b52      	subs	r2, r2, r5
 800c1fa:	d41e      	bmi.n	800c23a <_malloc_r+0xc6>
 800c1fc:	2a0b      	cmp	r2, #11
 800c1fe:	d916      	bls.n	800c22e <_malloc_r+0xba>
 800c200:	1961      	adds	r1, r4, r5
 800c202:	42a3      	cmp	r3, r4
 800c204:	6025      	str	r5, [r4, #0]
 800c206:	bf18      	it	ne
 800c208:	6059      	strne	r1, [r3, #4]
 800c20a:	6863      	ldr	r3, [r4, #4]
 800c20c:	bf08      	it	eq
 800c20e:	6031      	streq	r1, [r6, #0]
 800c210:	5162      	str	r2, [r4, r5]
 800c212:	604b      	str	r3, [r1, #4]
 800c214:	4638      	mov	r0, r7
 800c216:	f104 060b 	add.w	r6, r4, #11
 800c21a:	f000 ffdb 	bl	800d1d4 <__malloc_unlock>
 800c21e:	f026 0607 	bic.w	r6, r6, #7
 800c222:	1d23      	adds	r3, r4, #4
 800c224:	1af2      	subs	r2, r6, r3
 800c226:	d0b6      	beq.n	800c196 <_malloc_r+0x22>
 800c228:	1b9b      	subs	r3, r3, r6
 800c22a:	50a3      	str	r3, [r4, r2]
 800c22c:	e7b3      	b.n	800c196 <_malloc_r+0x22>
 800c22e:	6862      	ldr	r2, [r4, #4]
 800c230:	42a3      	cmp	r3, r4
 800c232:	bf0c      	ite	eq
 800c234:	6032      	streq	r2, [r6, #0]
 800c236:	605a      	strne	r2, [r3, #4]
 800c238:	e7ec      	b.n	800c214 <_malloc_r+0xa0>
 800c23a:	4623      	mov	r3, r4
 800c23c:	6864      	ldr	r4, [r4, #4]
 800c23e:	e7b2      	b.n	800c1a6 <_malloc_r+0x32>
 800c240:	4634      	mov	r4, r6
 800c242:	6876      	ldr	r6, [r6, #4]
 800c244:	e7b9      	b.n	800c1ba <_malloc_r+0x46>
 800c246:	230c      	movs	r3, #12
 800c248:	603b      	str	r3, [r7, #0]
 800c24a:	4638      	mov	r0, r7
 800c24c:	f000 ffc2 	bl	800d1d4 <__malloc_unlock>
 800c250:	e7a1      	b.n	800c196 <_malloc_r+0x22>
 800c252:	6025      	str	r5, [r4, #0]
 800c254:	e7de      	b.n	800c214 <_malloc_r+0xa0>
 800c256:	bf00      	nop
 800c258:	2000897c 	.word	0x2000897c

0800c25c <__ssputs_r>:
 800c25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c260:	688e      	ldr	r6, [r1, #8]
 800c262:	429e      	cmp	r6, r3
 800c264:	4682      	mov	sl, r0
 800c266:	460c      	mov	r4, r1
 800c268:	4690      	mov	r8, r2
 800c26a:	461f      	mov	r7, r3
 800c26c:	d838      	bhi.n	800c2e0 <__ssputs_r+0x84>
 800c26e:	898a      	ldrh	r2, [r1, #12]
 800c270:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c274:	d032      	beq.n	800c2dc <__ssputs_r+0x80>
 800c276:	6825      	ldr	r5, [r4, #0]
 800c278:	6909      	ldr	r1, [r1, #16]
 800c27a:	eba5 0901 	sub.w	r9, r5, r1
 800c27e:	6965      	ldr	r5, [r4, #20]
 800c280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c284:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c288:	3301      	adds	r3, #1
 800c28a:	444b      	add	r3, r9
 800c28c:	106d      	asrs	r5, r5, #1
 800c28e:	429d      	cmp	r5, r3
 800c290:	bf38      	it	cc
 800c292:	461d      	movcc	r5, r3
 800c294:	0553      	lsls	r3, r2, #21
 800c296:	d531      	bpl.n	800c2fc <__ssputs_r+0xa0>
 800c298:	4629      	mov	r1, r5
 800c29a:	f7ff ff6b 	bl	800c174 <_malloc_r>
 800c29e:	4606      	mov	r6, r0
 800c2a0:	b950      	cbnz	r0, 800c2b8 <__ssputs_r+0x5c>
 800c2a2:	230c      	movs	r3, #12
 800c2a4:	f8ca 3000 	str.w	r3, [sl]
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ae:	81a3      	strh	r3, [r4, #12]
 800c2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b8:	6921      	ldr	r1, [r4, #16]
 800c2ba:	464a      	mov	r2, r9
 800c2bc:	f7fc fa04 	bl	80086c8 <memcpy>
 800c2c0:	89a3      	ldrh	r3, [r4, #12]
 800c2c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2ca:	81a3      	strh	r3, [r4, #12]
 800c2cc:	6126      	str	r6, [r4, #16]
 800c2ce:	6165      	str	r5, [r4, #20]
 800c2d0:	444e      	add	r6, r9
 800c2d2:	eba5 0509 	sub.w	r5, r5, r9
 800c2d6:	6026      	str	r6, [r4, #0]
 800c2d8:	60a5      	str	r5, [r4, #8]
 800c2da:	463e      	mov	r6, r7
 800c2dc:	42be      	cmp	r6, r7
 800c2de:	d900      	bls.n	800c2e2 <__ssputs_r+0x86>
 800c2e0:	463e      	mov	r6, r7
 800c2e2:	6820      	ldr	r0, [r4, #0]
 800c2e4:	4632      	mov	r2, r6
 800c2e6:	4641      	mov	r1, r8
 800c2e8:	f000 ff54 	bl	800d194 <memmove>
 800c2ec:	68a3      	ldr	r3, [r4, #8]
 800c2ee:	1b9b      	subs	r3, r3, r6
 800c2f0:	60a3      	str	r3, [r4, #8]
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	4433      	add	r3, r6
 800c2f6:	6023      	str	r3, [r4, #0]
 800c2f8:	2000      	movs	r0, #0
 800c2fa:	e7db      	b.n	800c2b4 <__ssputs_r+0x58>
 800c2fc:	462a      	mov	r2, r5
 800c2fe:	f000 ff6f 	bl	800d1e0 <_realloc_r>
 800c302:	4606      	mov	r6, r0
 800c304:	2800      	cmp	r0, #0
 800c306:	d1e1      	bne.n	800c2cc <__ssputs_r+0x70>
 800c308:	6921      	ldr	r1, [r4, #16]
 800c30a:	4650      	mov	r0, sl
 800c30c:	f7ff fec6 	bl	800c09c <_free_r>
 800c310:	e7c7      	b.n	800c2a2 <__ssputs_r+0x46>
	...

0800c314 <_svfiprintf_r>:
 800c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c318:	4698      	mov	r8, r3
 800c31a:	898b      	ldrh	r3, [r1, #12]
 800c31c:	061b      	lsls	r3, r3, #24
 800c31e:	b09d      	sub	sp, #116	; 0x74
 800c320:	4607      	mov	r7, r0
 800c322:	460d      	mov	r5, r1
 800c324:	4614      	mov	r4, r2
 800c326:	d50e      	bpl.n	800c346 <_svfiprintf_r+0x32>
 800c328:	690b      	ldr	r3, [r1, #16]
 800c32a:	b963      	cbnz	r3, 800c346 <_svfiprintf_r+0x32>
 800c32c:	2140      	movs	r1, #64	; 0x40
 800c32e:	f7ff ff21 	bl	800c174 <_malloc_r>
 800c332:	6028      	str	r0, [r5, #0]
 800c334:	6128      	str	r0, [r5, #16]
 800c336:	b920      	cbnz	r0, 800c342 <_svfiprintf_r+0x2e>
 800c338:	230c      	movs	r3, #12
 800c33a:	603b      	str	r3, [r7, #0]
 800c33c:	f04f 30ff 	mov.w	r0, #4294967295
 800c340:	e0d1      	b.n	800c4e6 <_svfiprintf_r+0x1d2>
 800c342:	2340      	movs	r3, #64	; 0x40
 800c344:	616b      	str	r3, [r5, #20]
 800c346:	2300      	movs	r3, #0
 800c348:	9309      	str	r3, [sp, #36]	; 0x24
 800c34a:	2320      	movs	r3, #32
 800c34c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c350:	f8cd 800c 	str.w	r8, [sp, #12]
 800c354:	2330      	movs	r3, #48	; 0x30
 800c356:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c500 <_svfiprintf_r+0x1ec>
 800c35a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c35e:	f04f 0901 	mov.w	r9, #1
 800c362:	4623      	mov	r3, r4
 800c364:	469a      	mov	sl, r3
 800c366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c36a:	b10a      	cbz	r2, 800c370 <_svfiprintf_r+0x5c>
 800c36c:	2a25      	cmp	r2, #37	; 0x25
 800c36e:	d1f9      	bne.n	800c364 <_svfiprintf_r+0x50>
 800c370:	ebba 0b04 	subs.w	fp, sl, r4
 800c374:	d00b      	beq.n	800c38e <_svfiprintf_r+0x7a>
 800c376:	465b      	mov	r3, fp
 800c378:	4622      	mov	r2, r4
 800c37a:	4629      	mov	r1, r5
 800c37c:	4638      	mov	r0, r7
 800c37e:	f7ff ff6d 	bl	800c25c <__ssputs_r>
 800c382:	3001      	adds	r0, #1
 800c384:	f000 80aa 	beq.w	800c4dc <_svfiprintf_r+0x1c8>
 800c388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c38a:	445a      	add	r2, fp
 800c38c:	9209      	str	r2, [sp, #36]	; 0x24
 800c38e:	f89a 3000 	ldrb.w	r3, [sl]
 800c392:	2b00      	cmp	r3, #0
 800c394:	f000 80a2 	beq.w	800c4dc <_svfiprintf_r+0x1c8>
 800c398:	2300      	movs	r3, #0
 800c39a:	f04f 32ff 	mov.w	r2, #4294967295
 800c39e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3a2:	f10a 0a01 	add.w	sl, sl, #1
 800c3a6:	9304      	str	r3, [sp, #16]
 800c3a8:	9307      	str	r3, [sp, #28]
 800c3aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3ae:	931a      	str	r3, [sp, #104]	; 0x68
 800c3b0:	4654      	mov	r4, sl
 800c3b2:	2205      	movs	r2, #5
 800c3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3b8:	4851      	ldr	r0, [pc, #324]	; (800c500 <_svfiprintf_r+0x1ec>)
 800c3ba:	f7f3 ff21 	bl	8000200 <memchr>
 800c3be:	9a04      	ldr	r2, [sp, #16]
 800c3c0:	b9d8      	cbnz	r0, 800c3fa <_svfiprintf_r+0xe6>
 800c3c2:	06d0      	lsls	r0, r2, #27
 800c3c4:	bf44      	itt	mi
 800c3c6:	2320      	movmi	r3, #32
 800c3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3cc:	0711      	lsls	r1, r2, #28
 800c3ce:	bf44      	itt	mi
 800c3d0:	232b      	movmi	r3, #43	; 0x2b
 800c3d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3da:	2b2a      	cmp	r3, #42	; 0x2a
 800c3dc:	d015      	beq.n	800c40a <_svfiprintf_r+0xf6>
 800c3de:	9a07      	ldr	r2, [sp, #28]
 800c3e0:	4654      	mov	r4, sl
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	f04f 0c0a 	mov.w	ip, #10
 800c3e8:	4621      	mov	r1, r4
 800c3ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3ee:	3b30      	subs	r3, #48	; 0x30
 800c3f0:	2b09      	cmp	r3, #9
 800c3f2:	d94e      	bls.n	800c492 <_svfiprintf_r+0x17e>
 800c3f4:	b1b0      	cbz	r0, 800c424 <_svfiprintf_r+0x110>
 800c3f6:	9207      	str	r2, [sp, #28]
 800c3f8:	e014      	b.n	800c424 <_svfiprintf_r+0x110>
 800c3fa:	eba0 0308 	sub.w	r3, r0, r8
 800c3fe:	fa09 f303 	lsl.w	r3, r9, r3
 800c402:	4313      	orrs	r3, r2
 800c404:	9304      	str	r3, [sp, #16]
 800c406:	46a2      	mov	sl, r4
 800c408:	e7d2      	b.n	800c3b0 <_svfiprintf_r+0x9c>
 800c40a:	9b03      	ldr	r3, [sp, #12]
 800c40c:	1d19      	adds	r1, r3, #4
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	9103      	str	r1, [sp, #12]
 800c412:	2b00      	cmp	r3, #0
 800c414:	bfbb      	ittet	lt
 800c416:	425b      	neglt	r3, r3
 800c418:	f042 0202 	orrlt.w	r2, r2, #2
 800c41c:	9307      	strge	r3, [sp, #28]
 800c41e:	9307      	strlt	r3, [sp, #28]
 800c420:	bfb8      	it	lt
 800c422:	9204      	strlt	r2, [sp, #16]
 800c424:	7823      	ldrb	r3, [r4, #0]
 800c426:	2b2e      	cmp	r3, #46	; 0x2e
 800c428:	d10c      	bne.n	800c444 <_svfiprintf_r+0x130>
 800c42a:	7863      	ldrb	r3, [r4, #1]
 800c42c:	2b2a      	cmp	r3, #42	; 0x2a
 800c42e:	d135      	bne.n	800c49c <_svfiprintf_r+0x188>
 800c430:	9b03      	ldr	r3, [sp, #12]
 800c432:	1d1a      	adds	r2, r3, #4
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	9203      	str	r2, [sp, #12]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	bfb8      	it	lt
 800c43c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c440:	3402      	adds	r4, #2
 800c442:	9305      	str	r3, [sp, #20]
 800c444:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c510 <_svfiprintf_r+0x1fc>
 800c448:	7821      	ldrb	r1, [r4, #0]
 800c44a:	2203      	movs	r2, #3
 800c44c:	4650      	mov	r0, sl
 800c44e:	f7f3 fed7 	bl	8000200 <memchr>
 800c452:	b140      	cbz	r0, 800c466 <_svfiprintf_r+0x152>
 800c454:	2340      	movs	r3, #64	; 0x40
 800c456:	eba0 000a 	sub.w	r0, r0, sl
 800c45a:	fa03 f000 	lsl.w	r0, r3, r0
 800c45e:	9b04      	ldr	r3, [sp, #16]
 800c460:	4303      	orrs	r3, r0
 800c462:	3401      	adds	r4, #1
 800c464:	9304      	str	r3, [sp, #16]
 800c466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c46a:	4826      	ldr	r0, [pc, #152]	; (800c504 <_svfiprintf_r+0x1f0>)
 800c46c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c470:	2206      	movs	r2, #6
 800c472:	f7f3 fec5 	bl	8000200 <memchr>
 800c476:	2800      	cmp	r0, #0
 800c478:	d038      	beq.n	800c4ec <_svfiprintf_r+0x1d8>
 800c47a:	4b23      	ldr	r3, [pc, #140]	; (800c508 <_svfiprintf_r+0x1f4>)
 800c47c:	bb1b      	cbnz	r3, 800c4c6 <_svfiprintf_r+0x1b2>
 800c47e:	9b03      	ldr	r3, [sp, #12]
 800c480:	3307      	adds	r3, #7
 800c482:	f023 0307 	bic.w	r3, r3, #7
 800c486:	3308      	adds	r3, #8
 800c488:	9303      	str	r3, [sp, #12]
 800c48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c48c:	4433      	add	r3, r6
 800c48e:	9309      	str	r3, [sp, #36]	; 0x24
 800c490:	e767      	b.n	800c362 <_svfiprintf_r+0x4e>
 800c492:	fb0c 3202 	mla	r2, ip, r2, r3
 800c496:	460c      	mov	r4, r1
 800c498:	2001      	movs	r0, #1
 800c49a:	e7a5      	b.n	800c3e8 <_svfiprintf_r+0xd4>
 800c49c:	2300      	movs	r3, #0
 800c49e:	3401      	adds	r4, #1
 800c4a0:	9305      	str	r3, [sp, #20]
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	f04f 0c0a 	mov.w	ip, #10
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4ae:	3a30      	subs	r2, #48	; 0x30
 800c4b0:	2a09      	cmp	r2, #9
 800c4b2:	d903      	bls.n	800c4bc <_svfiprintf_r+0x1a8>
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d0c5      	beq.n	800c444 <_svfiprintf_r+0x130>
 800c4b8:	9105      	str	r1, [sp, #20]
 800c4ba:	e7c3      	b.n	800c444 <_svfiprintf_r+0x130>
 800c4bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e7f0      	b.n	800c4a8 <_svfiprintf_r+0x194>
 800c4c6:	ab03      	add	r3, sp, #12
 800c4c8:	9300      	str	r3, [sp, #0]
 800c4ca:	462a      	mov	r2, r5
 800c4cc:	4b0f      	ldr	r3, [pc, #60]	; (800c50c <_svfiprintf_r+0x1f8>)
 800c4ce:	a904      	add	r1, sp, #16
 800c4d0:	4638      	mov	r0, r7
 800c4d2:	f7fc f9af 	bl	8008834 <_printf_float>
 800c4d6:	1c42      	adds	r2, r0, #1
 800c4d8:	4606      	mov	r6, r0
 800c4da:	d1d6      	bne.n	800c48a <_svfiprintf_r+0x176>
 800c4dc:	89ab      	ldrh	r3, [r5, #12]
 800c4de:	065b      	lsls	r3, r3, #25
 800c4e0:	f53f af2c 	bmi.w	800c33c <_svfiprintf_r+0x28>
 800c4e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4e6:	b01d      	add	sp, #116	; 0x74
 800c4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ec:	ab03      	add	r3, sp, #12
 800c4ee:	9300      	str	r3, [sp, #0]
 800c4f0:	462a      	mov	r2, r5
 800c4f2:	4b06      	ldr	r3, [pc, #24]	; (800c50c <_svfiprintf_r+0x1f8>)
 800c4f4:	a904      	add	r1, sp, #16
 800c4f6:	4638      	mov	r0, r7
 800c4f8:	f7fc fc40 	bl	8008d7c <_printf_i>
 800c4fc:	e7eb      	b.n	800c4d6 <_svfiprintf_r+0x1c2>
 800c4fe:	bf00      	nop
 800c500:	0800f304 	.word	0x0800f304
 800c504:	0800f30e 	.word	0x0800f30e
 800c508:	08008835 	.word	0x08008835
 800c50c:	0800c25d 	.word	0x0800c25d
 800c510:	0800f30a 	.word	0x0800f30a

0800c514 <_sungetc_r>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	1c4b      	adds	r3, r1, #1
 800c518:	4614      	mov	r4, r2
 800c51a:	d103      	bne.n	800c524 <_sungetc_r+0x10>
 800c51c:	f04f 35ff 	mov.w	r5, #4294967295
 800c520:	4628      	mov	r0, r5
 800c522:	bd38      	pop	{r3, r4, r5, pc}
 800c524:	8993      	ldrh	r3, [r2, #12]
 800c526:	f023 0320 	bic.w	r3, r3, #32
 800c52a:	8193      	strh	r3, [r2, #12]
 800c52c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c52e:	6852      	ldr	r2, [r2, #4]
 800c530:	b2cd      	uxtb	r5, r1
 800c532:	b18b      	cbz	r3, 800c558 <_sungetc_r+0x44>
 800c534:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c536:	4293      	cmp	r3, r2
 800c538:	dd08      	ble.n	800c54c <_sungetc_r+0x38>
 800c53a:	6823      	ldr	r3, [r4, #0]
 800c53c:	1e5a      	subs	r2, r3, #1
 800c53e:	6022      	str	r2, [r4, #0]
 800c540:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c544:	6863      	ldr	r3, [r4, #4]
 800c546:	3301      	adds	r3, #1
 800c548:	6063      	str	r3, [r4, #4]
 800c54a:	e7e9      	b.n	800c520 <_sungetc_r+0xc>
 800c54c:	4621      	mov	r1, r4
 800c54e:	f000 fbef 	bl	800cd30 <__submore>
 800c552:	2800      	cmp	r0, #0
 800c554:	d0f1      	beq.n	800c53a <_sungetc_r+0x26>
 800c556:	e7e1      	b.n	800c51c <_sungetc_r+0x8>
 800c558:	6921      	ldr	r1, [r4, #16]
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	b151      	cbz	r1, 800c574 <_sungetc_r+0x60>
 800c55e:	4299      	cmp	r1, r3
 800c560:	d208      	bcs.n	800c574 <_sungetc_r+0x60>
 800c562:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c566:	42a9      	cmp	r1, r5
 800c568:	d104      	bne.n	800c574 <_sungetc_r+0x60>
 800c56a:	3b01      	subs	r3, #1
 800c56c:	3201      	adds	r2, #1
 800c56e:	6023      	str	r3, [r4, #0]
 800c570:	6062      	str	r2, [r4, #4]
 800c572:	e7d5      	b.n	800c520 <_sungetc_r+0xc>
 800c574:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c57c:	6363      	str	r3, [r4, #52]	; 0x34
 800c57e:	2303      	movs	r3, #3
 800c580:	63a3      	str	r3, [r4, #56]	; 0x38
 800c582:	4623      	mov	r3, r4
 800c584:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	2301      	movs	r3, #1
 800c58c:	e7dc      	b.n	800c548 <_sungetc_r+0x34>

0800c58e <__ssrefill_r>:
 800c58e:	b510      	push	{r4, lr}
 800c590:	460c      	mov	r4, r1
 800c592:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c594:	b169      	cbz	r1, 800c5b2 <__ssrefill_r+0x24>
 800c596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c59a:	4299      	cmp	r1, r3
 800c59c:	d001      	beq.n	800c5a2 <__ssrefill_r+0x14>
 800c59e:	f7ff fd7d 	bl	800c09c <_free_r>
 800c5a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5a4:	6063      	str	r3, [r4, #4]
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	6360      	str	r0, [r4, #52]	; 0x34
 800c5aa:	b113      	cbz	r3, 800c5b2 <__ssrefill_r+0x24>
 800c5ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c5ae:	6023      	str	r3, [r4, #0]
 800c5b0:	bd10      	pop	{r4, pc}
 800c5b2:	6923      	ldr	r3, [r4, #16]
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	6063      	str	r3, [r4, #4]
 800c5ba:	89a3      	ldrh	r3, [r4, #12]
 800c5bc:	f043 0320 	orr.w	r3, r3, #32
 800c5c0:	81a3      	strh	r3, [r4, #12]
 800c5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c6:	e7f3      	b.n	800c5b0 <__ssrefill_r+0x22>

0800c5c8 <__ssvfiscanf_r>:
 800c5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c5d8:	49a6      	ldr	r1, [pc, #664]	; (800c874 <__ssvfiscanf_r+0x2ac>)
 800c5da:	91a0      	str	r1, [sp, #640]	; 0x280
 800c5dc:	f10d 0804 	add.w	r8, sp, #4
 800c5e0:	49a5      	ldr	r1, [pc, #660]	; (800c878 <__ssvfiscanf_r+0x2b0>)
 800c5e2:	4fa6      	ldr	r7, [pc, #664]	; (800c87c <__ssvfiscanf_r+0x2b4>)
 800c5e4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c880 <__ssvfiscanf_r+0x2b8>
 800c5e8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c5ec:	4606      	mov	r6, r0
 800c5ee:	91a1      	str	r1, [sp, #644]	; 0x284
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	7813      	ldrb	r3, [r2, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f000 815a 	beq.w	800c8ae <__ssvfiscanf_r+0x2e6>
 800c5fa:	5dd9      	ldrb	r1, [r3, r7]
 800c5fc:	f011 0108 	ands.w	r1, r1, #8
 800c600:	f102 0501 	add.w	r5, r2, #1
 800c604:	d019      	beq.n	800c63a <__ssvfiscanf_r+0x72>
 800c606:	6863      	ldr	r3, [r4, #4]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	dd0f      	ble.n	800c62c <__ssvfiscanf_r+0x64>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	781a      	ldrb	r2, [r3, #0]
 800c610:	5cba      	ldrb	r2, [r7, r2]
 800c612:	0712      	lsls	r2, r2, #28
 800c614:	d401      	bmi.n	800c61a <__ssvfiscanf_r+0x52>
 800c616:	462a      	mov	r2, r5
 800c618:	e7eb      	b.n	800c5f2 <__ssvfiscanf_r+0x2a>
 800c61a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c61c:	3201      	adds	r2, #1
 800c61e:	9245      	str	r2, [sp, #276]	; 0x114
 800c620:	6862      	ldr	r2, [r4, #4]
 800c622:	3301      	adds	r3, #1
 800c624:	3a01      	subs	r2, #1
 800c626:	6062      	str	r2, [r4, #4]
 800c628:	6023      	str	r3, [r4, #0]
 800c62a:	e7ec      	b.n	800c606 <__ssvfiscanf_r+0x3e>
 800c62c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c62e:	4621      	mov	r1, r4
 800c630:	4630      	mov	r0, r6
 800c632:	4798      	blx	r3
 800c634:	2800      	cmp	r0, #0
 800c636:	d0e9      	beq.n	800c60c <__ssvfiscanf_r+0x44>
 800c638:	e7ed      	b.n	800c616 <__ssvfiscanf_r+0x4e>
 800c63a:	2b25      	cmp	r3, #37	; 0x25
 800c63c:	d012      	beq.n	800c664 <__ssvfiscanf_r+0x9c>
 800c63e:	469a      	mov	sl, r3
 800c640:	6863      	ldr	r3, [r4, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	f340 8091 	ble.w	800c76a <__ssvfiscanf_r+0x1a2>
 800c648:	6822      	ldr	r2, [r4, #0]
 800c64a:	7813      	ldrb	r3, [r2, #0]
 800c64c:	4553      	cmp	r3, sl
 800c64e:	f040 812e 	bne.w	800c8ae <__ssvfiscanf_r+0x2e6>
 800c652:	6863      	ldr	r3, [r4, #4]
 800c654:	3b01      	subs	r3, #1
 800c656:	6063      	str	r3, [r4, #4]
 800c658:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c65a:	3201      	adds	r2, #1
 800c65c:	3301      	adds	r3, #1
 800c65e:	6022      	str	r2, [r4, #0]
 800c660:	9345      	str	r3, [sp, #276]	; 0x114
 800c662:	e7d8      	b.n	800c616 <__ssvfiscanf_r+0x4e>
 800c664:	9141      	str	r1, [sp, #260]	; 0x104
 800c666:	9143      	str	r1, [sp, #268]	; 0x10c
 800c668:	7853      	ldrb	r3, [r2, #1]
 800c66a:	2b2a      	cmp	r3, #42	; 0x2a
 800c66c:	bf02      	ittt	eq
 800c66e:	2310      	moveq	r3, #16
 800c670:	1c95      	addeq	r5, r2, #2
 800c672:	9341      	streq	r3, [sp, #260]	; 0x104
 800c674:	220a      	movs	r2, #10
 800c676:	46aa      	mov	sl, r5
 800c678:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c67c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c680:	2b09      	cmp	r3, #9
 800c682:	d91d      	bls.n	800c6c0 <__ssvfiscanf_r+0xf8>
 800c684:	487e      	ldr	r0, [pc, #504]	; (800c880 <__ssvfiscanf_r+0x2b8>)
 800c686:	2203      	movs	r2, #3
 800c688:	f7f3 fdba 	bl	8000200 <memchr>
 800c68c:	b140      	cbz	r0, 800c6a0 <__ssvfiscanf_r+0xd8>
 800c68e:	2301      	movs	r3, #1
 800c690:	eba0 0009 	sub.w	r0, r0, r9
 800c694:	fa03 f000 	lsl.w	r0, r3, r0
 800c698:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c69a:	4318      	orrs	r0, r3
 800c69c:	9041      	str	r0, [sp, #260]	; 0x104
 800c69e:	4655      	mov	r5, sl
 800c6a0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c6a4:	2b78      	cmp	r3, #120	; 0x78
 800c6a6:	d806      	bhi.n	800c6b6 <__ssvfiscanf_r+0xee>
 800c6a8:	2b57      	cmp	r3, #87	; 0x57
 800c6aa:	d810      	bhi.n	800c6ce <__ssvfiscanf_r+0x106>
 800c6ac:	2b25      	cmp	r3, #37	; 0x25
 800c6ae:	d0c6      	beq.n	800c63e <__ssvfiscanf_r+0x76>
 800c6b0:	d856      	bhi.n	800c760 <__ssvfiscanf_r+0x198>
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d064      	beq.n	800c780 <__ssvfiscanf_r+0x1b8>
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	9347      	str	r3, [sp, #284]	; 0x11c
 800c6ba:	230a      	movs	r3, #10
 800c6bc:	9342      	str	r3, [sp, #264]	; 0x108
 800c6be:	e071      	b.n	800c7a4 <__ssvfiscanf_r+0x1dc>
 800c6c0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c6c2:	fb02 1103 	mla	r1, r2, r3, r1
 800c6c6:	3930      	subs	r1, #48	; 0x30
 800c6c8:	9143      	str	r1, [sp, #268]	; 0x10c
 800c6ca:	4655      	mov	r5, sl
 800c6cc:	e7d3      	b.n	800c676 <__ssvfiscanf_r+0xae>
 800c6ce:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c6d2:	2a20      	cmp	r2, #32
 800c6d4:	d8ef      	bhi.n	800c6b6 <__ssvfiscanf_r+0xee>
 800c6d6:	a101      	add	r1, pc, #4	; (adr r1, 800c6dc <__ssvfiscanf_r+0x114>)
 800c6d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c6dc:	0800c78f 	.word	0x0800c78f
 800c6e0:	0800c6b7 	.word	0x0800c6b7
 800c6e4:	0800c6b7 	.word	0x0800c6b7
 800c6e8:	0800c7ed 	.word	0x0800c7ed
 800c6ec:	0800c6b7 	.word	0x0800c6b7
 800c6f0:	0800c6b7 	.word	0x0800c6b7
 800c6f4:	0800c6b7 	.word	0x0800c6b7
 800c6f8:	0800c6b7 	.word	0x0800c6b7
 800c6fc:	0800c6b7 	.word	0x0800c6b7
 800c700:	0800c6b7 	.word	0x0800c6b7
 800c704:	0800c6b7 	.word	0x0800c6b7
 800c708:	0800c803 	.word	0x0800c803
 800c70c:	0800c7d9 	.word	0x0800c7d9
 800c710:	0800c767 	.word	0x0800c767
 800c714:	0800c767 	.word	0x0800c767
 800c718:	0800c767 	.word	0x0800c767
 800c71c:	0800c6b7 	.word	0x0800c6b7
 800c720:	0800c7dd 	.word	0x0800c7dd
 800c724:	0800c6b7 	.word	0x0800c6b7
 800c728:	0800c6b7 	.word	0x0800c6b7
 800c72c:	0800c6b7 	.word	0x0800c6b7
 800c730:	0800c6b7 	.word	0x0800c6b7
 800c734:	0800c813 	.word	0x0800c813
 800c738:	0800c7e5 	.word	0x0800c7e5
 800c73c:	0800c787 	.word	0x0800c787
 800c740:	0800c6b7 	.word	0x0800c6b7
 800c744:	0800c6b7 	.word	0x0800c6b7
 800c748:	0800c80f 	.word	0x0800c80f
 800c74c:	0800c6b7 	.word	0x0800c6b7
 800c750:	0800c7d9 	.word	0x0800c7d9
 800c754:	0800c6b7 	.word	0x0800c6b7
 800c758:	0800c6b7 	.word	0x0800c6b7
 800c75c:	0800c78f 	.word	0x0800c78f
 800c760:	3b45      	subs	r3, #69	; 0x45
 800c762:	2b02      	cmp	r3, #2
 800c764:	d8a7      	bhi.n	800c6b6 <__ssvfiscanf_r+0xee>
 800c766:	2305      	movs	r3, #5
 800c768:	e01b      	b.n	800c7a2 <__ssvfiscanf_r+0x1da>
 800c76a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c76c:	4621      	mov	r1, r4
 800c76e:	4630      	mov	r0, r6
 800c770:	4798      	blx	r3
 800c772:	2800      	cmp	r0, #0
 800c774:	f43f af68 	beq.w	800c648 <__ssvfiscanf_r+0x80>
 800c778:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c77a:	2800      	cmp	r0, #0
 800c77c:	f040 808d 	bne.w	800c89a <__ssvfiscanf_r+0x2d2>
 800c780:	f04f 30ff 	mov.w	r0, #4294967295
 800c784:	e08f      	b.n	800c8a6 <__ssvfiscanf_r+0x2de>
 800c786:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c788:	f042 0220 	orr.w	r2, r2, #32
 800c78c:	9241      	str	r2, [sp, #260]	; 0x104
 800c78e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c794:	9241      	str	r2, [sp, #260]	; 0x104
 800c796:	2210      	movs	r2, #16
 800c798:	2b6f      	cmp	r3, #111	; 0x6f
 800c79a:	9242      	str	r2, [sp, #264]	; 0x108
 800c79c:	bf34      	ite	cc
 800c79e:	2303      	movcc	r3, #3
 800c7a0:	2304      	movcs	r3, #4
 800c7a2:	9347      	str	r3, [sp, #284]	; 0x11c
 800c7a4:	6863      	ldr	r3, [r4, #4]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	dd42      	ble.n	800c830 <__ssvfiscanf_r+0x268>
 800c7aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c7ac:	0659      	lsls	r1, r3, #25
 800c7ae:	d404      	bmi.n	800c7ba <__ssvfiscanf_r+0x1f2>
 800c7b0:	6823      	ldr	r3, [r4, #0]
 800c7b2:	781a      	ldrb	r2, [r3, #0]
 800c7b4:	5cba      	ldrb	r2, [r7, r2]
 800c7b6:	0712      	lsls	r2, r2, #28
 800c7b8:	d441      	bmi.n	800c83e <__ssvfiscanf_r+0x276>
 800c7ba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	dc50      	bgt.n	800c862 <__ssvfiscanf_r+0x29a>
 800c7c0:	466b      	mov	r3, sp
 800c7c2:	4622      	mov	r2, r4
 800c7c4:	a941      	add	r1, sp, #260	; 0x104
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f000 f876 	bl	800c8b8 <_scanf_chars>
 800c7cc:	2801      	cmp	r0, #1
 800c7ce:	d06e      	beq.n	800c8ae <__ssvfiscanf_r+0x2e6>
 800c7d0:	2802      	cmp	r0, #2
 800c7d2:	f47f af20 	bne.w	800c616 <__ssvfiscanf_r+0x4e>
 800c7d6:	e7cf      	b.n	800c778 <__ssvfiscanf_r+0x1b0>
 800c7d8:	220a      	movs	r2, #10
 800c7da:	e7dd      	b.n	800c798 <__ssvfiscanf_r+0x1d0>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	9342      	str	r3, [sp, #264]	; 0x108
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	e7de      	b.n	800c7a2 <__ssvfiscanf_r+0x1da>
 800c7e4:	2308      	movs	r3, #8
 800c7e6:	9342      	str	r3, [sp, #264]	; 0x108
 800c7e8:	2304      	movs	r3, #4
 800c7ea:	e7da      	b.n	800c7a2 <__ssvfiscanf_r+0x1da>
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	4640      	mov	r0, r8
 800c7f0:	f000 f9de 	bl	800cbb0 <__sccl>
 800c7f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7fa:	9341      	str	r3, [sp, #260]	; 0x104
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	2301      	movs	r3, #1
 800c800:	e7cf      	b.n	800c7a2 <__ssvfiscanf_r+0x1da>
 800c802:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c808:	9341      	str	r3, [sp, #260]	; 0x104
 800c80a:	2300      	movs	r3, #0
 800c80c:	e7c9      	b.n	800c7a2 <__ssvfiscanf_r+0x1da>
 800c80e:	2302      	movs	r3, #2
 800c810:	e7c7      	b.n	800c7a2 <__ssvfiscanf_r+0x1da>
 800c812:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c814:	06c3      	lsls	r3, r0, #27
 800c816:	f53f aefe 	bmi.w	800c616 <__ssvfiscanf_r+0x4e>
 800c81a:	9b00      	ldr	r3, [sp, #0]
 800c81c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c81e:	1d19      	adds	r1, r3, #4
 800c820:	9100      	str	r1, [sp, #0]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f010 0f01 	tst.w	r0, #1
 800c828:	bf14      	ite	ne
 800c82a:	801a      	strhne	r2, [r3, #0]
 800c82c:	601a      	streq	r2, [r3, #0]
 800c82e:	e6f2      	b.n	800c616 <__ssvfiscanf_r+0x4e>
 800c830:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c832:	4621      	mov	r1, r4
 800c834:	4630      	mov	r0, r6
 800c836:	4798      	blx	r3
 800c838:	2800      	cmp	r0, #0
 800c83a:	d0b6      	beq.n	800c7aa <__ssvfiscanf_r+0x1e2>
 800c83c:	e79c      	b.n	800c778 <__ssvfiscanf_r+0x1b0>
 800c83e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c840:	3201      	adds	r2, #1
 800c842:	9245      	str	r2, [sp, #276]	; 0x114
 800c844:	6862      	ldr	r2, [r4, #4]
 800c846:	3a01      	subs	r2, #1
 800c848:	2a00      	cmp	r2, #0
 800c84a:	6062      	str	r2, [r4, #4]
 800c84c:	dd02      	ble.n	800c854 <__ssvfiscanf_r+0x28c>
 800c84e:	3301      	adds	r3, #1
 800c850:	6023      	str	r3, [r4, #0]
 800c852:	e7ad      	b.n	800c7b0 <__ssvfiscanf_r+0x1e8>
 800c854:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c856:	4621      	mov	r1, r4
 800c858:	4630      	mov	r0, r6
 800c85a:	4798      	blx	r3
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d0a7      	beq.n	800c7b0 <__ssvfiscanf_r+0x1e8>
 800c860:	e78a      	b.n	800c778 <__ssvfiscanf_r+0x1b0>
 800c862:	2b04      	cmp	r3, #4
 800c864:	dc0e      	bgt.n	800c884 <__ssvfiscanf_r+0x2bc>
 800c866:	466b      	mov	r3, sp
 800c868:	4622      	mov	r2, r4
 800c86a:	a941      	add	r1, sp, #260	; 0x104
 800c86c:	4630      	mov	r0, r6
 800c86e:	f000 f87d 	bl	800c96c <_scanf_i>
 800c872:	e7ab      	b.n	800c7cc <__ssvfiscanf_r+0x204>
 800c874:	0800c515 	.word	0x0800c515
 800c878:	0800c58f 	.word	0x0800c58f
 800c87c:	0800efa1 	.word	0x0800efa1
 800c880:	0800f30a 	.word	0x0800f30a
 800c884:	4b0b      	ldr	r3, [pc, #44]	; (800c8b4 <__ssvfiscanf_r+0x2ec>)
 800c886:	2b00      	cmp	r3, #0
 800c888:	f43f aec5 	beq.w	800c616 <__ssvfiscanf_r+0x4e>
 800c88c:	466b      	mov	r3, sp
 800c88e:	4622      	mov	r2, r4
 800c890:	a941      	add	r1, sp, #260	; 0x104
 800c892:	4630      	mov	r0, r6
 800c894:	f7fc fb98 	bl	8008fc8 <_scanf_float>
 800c898:	e798      	b.n	800c7cc <__ssvfiscanf_r+0x204>
 800c89a:	89a3      	ldrh	r3, [r4, #12]
 800c89c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c8a0:	bf18      	it	ne
 800c8a2:	f04f 30ff 	movne.w	r0, #4294967295
 800c8a6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ae:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c8b0:	e7f9      	b.n	800c8a6 <__ssvfiscanf_r+0x2de>
 800c8b2:	bf00      	nop
 800c8b4:	08008fc9 	.word	0x08008fc9

0800c8b8 <_scanf_chars>:
 800c8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8bc:	4615      	mov	r5, r2
 800c8be:	688a      	ldr	r2, [r1, #8]
 800c8c0:	4680      	mov	r8, r0
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	b932      	cbnz	r2, 800c8d4 <_scanf_chars+0x1c>
 800c8c6:	698a      	ldr	r2, [r1, #24]
 800c8c8:	2a00      	cmp	r2, #0
 800c8ca:	bf0c      	ite	eq
 800c8cc:	2201      	moveq	r2, #1
 800c8ce:	f04f 32ff 	movne.w	r2, #4294967295
 800c8d2:	608a      	str	r2, [r1, #8]
 800c8d4:	6822      	ldr	r2, [r4, #0]
 800c8d6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c968 <_scanf_chars+0xb0>
 800c8da:	06d1      	lsls	r1, r2, #27
 800c8dc:	bf5f      	itttt	pl
 800c8de:	681a      	ldrpl	r2, [r3, #0]
 800c8e0:	1d11      	addpl	r1, r2, #4
 800c8e2:	6019      	strpl	r1, [r3, #0]
 800c8e4:	6816      	ldrpl	r6, [r2, #0]
 800c8e6:	2700      	movs	r7, #0
 800c8e8:	69a0      	ldr	r0, [r4, #24]
 800c8ea:	b188      	cbz	r0, 800c910 <_scanf_chars+0x58>
 800c8ec:	2801      	cmp	r0, #1
 800c8ee:	d107      	bne.n	800c900 <_scanf_chars+0x48>
 800c8f0:	682a      	ldr	r2, [r5, #0]
 800c8f2:	7811      	ldrb	r1, [r2, #0]
 800c8f4:	6962      	ldr	r2, [r4, #20]
 800c8f6:	5c52      	ldrb	r2, [r2, r1]
 800c8f8:	b952      	cbnz	r2, 800c910 <_scanf_chars+0x58>
 800c8fa:	2f00      	cmp	r7, #0
 800c8fc:	d031      	beq.n	800c962 <_scanf_chars+0xaa>
 800c8fe:	e022      	b.n	800c946 <_scanf_chars+0x8e>
 800c900:	2802      	cmp	r0, #2
 800c902:	d120      	bne.n	800c946 <_scanf_chars+0x8e>
 800c904:	682b      	ldr	r3, [r5, #0]
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c90c:	071b      	lsls	r3, r3, #28
 800c90e:	d41a      	bmi.n	800c946 <_scanf_chars+0x8e>
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	06da      	lsls	r2, r3, #27
 800c914:	bf5e      	ittt	pl
 800c916:	682b      	ldrpl	r3, [r5, #0]
 800c918:	781b      	ldrbpl	r3, [r3, #0]
 800c91a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c91e:	682a      	ldr	r2, [r5, #0]
 800c920:	686b      	ldr	r3, [r5, #4]
 800c922:	3201      	adds	r2, #1
 800c924:	602a      	str	r2, [r5, #0]
 800c926:	68a2      	ldr	r2, [r4, #8]
 800c928:	3b01      	subs	r3, #1
 800c92a:	3a01      	subs	r2, #1
 800c92c:	606b      	str	r3, [r5, #4]
 800c92e:	3701      	adds	r7, #1
 800c930:	60a2      	str	r2, [r4, #8]
 800c932:	b142      	cbz	r2, 800c946 <_scanf_chars+0x8e>
 800c934:	2b00      	cmp	r3, #0
 800c936:	dcd7      	bgt.n	800c8e8 <_scanf_chars+0x30>
 800c938:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c93c:	4629      	mov	r1, r5
 800c93e:	4640      	mov	r0, r8
 800c940:	4798      	blx	r3
 800c942:	2800      	cmp	r0, #0
 800c944:	d0d0      	beq.n	800c8e8 <_scanf_chars+0x30>
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	f013 0310 	ands.w	r3, r3, #16
 800c94c:	d105      	bne.n	800c95a <_scanf_chars+0xa2>
 800c94e:	68e2      	ldr	r2, [r4, #12]
 800c950:	3201      	adds	r2, #1
 800c952:	60e2      	str	r2, [r4, #12]
 800c954:	69a2      	ldr	r2, [r4, #24]
 800c956:	b102      	cbz	r2, 800c95a <_scanf_chars+0xa2>
 800c958:	7033      	strb	r3, [r6, #0]
 800c95a:	6923      	ldr	r3, [r4, #16]
 800c95c:	443b      	add	r3, r7
 800c95e:	6123      	str	r3, [r4, #16]
 800c960:	2000      	movs	r0, #0
 800c962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c966:	bf00      	nop
 800c968:	0800efa1 	.word	0x0800efa1

0800c96c <_scanf_i>:
 800c96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c970:	4698      	mov	r8, r3
 800c972:	4b76      	ldr	r3, [pc, #472]	; (800cb4c <_scanf_i+0x1e0>)
 800c974:	460c      	mov	r4, r1
 800c976:	4682      	mov	sl, r0
 800c978:	4616      	mov	r6, r2
 800c97a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c97e:	b087      	sub	sp, #28
 800c980:	ab03      	add	r3, sp, #12
 800c982:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c986:	4b72      	ldr	r3, [pc, #456]	; (800cb50 <_scanf_i+0x1e4>)
 800c988:	69a1      	ldr	r1, [r4, #24]
 800c98a:	4a72      	ldr	r2, [pc, #456]	; (800cb54 <_scanf_i+0x1e8>)
 800c98c:	2903      	cmp	r1, #3
 800c98e:	bf18      	it	ne
 800c990:	461a      	movne	r2, r3
 800c992:	68a3      	ldr	r3, [r4, #8]
 800c994:	9201      	str	r2, [sp, #4]
 800c996:	1e5a      	subs	r2, r3, #1
 800c998:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c99c:	bf88      	it	hi
 800c99e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c9a2:	4627      	mov	r7, r4
 800c9a4:	bf82      	ittt	hi
 800c9a6:	eb03 0905 	addhi.w	r9, r3, r5
 800c9aa:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c9ae:	60a3      	strhi	r3, [r4, #8]
 800c9b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c9b4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c9b8:	bf98      	it	ls
 800c9ba:	f04f 0900 	movls.w	r9, #0
 800c9be:	6023      	str	r3, [r4, #0]
 800c9c0:	463d      	mov	r5, r7
 800c9c2:	f04f 0b00 	mov.w	fp, #0
 800c9c6:	6831      	ldr	r1, [r6, #0]
 800c9c8:	ab03      	add	r3, sp, #12
 800c9ca:	7809      	ldrb	r1, [r1, #0]
 800c9cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c9d0:	2202      	movs	r2, #2
 800c9d2:	f7f3 fc15 	bl	8000200 <memchr>
 800c9d6:	b328      	cbz	r0, 800ca24 <_scanf_i+0xb8>
 800c9d8:	f1bb 0f01 	cmp.w	fp, #1
 800c9dc:	d159      	bne.n	800ca92 <_scanf_i+0x126>
 800c9de:	6862      	ldr	r2, [r4, #4]
 800c9e0:	b92a      	cbnz	r2, 800c9ee <_scanf_i+0x82>
 800c9e2:	6822      	ldr	r2, [r4, #0]
 800c9e4:	2308      	movs	r3, #8
 800c9e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9ea:	6063      	str	r3, [r4, #4]
 800c9ec:	6022      	str	r2, [r4, #0]
 800c9ee:	6822      	ldr	r2, [r4, #0]
 800c9f0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c9f4:	6022      	str	r2, [r4, #0]
 800c9f6:	68a2      	ldr	r2, [r4, #8]
 800c9f8:	1e51      	subs	r1, r2, #1
 800c9fa:	60a1      	str	r1, [r4, #8]
 800c9fc:	b192      	cbz	r2, 800ca24 <_scanf_i+0xb8>
 800c9fe:	6832      	ldr	r2, [r6, #0]
 800ca00:	1c51      	adds	r1, r2, #1
 800ca02:	6031      	str	r1, [r6, #0]
 800ca04:	7812      	ldrb	r2, [r2, #0]
 800ca06:	f805 2b01 	strb.w	r2, [r5], #1
 800ca0a:	6872      	ldr	r2, [r6, #4]
 800ca0c:	3a01      	subs	r2, #1
 800ca0e:	2a00      	cmp	r2, #0
 800ca10:	6072      	str	r2, [r6, #4]
 800ca12:	dc07      	bgt.n	800ca24 <_scanf_i+0xb8>
 800ca14:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ca18:	4631      	mov	r1, r6
 800ca1a:	4650      	mov	r0, sl
 800ca1c:	4790      	blx	r2
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	f040 8085 	bne.w	800cb2e <_scanf_i+0x1c2>
 800ca24:	f10b 0b01 	add.w	fp, fp, #1
 800ca28:	f1bb 0f03 	cmp.w	fp, #3
 800ca2c:	d1cb      	bne.n	800c9c6 <_scanf_i+0x5a>
 800ca2e:	6863      	ldr	r3, [r4, #4]
 800ca30:	b90b      	cbnz	r3, 800ca36 <_scanf_i+0xca>
 800ca32:	230a      	movs	r3, #10
 800ca34:	6063      	str	r3, [r4, #4]
 800ca36:	6863      	ldr	r3, [r4, #4]
 800ca38:	4947      	ldr	r1, [pc, #284]	; (800cb58 <_scanf_i+0x1ec>)
 800ca3a:	6960      	ldr	r0, [r4, #20]
 800ca3c:	1ac9      	subs	r1, r1, r3
 800ca3e:	f000 f8b7 	bl	800cbb0 <__sccl>
 800ca42:	f04f 0b00 	mov.w	fp, #0
 800ca46:	68a3      	ldr	r3, [r4, #8]
 800ca48:	6822      	ldr	r2, [r4, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d03d      	beq.n	800caca <_scanf_i+0x15e>
 800ca4e:	6831      	ldr	r1, [r6, #0]
 800ca50:	6960      	ldr	r0, [r4, #20]
 800ca52:	f891 c000 	ldrb.w	ip, [r1]
 800ca56:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	d035      	beq.n	800caca <_scanf_i+0x15e>
 800ca5e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ca62:	d124      	bne.n	800caae <_scanf_i+0x142>
 800ca64:	0510      	lsls	r0, r2, #20
 800ca66:	d522      	bpl.n	800caae <_scanf_i+0x142>
 800ca68:	f10b 0b01 	add.w	fp, fp, #1
 800ca6c:	f1b9 0f00 	cmp.w	r9, #0
 800ca70:	d003      	beq.n	800ca7a <_scanf_i+0x10e>
 800ca72:	3301      	adds	r3, #1
 800ca74:	f109 39ff 	add.w	r9, r9, #4294967295
 800ca78:	60a3      	str	r3, [r4, #8]
 800ca7a:	6873      	ldr	r3, [r6, #4]
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	6073      	str	r3, [r6, #4]
 800ca82:	dd1b      	ble.n	800cabc <_scanf_i+0x150>
 800ca84:	6833      	ldr	r3, [r6, #0]
 800ca86:	3301      	adds	r3, #1
 800ca88:	6033      	str	r3, [r6, #0]
 800ca8a:	68a3      	ldr	r3, [r4, #8]
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	60a3      	str	r3, [r4, #8]
 800ca90:	e7d9      	b.n	800ca46 <_scanf_i+0xda>
 800ca92:	f1bb 0f02 	cmp.w	fp, #2
 800ca96:	d1ae      	bne.n	800c9f6 <_scanf_i+0x8a>
 800ca98:	6822      	ldr	r2, [r4, #0]
 800ca9a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ca9e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800caa2:	d1bf      	bne.n	800ca24 <_scanf_i+0xb8>
 800caa4:	2310      	movs	r3, #16
 800caa6:	6063      	str	r3, [r4, #4]
 800caa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800caac:	e7a2      	b.n	800c9f4 <_scanf_i+0x88>
 800caae:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cab2:	6022      	str	r2, [r4, #0]
 800cab4:	780b      	ldrb	r3, [r1, #0]
 800cab6:	f805 3b01 	strb.w	r3, [r5], #1
 800caba:	e7de      	b.n	800ca7a <_scanf_i+0x10e>
 800cabc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cac0:	4631      	mov	r1, r6
 800cac2:	4650      	mov	r0, sl
 800cac4:	4798      	blx	r3
 800cac6:	2800      	cmp	r0, #0
 800cac8:	d0df      	beq.n	800ca8a <_scanf_i+0x11e>
 800caca:	6823      	ldr	r3, [r4, #0]
 800cacc:	05db      	lsls	r3, r3, #23
 800cace:	d50d      	bpl.n	800caec <_scanf_i+0x180>
 800cad0:	42bd      	cmp	r5, r7
 800cad2:	d909      	bls.n	800cae8 <_scanf_i+0x17c>
 800cad4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cadc:	4632      	mov	r2, r6
 800cade:	4650      	mov	r0, sl
 800cae0:	4798      	blx	r3
 800cae2:	f105 39ff 	add.w	r9, r5, #4294967295
 800cae6:	464d      	mov	r5, r9
 800cae8:	42bd      	cmp	r5, r7
 800caea:	d02d      	beq.n	800cb48 <_scanf_i+0x1dc>
 800caec:	6822      	ldr	r2, [r4, #0]
 800caee:	f012 0210 	ands.w	r2, r2, #16
 800caf2:	d113      	bne.n	800cb1c <_scanf_i+0x1b0>
 800caf4:	702a      	strb	r2, [r5, #0]
 800caf6:	6863      	ldr	r3, [r4, #4]
 800caf8:	9e01      	ldr	r6, [sp, #4]
 800cafa:	4639      	mov	r1, r7
 800cafc:	4650      	mov	r0, sl
 800cafe:	47b0      	blx	r6
 800cb00:	6821      	ldr	r1, [r4, #0]
 800cb02:	f8d8 3000 	ldr.w	r3, [r8]
 800cb06:	f011 0f20 	tst.w	r1, #32
 800cb0a:	d013      	beq.n	800cb34 <_scanf_i+0x1c8>
 800cb0c:	1d1a      	adds	r2, r3, #4
 800cb0e:	f8c8 2000 	str.w	r2, [r8]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	6018      	str	r0, [r3, #0]
 800cb16:	68e3      	ldr	r3, [r4, #12]
 800cb18:	3301      	adds	r3, #1
 800cb1a:	60e3      	str	r3, [r4, #12]
 800cb1c:	1bed      	subs	r5, r5, r7
 800cb1e:	44ab      	add	fp, r5
 800cb20:	6925      	ldr	r5, [r4, #16]
 800cb22:	445d      	add	r5, fp
 800cb24:	6125      	str	r5, [r4, #16]
 800cb26:	2000      	movs	r0, #0
 800cb28:	b007      	add	sp, #28
 800cb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2e:	f04f 0b00 	mov.w	fp, #0
 800cb32:	e7ca      	b.n	800caca <_scanf_i+0x15e>
 800cb34:	1d1a      	adds	r2, r3, #4
 800cb36:	f8c8 2000 	str.w	r2, [r8]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f011 0f01 	tst.w	r1, #1
 800cb40:	bf14      	ite	ne
 800cb42:	8018      	strhne	r0, [r3, #0]
 800cb44:	6018      	streq	r0, [r3, #0]
 800cb46:	e7e6      	b.n	800cb16 <_scanf_i+0x1aa>
 800cb48:	2001      	movs	r0, #1
 800cb4a:	e7ed      	b.n	800cb28 <_scanf_i+0x1bc>
 800cb4c:	0800eef0 	.word	0x0800eef0
 800cb50:	0800cd2d 	.word	0x0800cd2d
 800cb54:	0800a26d 	.word	0x0800a26d
 800cb58:	0800f32e 	.word	0x0800f32e

0800cb5c <_read_r>:
 800cb5c:	b538      	push	{r3, r4, r5, lr}
 800cb5e:	4d07      	ldr	r5, [pc, #28]	; (800cb7c <_read_r+0x20>)
 800cb60:	4604      	mov	r4, r0
 800cb62:	4608      	mov	r0, r1
 800cb64:	4611      	mov	r1, r2
 800cb66:	2200      	movs	r2, #0
 800cb68:	602a      	str	r2, [r5, #0]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	f7f6 f9b4 	bl	8002ed8 <_read>
 800cb70:	1c43      	adds	r3, r0, #1
 800cb72:	d102      	bne.n	800cb7a <_read_r+0x1e>
 800cb74:	682b      	ldr	r3, [r5, #0]
 800cb76:	b103      	cbz	r3, 800cb7a <_read_r+0x1e>
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	bd38      	pop	{r3, r4, r5, pc}
 800cb7c:	20008984 	.word	0x20008984

0800cb80 <nan>:
 800cb80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb88 <nan+0x8>
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	00000000 	.word	0x00000000
 800cb8c:	7ff80000 	.word	0x7ff80000

0800cb90 <_sbrk_r>:
 800cb90:	b538      	push	{r3, r4, r5, lr}
 800cb92:	4d06      	ldr	r5, [pc, #24]	; (800cbac <_sbrk_r+0x1c>)
 800cb94:	2300      	movs	r3, #0
 800cb96:	4604      	mov	r4, r0
 800cb98:	4608      	mov	r0, r1
 800cb9a:	602b      	str	r3, [r5, #0]
 800cb9c:	f7f6 fa0a 	bl	8002fb4 <_sbrk>
 800cba0:	1c43      	adds	r3, r0, #1
 800cba2:	d102      	bne.n	800cbaa <_sbrk_r+0x1a>
 800cba4:	682b      	ldr	r3, [r5, #0]
 800cba6:	b103      	cbz	r3, 800cbaa <_sbrk_r+0x1a>
 800cba8:	6023      	str	r3, [r4, #0]
 800cbaa:	bd38      	pop	{r3, r4, r5, pc}
 800cbac:	20008984 	.word	0x20008984

0800cbb0 <__sccl>:
 800cbb0:	b570      	push	{r4, r5, r6, lr}
 800cbb2:	780b      	ldrb	r3, [r1, #0]
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	2b5e      	cmp	r3, #94	; 0x5e
 800cbb8:	bf0b      	itete	eq
 800cbba:	784b      	ldrbeq	r3, [r1, #1]
 800cbbc:	1c48      	addne	r0, r1, #1
 800cbbe:	1c88      	addeq	r0, r1, #2
 800cbc0:	2200      	movne	r2, #0
 800cbc2:	bf08      	it	eq
 800cbc4:	2201      	moveq	r2, #1
 800cbc6:	1e61      	subs	r1, r4, #1
 800cbc8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cbcc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cbd0:	42a9      	cmp	r1, r5
 800cbd2:	d1fb      	bne.n	800cbcc <__sccl+0x1c>
 800cbd4:	b90b      	cbnz	r3, 800cbda <__sccl+0x2a>
 800cbd6:	3801      	subs	r0, #1
 800cbd8:	bd70      	pop	{r4, r5, r6, pc}
 800cbda:	f082 0201 	eor.w	r2, r2, #1
 800cbde:	54e2      	strb	r2, [r4, r3]
 800cbe0:	4605      	mov	r5, r0
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cbe8:	292d      	cmp	r1, #45	; 0x2d
 800cbea:	d006      	beq.n	800cbfa <__sccl+0x4a>
 800cbec:	295d      	cmp	r1, #93	; 0x5d
 800cbee:	d0f3      	beq.n	800cbd8 <__sccl+0x28>
 800cbf0:	b909      	cbnz	r1, 800cbf6 <__sccl+0x46>
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	e7f0      	b.n	800cbd8 <__sccl+0x28>
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	e7f1      	b.n	800cbde <__sccl+0x2e>
 800cbfa:	786e      	ldrb	r6, [r5, #1]
 800cbfc:	2e5d      	cmp	r6, #93	; 0x5d
 800cbfe:	d0fa      	beq.n	800cbf6 <__sccl+0x46>
 800cc00:	42b3      	cmp	r3, r6
 800cc02:	dcf8      	bgt.n	800cbf6 <__sccl+0x46>
 800cc04:	3502      	adds	r5, #2
 800cc06:	4619      	mov	r1, r3
 800cc08:	3101      	adds	r1, #1
 800cc0a:	428e      	cmp	r6, r1
 800cc0c:	5462      	strb	r2, [r4, r1]
 800cc0e:	dcfb      	bgt.n	800cc08 <__sccl+0x58>
 800cc10:	1af1      	subs	r1, r6, r3
 800cc12:	3901      	subs	r1, #1
 800cc14:	1c58      	adds	r0, r3, #1
 800cc16:	42b3      	cmp	r3, r6
 800cc18:	bfa8      	it	ge
 800cc1a:	2100      	movge	r1, #0
 800cc1c:	1843      	adds	r3, r0, r1
 800cc1e:	e7e0      	b.n	800cbe2 <__sccl+0x32>

0800cc20 <strncmp>:
 800cc20:	b510      	push	{r4, lr}
 800cc22:	b17a      	cbz	r2, 800cc44 <strncmp+0x24>
 800cc24:	4603      	mov	r3, r0
 800cc26:	3901      	subs	r1, #1
 800cc28:	1884      	adds	r4, r0, r2
 800cc2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cc32:	4290      	cmp	r0, r2
 800cc34:	d101      	bne.n	800cc3a <strncmp+0x1a>
 800cc36:	42a3      	cmp	r3, r4
 800cc38:	d101      	bne.n	800cc3e <strncmp+0x1e>
 800cc3a:	1a80      	subs	r0, r0, r2
 800cc3c:	bd10      	pop	{r4, pc}
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d1f3      	bne.n	800cc2a <strncmp+0xa>
 800cc42:	e7fa      	b.n	800cc3a <strncmp+0x1a>
 800cc44:	4610      	mov	r0, r2
 800cc46:	e7f9      	b.n	800cc3c <strncmp+0x1c>

0800cc48 <_strtoul_l.constprop.0>:
 800cc48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc4c:	4f36      	ldr	r7, [pc, #216]	; (800cd28 <_strtoul_l.constprop.0+0xe0>)
 800cc4e:	4686      	mov	lr, r0
 800cc50:	460d      	mov	r5, r1
 800cc52:	4628      	mov	r0, r5
 800cc54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc58:	5de6      	ldrb	r6, [r4, r7]
 800cc5a:	f016 0608 	ands.w	r6, r6, #8
 800cc5e:	d1f8      	bne.n	800cc52 <_strtoul_l.constprop.0+0xa>
 800cc60:	2c2d      	cmp	r4, #45	; 0x2d
 800cc62:	d12f      	bne.n	800ccc4 <_strtoul_l.constprop.0+0x7c>
 800cc64:	782c      	ldrb	r4, [r5, #0]
 800cc66:	2601      	movs	r6, #1
 800cc68:	1c85      	adds	r5, r0, #2
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d057      	beq.n	800cd1e <_strtoul_l.constprop.0+0xd6>
 800cc6e:	2b10      	cmp	r3, #16
 800cc70:	d109      	bne.n	800cc86 <_strtoul_l.constprop.0+0x3e>
 800cc72:	2c30      	cmp	r4, #48	; 0x30
 800cc74:	d107      	bne.n	800cc86 <_strtoul_l.constprop.0+0x3e>
 800cc76:	7828      	ldrb	r0, [r5, #0]
 800cc78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cc7c:	2858      	cmp	r0, #88	; 0x58
 800cc7e:	d149      	bne.n	800cd14 <_strtoul_l.constprop.0+0xcc>
 800cc80:	786c      	ldrb	r4, [r5, #1]
 800cc82:	2310      	movs	r3, #16
 800cc84:	3502      	adds	r5, #2
 800cc86:	f04f 38ff 	mov.w	r8, #4294967295
 800cc8a:	2700      	movs	r7, #0
 800cc8c:	fbb8 f8f3 	udiv	r8, r8, r3
 800cc90:	fb03 f908 	mul.w	r9, r3, r8
 800cc94:	ea6f 0909 	mvn.w	r9, r9
 800cc98:	4638      	mov	r0, r7
 800cc9a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cc9e:	f1bc 0f09 	cmp.w	ip, #9
 800cca2:	d814      	bhi.n	800ccce <_strtoul_l.constprop.0+0x86>
 800cca4:	4664      	mov	r4, ip
 800cca6:	42a3      	cmp	r3, r4
 800cca8:	dd22      	ble.n	800ccf0 <_strtoul_l.constprop.0+0xa8>
 800ccaa:	2f00      	cmp	r7, #0
 800ccac:	db1d      	blt.n	800ccea <_strtoul_l.constprop.0+0xa2>
 800ccae:	4580      	cmp	r8, r0
 800ccb0:	d31b      	bcc.n	800ccea <_strtoul_l.constprop.0+0xa2>
 800ccb2:	d101      	bne.n	800ccb8 <_strtoul_l.constprop.0+0x70>
 800ccb4:	45a1      	cmp	r9, r4
 800ccb6:	db18      	blt.n	800ccea <_strtoul_l.constprop.0+0xa2>
 800ccb8:	fb00 4003 	mla	r0, r0, r3, r4
 800ccbc:	2701      	movs	r7, #1
 800ccbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccc2:	e7ea      	b.n	800cc9a <_strtoul_l.constprop.0+0x52>
 800ccc4:	2c2b      	cmp	r4, #43	; 0x2b
 800ccc6:	bf04      	itt	eq
 800ccc8:	782c      	ldrbeq	r4, [r5, #0]
 800ccca:	1c85      	addeq	r5, r0, #2
 800cccc:	e7cd      	b.n	800cc6a <_strtoul_l.constprop.0+0x22>
 800ccce:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ccd2:	f1bc 0f19 	cmp.w	ip, #25
 800ccd6:	d801      	bhi.n	800ccdc <_strtoul_l.constprop.0+0x94>
 800ccd8:	3c37      	subs	r4, #55	; 0x37
 800ccda:	e7e4      	b.n	800cca6 <_strtoul_l.constprop.0+0x5e>
 800ccdc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cce0:	f1bc 0f19 	cmp.w	ip, #25
 800cce4:	d804      	bhi.n	800ccf0 <_strtoul_l.constprop.0+0xa8>
 800cce6:	3c57      	subs	r4, #87	; 0x57
 800cce8:	e7dd      	b.n	800cca6 <_strtoul_l.constprop.0+0x5e>
 800ccea:	f04f 37ff 	mov.w	r7, #4294967295
 800ccee:	e7e6      	b.n	800ccbe <_strtoul_l.constprop.0+0x76>
 800ccf0:	2f00      	cmp	r7, #0
 800ccf2:	da07      	bge.n	800cd04 <_strtoul_l.constprop.0+0xbc>
 800ccf4:	2322      	movs	r3, #34	; 0x22
 800ccf6:	f8ce 3000 	str.w	r3, [lr]
 800ccfa:	f04f 30ff 	mov.w	r0, #4294967295
 800ccfe:	b932      	cbnz	r2, 800cd0e <_strtoul_l.constprop.0+0xc6>
 800cd00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd04:	b106      	cbz	r6, 800cd08 <_strtoul_l.constprop.0+0xc0>
 800cd06:	4240      	negs	r0, r0
 800cd08:	2a00      	cmp	r2, #0
 800cd0a:	d0f9      	beq.n	800cd00 <_strtoul_l.constprop.0+0xb8>
 800cd0c:	b107      	cbz	r7, 800cd10 <_strtoul_l.constprop.0+0xc8>
 800cd0e:	1e69      	subs	r1, r5, #1
 800cd10:	6011      	str	r1, [r2, #0]
 800cd12:	e7f5      	b.n	800cd00 <_strtoul_l.constprop.0+0xb8>
 800cd14:	2430      	movs	r4, #48	; 0x30
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1b5      	bne.n	800cc86 <_strtoul_l.constprop.0+0x3e>
 800cd1a:	2308      	movs	r3, #8
 800cd1c:	e7b3      	b.n	800cc86 <_strtoul_l.constprop.0+0x3e>
 800cd1e:	2c30      	cmp	r4, #48	; 0x30
 800cd20:	d0a9      	beq.n	800cc76 <_strtoul_l.constprop.0+0x2e>
 800cd22:	230a      	movs	r3, #10
 800cd24:	e7af      	b.n	800cc86 <_strtoul_l.constprop.0+0x3e>
 800cd26:	bf00      	nop
 800cd28:	0800efa1 	.word	0x0800efa1

0800cd2c <_strtoul_r>:
 800cd2c:	f7ff bf8c 	b.w	800cc48 <_strtoul_l.constprop.0>

0800cd30 <__submore>:
 800cd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd34:	460c      	mov	r4, r1
 800cd36:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cd38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd3c:	4299      	cmp	r1, r3
 800cd3e:	d11d      	bne.n	800cd7c <__submore+0x4c>
 800cd40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cd44:	f7ff fa16 	bl	800c174 <_malloc_r>
 800cd48:	b918      	cbnz	r0, 800cd52 <__submore+0x22>
 800cd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd56:	63a3      	str	r3, [r4, #56]	; 0x38
 800cd58:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cd5c:	6360      	str	r0, [r4, #52]	; 0x34
 800cd5e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cd62:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cd66:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cd6a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cd6e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cd72:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cd76:	6020      	str	r0, [r4, #0]
 800cd78:	2000      	movs	r0, #0
 800cd7a:	e7e8      	b.n	800cd4e <__submore+0x1e>
 800cd7c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cd7e:	0077      	lsls	r7, r6, #1
 800cd80:	463a      	mov	r2, r7
 800cd82:	f000 fa2d 	bl	800d1e0 <_realloc_r>
 800cd86:	4605      	mov	r5, r0
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d0de      	beq.n	800cd4a <__submore+0x1a>
 800cd8c:	eb00 0806 	add.w	r8, r0, r6
 800cd90:	4601      	mov	r1, r0
 800cd92:	4632      	mov	r2, r6
 800cd94:	4640      	mov	r0, r8
 800cd96:	f7fb fc97 	bl	80086c8 <memcpy>
 800cd9a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cd9e:	f8c4 8000 	str.w	r8, [r4]
 800cda2:	e7e9      	b.n	800cd78 <__submore+0x48>

0800cda4 <__ascii_wctomb>:
 800cda4:	b149      	cbz	r1, 800cdba <__ascii_wctomb+0x16>
 800cda6:	2aff      	cmp	r2, #255	; 0xff
 800cda8:	bf85      	ittet	hi
 800cdaa:	238a      	movhi	r3, #138	; 0x8a
 800cdac:	6003      	strhi	r3, [r0, #0]
 800cdae:	700a      	strbls	r2, [r1, #0]
 800cdb0:	f04f 30ff 	movhi.w	r0, #4294967295
 800cdb4:	bf98      	it	ls
 800cdb6:	2001      	movls	r0, #1
 800cdb8:	4770      	bx	lr
 800cdba:	4608      	mov	r0, r1
 800cdbc:	4770      	bx	lr
	...

0800cdc0 <__assert_func>:
 800cdc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdc2:	4614      	mov	r4, r2
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	4b09      	ldr	r3, [pc, #36]	; (800cdec <__assert_func+0x2c>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4605      	mov	r5, r0
 800cdcc:	68d8      	ldr	r0, [r3, #12]
 800cdce:	b14c      	cbz	r4, 800cde4 <__assert_func+0x24>
 800cdd0:	4b07      	ldr	r3, [pc, #28]	; (800cdf0 <__assert_func+0x30>)
 800cdd2:	9100      	str	r1, [sp, #0]
 800cdd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cdd8:	4906      	ldr	r1, [pc, #24]	; (800cdf4 <__assert_func+0x34>)
 800cdda:	462b      	mov	r3, r5
 800cddc:	f000 f9a6 	bl	800d12c <fiprintf>
 800cde0:	f000 fc46 	bl	800d670 <abort>
 800cde4:	4b04      	ldr	r3, [pc, #16]	; (800cdf8 <__assert_func+0x38>)
 800cde6:	461c      	mov	r4, r3
 800cde8:	e7f3      	b.n	800cdd2 <__assert_func+0x12>
 800cdea:	bf00      	nop
 800cdec:	20000014 	.word	0x20000014
 800cdf0:	0800f330 	.word	0x0800f330
 800cdf4:	0800f33d 	.word	0x0800f33d
 800cdf8:	0800f36b 	.word	0x0800f36b

0800cdfc <__sflush_r>:
 800cdfc:	898a      	ldrh	r2, [r1, #12]
 800cdfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce02:	4605      	mov	r5, r0
 800ce04:	0710      	lsls	r0, r2, #28
 800ce06:	460c      	mov	r4, r1
 800ce08:	d458      	bmi.n	800cebc <__sflush_r+0xc0>
 800ce0a:	684b      	ldr	r3, [r1, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	dc05      	bgt.n	800ce1c <__sflush_r+0x20>
 800ce10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	dc02      	bgt.n	800ce1c <__sflush_r+0x20>
 800ce16:	2000      	movs	r0, #0
 800ce18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce1e:	2e00      	cmp	r6, #0
 800ce20:	d0f9      	beq.n	800ce16 <__sflush_r+0x1a>
 800ce22:	2300      	movs	r3, #0
 800ce24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce28:	682f      	ldr	r7, [r5, #0]
 800ce2a:	602b      	str	r3, [r5, #0]
 800ce2c:	d032      	beq.n	800ce94 <__sflush_r+0x98>
 800ce2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	075a      	lsls	r2, r3, #29
 800ce34:	d505      	bpl.n	800ce42 <__sflush_r+0x46>
 800ce36:	6863      	ldr	r3, [r4, #4]
 800ce38:	1ac0      	subs	r0, r0, r3
 800ce3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce3c:	b10b      	cbz	r3, 800ce42 <__sflush_r+0x46>
 800ce3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce40:	1ac0      	subs	r0, r0, r3
 800ce42:	2300      	movs	r3, #0
 800ce44:	4602      	mov	r2, r0
 800ce46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce48:	6a21      	ldr	r1, [r4, #32]
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	47b0      	blx	r6
 800ce4e:	1c43      	adds	r3, r0, #1
 800ce50:	89a3      	ldrh	r3, [r4, #12]
 800ce52:	d106      	bne.n	800ce62 <__sflush_r+0x66>
 800ce54:	6829      	ldr	r1, [r5, #0]
 800ce56:	291d      	cmp	r1, #29
 800ce58:	d82c      	bhi.n	800ceb4 <__sflush_r+0xb8>
 800ce5a:	4a2a      	ldr	r2, [pc, #168]	; (800cf04 <__sflush_r+0x108>)
 800ce5c:	40ca      	lsrs	r2, r1
 800ce5e:	07d6      	lsls	r6, r2, #31
 800ce60:	d528      	bpl.n	800ceb4 <__sflush_r+0xb8>
 800ce62:	2200      	movs	r2, #0
 800ce64:	6062      	str	r2, [r4, #4]
 800ce66:	04d9      	lsls	r1, r3, #19
 800ce68:	6922      	ldr	r2, [r4, #16]
 800ce6a:	6022      	str	r2, [r4, #0]
 800ce6c:	d504      	bpl.n	800ce78 <__sflush_r+0x7c>
 800ce6e:	1c42      	adds	r2, r0, #1
 800ce70:	d101      	bne.n	800ce76 <__sflush_r+0x7a>
 800ce72:	682b      	ldr	r3, [r5, #0]
 800ce74:	b903      	cbnz	r3, 800ce78 <__sflush_r+0x7c>
 800ce76:	6560      	str	r0, [r4, #84]	; 0x54
 800ce78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce7a:	602f      	str	r7, [r5, #0]
 800ce7c:	2900      	cmp	r1, #0
 800ce7e:	d0ca      	beq.n	800ce16 <__sflush_r+0x1a>
 800ce80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce84:	4299      	cmp	r1, r3
 800ce86:	d002      	beq.n	800ce8e <__sflush_r+0x92>
 800ce88:	4628      	mov	r0, r5
 800ce8a:	f7ff f907 	bl	800c09c <_free_r>
 800ce8e:	2000      	movs	r0, #0
 800ce90:	6360      	str	r0, [r4, #52]	; 0x34
 800ce92:	e7c1      	b.n	800ce18 <__sflush_r+0x1c>
 800ce94:	6a21      	ldr	r1, [r4, #32]
 800ce96:	2301      	movs	r3, #1
 800ce98:	4628      	mov	r0, r5
 800ce9a:	47b0      	blx	r6
 800ce9c:	1c41      	adds	r1, r0, #1
 800ce9e:	d1c7      	bne.n	800ce30 <__sflush_r+0x34>
 800cea0:	682b      	ldr	r3, [r5, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d0c4      	beq.n	800ce30 <__sflush_r+0x34>
 800cea6:	2b1d      	cmp	r3, #29
 800cea8:	d001      	beq.n	800ceae <__sflush_r+0xb2>
 800ceaa:	2b16      	cmp	r3, #22
 800ceac:	d101      	bne.n	800ceb2 <__sflush_r+0xb6>
 800ceae:	602f      	str	r7, [r5, #0]
 800ceb0:	e7b1      	b.n	800ce16 <__sflush_r+0x1a>
 800ceb2:	89a3      	ldrh	r3, [r4, #12]
 800ceb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceb8:	81a3      	strh	r3, [r4, #12]
 800ceba:	e7ad      	b.n	800ce18 <__sflush_r+0x1c>
 800cebc:	690f      	ldr	r7, [r1, #16]
 800cebe:	2f00      	cmp	r7, #0
 800cec0:	d0a9      	beq.n	800ce16 <__sflush_r+0x1a>
 800cec2:	0793      	lsls	r3, r2, #30
 800cec4:	680e      	ldr	r6, [r1, #0]
 800cec6:	bf08      	it	eq
 800cec8:	694b      	ldreq	r3, [r1, #20]
 800ceca:	600f      	str	r7, [r1, #0]
 800cecc:	bf18      	it	ne
 800cece:	2300      	movne	r3, #0
 800ced0:	eba6 0807 	sub.w	r8, r6, r7
 800ced4:	608b      	str	r3, [r1, #8]
 800ced6:	f1b8 0f00 	cmp.w	r8, #0
 800ceda:	dd9c      	ble.n	800ce16 <__sflush_r+0x1a>
 800cedc:	6a21      	ldr	r1, [r4, #32]
 800cede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cee0:	4643      	mov	r3, r8
 800cee2:	463a      	mov	r2, r7
 800cee4:	4628      	mov	r0, r5
 800cee6:	47b0      	blx	r6
 800cee8:	2800      	cmp	r0, #0
 800ceea:	dc06      	bgt.n	800cefa <__sflush_r+0xfe>
 800ceec:	89a3      	ldrh	r3, [r4, #12]
 800ceee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cef2:	81a3      	strh	r3, [r4, #12]
 800cef4:	f04f 30ff 	mov.w	r0, #4294967295
 800cef8:	e78e      	b.n	800ce18 <__sflush_r+0x1c>
 800cefa:	4407      	add	r7, r0
 800cefc:	eba8 0800 	sub.w	r8, r8, r0
 800cf00:	e7e9      	b.n	800ced6 <__sflush_r+0xda>
 800cf02:	bf00      	nop
 800cf04:	20400001 	.word	0x20400001

0800cf08 <_fflush_r>:
 800cf08:	b538      	push	{r3, r4, r5, lr}
 800cf0a:	690b      	ldr	r3, [r1, #16]
 800cf0c:	4605      	mov	r5, r0
 800cf0e:	460c      	mov	r4, r1
 800cf10:	b913      	cbnz	r3, 800cf18 <_fflush_r+0x10>
 800cf12:	2500      	movs	r5, #0
 800cf14:	4628      	mov	r0, r5
 800cf16:	bd38      	pop	{r3, r4, r5, pc}
 800cf18:	b118      	cbz	r0, 800cf22 <_fflush_r+0x1a>
 800cf1a:	6983      	ldr	r3, [r0, #24]
 800cf1c:	b90b      	cbnz	r3, 800cf22 <_fflush_r+0x1a>
 800cf1e:	f000 f887 	bl	800d030 <__sinit>
 800cf22:	4b14      	ldr	r3, [pc, #80]	; (800cf74 <_fflush_r+0x6c>)
 800cf24:	429c      	cmp	r4, r3
 800cf26:	d11b      	bne.n	800cf60 <_fflush_r+0x58>
 800cf28:	686c      	ldr	r4, [r5, #4]
 800cf2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d0ef      	beq.n	800cf12 <_fflush_r+0xa>
 800cf32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf34:	07d0      	lsls	r0, r2, #31
 800cf36:	d404      	bmi.n	800cf42 <_fflush_r+0x3a>
 800cf38:	0599      	lsls	r1, r3, #22
 800cf3a:	d402      	bmi.n	800cf42 <_fflush_r+0x3a>
 800cf3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf3e:	f000 f927 	bl	800d190 <__retarget_lock_acquire_recursive>
 800cf42:	4628      	mov	r0, r5
 800cf44:	4621      	mov	r1, r4
 800cf46:	f7ff ff59 	bl	800cdfc <__sflush_r>
 800cf4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf4c:	07da      	lsls	r2, r3, #31
 800cf4e:	4605      	mov	r5, r0
 800cf50:	d4e0      	bmi.n	800cf14 <_fflush_r+0xc>
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	059b      	lsls	r3, r3, #22
 800cf56:	d4dd      	bmi.n	800cf14 <_fflush_r+0xc>
 800cf58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf5a:	f000 f91a 	bl	800d192 <__retarget_lock_release_recursive>
 800cf5e:	e7d9      	b.n	800cf14 <_fflush_r+0xc>
 800cf60:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <_fflush_r+0x70>)
 800cf62:	429c      	cmp	r4, r3
 800cf64:	d101      	bne.n	800cf6a <_fflush_r+0x62>
 800cf66:	68ac      	ldr	r4, [r5, #8]
 800cf68:	e7df      	b.n	800cf2a <_fflush_r+0x22>
 800cf6a:	4b04      	ldr	r3, [pc, #16]	; (800cf7c <_fflush_r+0x74>)
 800cf6c:	429c      	cmp	r4, r3
 800cf6e:	bf08      	it	eq
 800cf70:	68ec      	ldreq	r4, [r5, #12]
 800cf72:	e7da      	b.n	800cf2a <_fflush_r+0x22>
 800cf74:	0800f38c 	.word	0x0800f38c
 800cf78:	0800f3ac 	.word	0x0800f3ac
 800cf7c:	0800f36c 	.word	0x0800f36c

0800cf80 <std>:
 800cf80:	2300      	movs	r3, #0
 800cf82:	b510      	push	{r4, lr}
 800cf84:	4604      	mov	r4, r0
 800cf86:	e9c0 3300 	strd	r3, r3, [r0]
 800cf8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf8e:	6083      	str	r3, [r0, #8]
 800cf90:	8181      	strh	r1, [r0, #12]
 800cf92:	6643      	str	r3, [r0, #100]	; 0x64
 800cf94:	81c2      	strh	r2, [r0, #14]
 800cf96:	6183      	str	r3, [r0, #24]
 800cf98:	4619      	mov	r1, r3
 800cf9a:	2208      	movs	r2, #8
 800cf9c:	305c      	adds	r0, #92	; 0x5c
 800cf9e:	f7fb fba1 	bl	80086e4 <memset>
 800cfa2:	4b05      	ldr	r3, [pc, #20]	; (800cfb8 <std+0x38>)
 800cfa4:	6263      	str	r3, [r4, #36]	; 0x24
 800cfa6:	4b05      	ldr	r3, [pc, #20]	; (800cfbc <std+0x3c>)
 800cfa8:	62a3      	str	r3, [r4, #40]	; 0x28
 800cfaa:	4b05      	ldr	r3, [pc, #20]	; (800cfc0 <std+0x40>)
 800cfac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cfae:	4b05      	ldr	r3, [pc, #20]	; (800cfc4 <std+0x44>)
 800cfb0:	6224      	str	r4, [r4, #32]
 800cfb2:	6323      	str	r3, [r4, #48]	; 0x30
 800cfb4:	bd10      	pop	{r4, pc}
 800cfb6:	bf00      	nop
 800cfb8:	0800948d 	.word	0x0800948d
 800cfbc:	080094b3 	.word	0x080094b3
 800cfc0:	080094eb 	.word	0x080094eb
 800cfc4:	0800950f 	.word	0x0800950f

0800cfc8 <_cleanup_r>:
 800cfc8:	4901      	ldr	r1, [pc, #4]	; (800cfd0 <_cleanup_r+0x8>)
 800cfca:	f000 b8c1 	b.w	800d150 <_fwalk_reent>
 800cfce:	bf00      	nop
 800cfd0:	0800cf09 	.word	0x0800cf09

0800cfd4 <__sfmoreglue>:
 800cfd4:	b570      	push	{r4, r5, r6, lr}
 800cfd6:	2268      	movs	r2, #104	; 0x68
 800cfd8:	1e4d      	subs	r5, r1, #1
 800cfda:	4355      	muls	r5, r2
 800cfdc:	460e      	mov	r6, r1
 800cfde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cfe2:	f7ff f8c7 	bl	800c174 <_malloc_r>
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	b140      	cbz	r0, 800cffc <__sfmoreglue+0x28>
 800cfea:	2100      	movs	r1, #0
 800cfec:	e9c0 1600 	strd	r1, r6, [r0]
 800cff0:	300c      	adds	r0, #12
 800cff2:	60a0      	str	r0, [r4, #8]
 800cff4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cff8:	f7fb fb74 	bl	80086e4 <memset>
 800cffc:	4620      	mov	r0, r4
 800cffe:	bd70      	pop	{r4, r5, r6, pc}

0800d000 <__sfp_lock_acquire>:
 800d000:	4801      	ldr	r0, [pc, #4]	; (800d008 <__sfp_lock_acquire+0x8>)
 800d002:	f000 b8c5 	b.w	800d190 <__retarget_lock_acquire_recursive>
 800d006:	bf00      	nop
 800d008:	20008989 	.word	0x20008989

0800d00c <__sfp_lock_release>:
 800d00c:	4801      	ldr	r0, [pc, #4]	; (800d014 <__sfp_lock_release+0x8>)
 800d00e:	f000 b8c0 	b.w	800d192 <__retarget_lock_release_recursive>
 800d012:	bf00      	nop
 800d014:	20008989 	.word	0x20008989

0800d018 <__sinit_lock_acquire>:
 800d018:	4801      	ldr	r0, [pc, #4]	; (800d020 <__sinit_lock_acquire+0x8>)
 800d01a:	f000 b8b9 	b.w	800d190 <__retarget_lock_acquire_recursive>
 800d01e:	bf00      	nop
 800d020:	2000898a 	.word	0x2000898a

0800d024 <__sinit_lock_release>:
 800d024:	4801      	ldr	r0, [pc, #4]	; (800d02c <__sinit_lock_release+0x8>)
 800d026:	f000 b8b4 	b.w	800d192 <__retarget_lock_release_recursive>
 800d02a:	bf00      	nop
 800d02c:	2000898a 	.word	0x2000898a

0800d030 <__sinit>:
 800d030:	b510      	push	{r4, lr}
 800d032:	4604      	mov	r4, r0
 800d034:	f7ff fff0 	bl	800d018 <__sinit_lock_acquire>
 800d038:	69a3      	ldr	r3, [r4, #24]
 800d03a:	b11b      	cbz	r3, 800d044 <__sinit+0x14>
 800d03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d040:	f7ff bff0 	b.w	800d024 <__sinit_lock_release>
 800d044:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d048:	6523      	str	r3, [r4, #80]	; 0x50
 800d04a:	4b13      	ldr	r3, [pc, #76]	; (800d098 <__sinit+0x68>)
 800d04c:	4a13      	ldr	r2, [pc, #76]	; (800d09c <__sinit+0x6c>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	62a2      	str	r2, [r4, #40]	; 0x28
 800d052:	42a3      	cmp	r3, r4
 800d054:	bf04      	itt	eq
 800d056:	2301      	moveq	r3, #1
 800d058:	61a3      	streq	r3, [r4, #24]
 800d05a:	4620      	mov	r0, r4
 800d05c:	f000 f820 	bl	800d0a0 <__sfp>
 800d060:	6060      	str	r0, [r4, #4]
 800d062:	4620      	mov	r0, r4
 800d064:	f000 f81c 	bl	800d0a0 <__sfp>
 800d068:	60a0      	str	r0, [r4, #8]
 800d06a:	4620      	mov	r0, r4
 800d06c:	f000 f818 	bl	800d0a0 <__sfp>
 800d070:	2200      	movs	r2, #0
 800d072:	60e0      	str	r0, [r4, #12]
 800d074:	2104      	movs	r1, #4
 800d076:	6860      	ldr	r0, [r4, #4]
 800d078:	f7ff ff82 	bl	800cf80 <std>
 800d07c:	68a0      	ldr	r0, [r4, #8]
 800d07e:	2201      	movs	r2, #1
 800d080:	2109      	movs	r1, #9
 800d082:	f7ff ff7d 	bl	800cf80 <std>
 800d086:	68e0      	ldr	r0, [r4, #12]
 800d088:	2202      	movs	r2, #2
 800d08a:	2112      	movs	r1, #18
 800d08c:	f7ff ff78 	bl	800cf80 <std>
 800d090:	2301      	movs	r3, #1
 800d092:	61a3      	str	r3, [r4, #24]
 800d094:	e7d2      	b.n	800d03c <__sinit+0xc>
 800d096:	bf00      	nop
 800d098:	0800ef14 	.word	0x0800ef14
 800d09c:	0800cfc9 	.word	0x0800cfc9

0800d0a0 <__sfp>:
 800d0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a2:	4607      	mov	r7, r0
 800d0a4:	f7ff ffac 	bl	800d000 <__sfp_lock_acquire>
 800d0a8:	4b1e      	ldr	r3, [pc, #120]	; (800d124 <__sfp+0x84>)
 800d0aa:	681e      	ldr	r6, [r3, #0]
 800d0ac:	69b3      	ldr	r3, [r6, #24]
 800d0ae:	b913      	cbnz	r3, 800d0b6 <__sfp+0x16>
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	f7ff ffbd 	bl	800d030 <__sinit>
 800d0b6:	3648      	adds	r6, #72	; 0x48
 800d0b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	d503      	bpl.n	800d0c8 <__sfp+0x28>
 800d0c0:	6833      	ldr	r3, [r6, #0]
 800d0c2:	b30b      	cbz	r3, 800d108 <__sfp+0x68>
 800d0c4:	6836      	ldr	r6, [r6, #0]
 800d0c6:	e7f7      	b.n	800d0b8 <__sfp+0x18>
 800d0c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d0cc:	b9d5      	cbnz	r5, 800d104 <__sfp+0x64>
 800d0ce:	4b16      	ldr	r3, [pc, #88]	; (800d128 <__sfp+0x88>)
 800d0d0:	60e3      	str	r3, [r4, #12]
 800d0d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0d6:	6665      	str	r5, [r4, #100]	; 0x64
 800d0d8:	f000 f859 	bl	800d18e <__retarget_lock_init_recursive>
 800d0dc:	f7ff ff96 	bl	800d00c <__sfp_lock_release>
 800d0e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d0e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d0e8:	6025      	str	r5, [r4, #0]
 800d0ea:	61a5      	str	r5, [r4, #24]
 800d0ec:	2208      	movs	r2, #8
 800d0ee:	4629      	mov	r1, r5
 800d0f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0f4:	f7fb faf6 	bl	80086e4 <memset>
 800d0f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d0fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d100:	4620      	mov	r0, r4
 800d102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d104:	3468      	adds	r4, #104	; 0x68
 800d106:	e7d9      	b.n	800d0bc <__sfp+0x1c>
 800d108:	2104      	movs	r1, #4
 800d10a:	4638      	mov	r0, r7
 800d10c:	f7ff ff62 	bl	800cfd4 <__sfmoreglue>
 800d110:	4604      	mov	r4, r0
 800d112:	6030      	str	r0, [r6, #0]
 800d114:	2800      	cmp	r0, #0
 800d116:	d1d5      	bne.n	800d0c4 <__sfp+0x24>
 800d118:	f7ff ff78 	bl	800d00c <__sfp_lock_release>
 800d11c:	230c      	movs	r3, #12
 800d11e:	603b      	str	r3, [r7, #0]
 800d120:	e7ee      	b.n	800d100 <__sfp+0x60>
 800d122:	bf00      	nop
 800d124:	0800ef14 	.word	0x0800ef14
 800d128:	ffff0001 	.word	0xffff0001

0800d12c <fiprintf>:
 800d12c:	b40e      	push	{r1, r2, r3}
 800d12e:	b503      	push	{r0, r1, lr}
 800d130:	4601      	mov	r1, r0
 800d132:	ab03      	add	r3, sp, #12
 800d134:	4805      	ldr	r0, [pc, #20]	; (800d14c <fiprintf+0x20>)
 800d136:	f853 2b04 	ldr.w	r2, [r3], #4
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	f000 f8a7 	bl	800d290 <_vfiprintf_r>
 800d142:	b002      	add	sp, #8
 800d144:	f85d eb04 	ldr.w	lr, [sp], #4
 800d148:	b003      	add	sp, #12
 800d14a:	4770      	bx	lr
 800d14c:	20000014 	.word	0x20000014

0800d150 <_fwalk_reent>:
 800d150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d154:	4606      	mov	r6, r0
 800d156:	4688      	mov	r8, r1
 800d158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d15c:	2700      	movs	r7, #0
 800d15e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d162:	f1b9 0901 	subs.w	r9, r9, #1
 800d166:	d505      	bpl.n	800d174 <_fwalk_reent+0x24>
 800d168:	6824      	ldr	r4, [r4, #0]
 800d16a:	2c00      	cmp	r4, #0
 800d16c:	d1f7      	bne.n	800d15e <_fwalk_reent+0xe>
 800d16e:	4638      	mov	r0, r7
 800d170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d174:	89ab      	ldrh	r3, [r5, #12]
 800d176:	2b01      	cmp	r3, #1
 800d178:	d907      	bls.n	800d18a <_fwalk_reent+0x3a>
 800d17a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d17e:	3301      	adds	r3, #1
 800d180:	d003      	beq.n	800d18a <_fwalk_reent+0x3a>
 800d182:	4629      	mov	r1, r5
 800d184:	4630      	mov	r0, r6
 800d186:	47c0      	blx	r8
 800d188:	4307      	orrs	r7, r0
 800d18a:	3568      	adds	r5, #104	; 0x68
 800d18c:	e7e9      	b.n	800d162 <_fwalk_reent+0x12>

0800d18e <__retarget_lock_init_recursive>:
 800d18e:	4770      	bx	lr

0800d190 <__retarget_lock_acquire_recursive>:
 800d190:	4770      	bx	lr

0800d192 <__retarget_lock_release_recursive>:
 800d192:	4770      	bx	lr

0800d194 <memmove>:
 800d194:	4288      	cmp	r0, r1
 800d196:	b510      	push	{r4, lr}
 800d198:	eb01 0402 	add.w	r4, r1, r2
 800d19c:	d902      	bls.n	800d1a4 <memmove+0x10>
 800d19e:	4284      	cmp	r4, r0
 800d1a0:	4623      	mov	r3, r4
 800d1a2:	d807      	bhi.n	800d1b4 <memmove+0x20>
 800d1a4:	1e43      	subs	r3, r0, #1
 800d1a6:	42a1      	cmp	r1, r4
 800d1a8:	d008      	beq.n	800d1bc <memmove+0x28>
 800d1aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1b2:	e7f8      	b.n	800d1a6 <memmove+0x12>
 800d1b4:	4402      	add	r2, r0
 800d1b6:	4601      	mov	r1, r0
 800d1b8:	428a      	cmp	r2, r1
 800d1ba:	d100      	bne.n	800d1be <memmove+0x2a>
 800d1bc:	bd10      	pop	{r4, pc}
 800d1be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1c6:	e7f7      	b.n	800d1b8 <memmove+0x24>

0800d1c8 <__malloc_lock>:
 800d1c8:	4801      	ldr	r0, [pc, #4]	; (800d1d0 <__malloc_lock+0x8>)
 800d1ca:	f7ff bfe1 	b.w	800d190 <__retarget_lock_acquire_recursive>
 800d1ce:	bf00      	nop
 800d1d0:	20008988 	.word	0x20008988

0800d1d4 <__malloc_unlock>:
 800d1d4:	4801      	ldr	r0, [pc, #4]	; (800d1dc <__malloc_unlock+0x8>)
 800d1d6:	f7ff bfdc 	b.w	800d192 <__retarget_lock_release_recursive>
 800d1da:	bf00      	nop
 800d1dc:	20008988 	.word	0x20008988

0800d1e0 <_realloc_r>:
 800d1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e4:	4680      	mov	r8, r0
 800d1e6:	4614      	mov	r4, r2
 800d1e8:	460e      	mov	r6, r1
 800d1ea:	b921      	cbnz	r1, 800d1f6 <_realloc_r+0x16>
 800d1ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	f7fe bfbf 	b.w	800c174 <_malloc_r>
 800d1f6:	b92a      	cbnz	r2, 800d204 <_realloc_r+0x24>
 800d1f8:	f7fe ff50 	bl	800c09c <_free_r>
 800d1fc:	4625      	mov	r5, r4
 800d1fe:	4628      	mov	r0, r5
 800d200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d204:	f000 faa0 	bl	800d748 <_malloc_usable_size_r>
 800d208:	4284      	cmp	r4, r0
 800d20a:	4607      	mov	r7, r0
 800d20c:	d802      	bhi.n	800d214 <_realloc_r+0x34>
 800d20e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d212:	d812      	bhi.n	800d23a <_realloc_r+0x5a>
 800d214:	4621      	mov	r1, r4
 800d216:	4640      	mov	r0, r8
 800d218:	f7fe ffac 	bl	800c174 <_malloc_r>
 800d21c:	4605      	mov	r5, r0
 800d21e:	2800      	cmp	r0, #0
 800d220:	d0ed      	beq.n	800d1fe <_realloc_r+0x1e>
 800d222:	42bc      	cmp	r4, r7
 800d224:	4622      	mov	r2, r4
 800d226:	4631      	mov	r1, r6
 800d228:	bf28      	it	cs
 800d22a:	463a      	movcs	r2, r7
 800d22c:	f7fb fa4c 	bl	80086c8 <memcpy>
 800d230:	4631      	mov	r1, r6
 800d232:	4640      	mov	r0, r8
 800d234:	f7fe ff32 	bl	800c09c <_free_r>
 800d238:	e7e1      	b.n	800d1fe <_realloc_r+0x1e>
 800d23a:	4635      	mov	r5, r6
 800d23c:	e7df      	b.n	800d1fe <_realloc_r+0x1e>

0800d23e <__sfputc_r>:
 800d23e:	6893      	ldr	r3, [r2, #8]
 800d240:	3b01      	subs	r3, #1
 800d242:	2b00      	cmp	r3, #0
 800d244:	b410      	push	{r4}
 800d246:	6093      	str	r3, [r2, #8]
 800d248:	da08      	bge.n	800d25c <__sfputc_r+0x1e>
 800d24a:	6994      	ldr	r4, [r2, #24]
 800d24c:	42a3      	cmp	r3, r4
 800d24e:	db01      	blt.n	800d254 <__sfputc_r+0x16>
 800d250:	290a      	cmp	r1, #10
 800d252:	d103      	bne.n	800d25c <__sfputc_r+0x1e>
 800d254:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d258:	f000 b94a 	b.w	800d4f0 <__swbuf_r>
 800d25c:	6813      	ldr	r3, [r2, #0]
 800d25e:	1c58      	adds	r0, r3, #1
 800d260:	6010      	str	r0, [r2, #0]
 800d262:	7019      	strb	r1, [r3, #0]
 800d264:	4608      	mov	r0, r1
 800d266:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <__sfputs_r>:
 800d26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26e:	4606      	mov	r6, r0
 800d270:	460f      	mov	r7, r1
 800d272:	4614      	mov	r4, r2
 800d274:	18d5      	adds	r5, r2, r3
 800d276:	42ac      	cmp	r4, r5
 800d278:	d101      	bne.n	800d27e <__sfputs_r+0x12>
 800d27a:	2000      	movs	r0, #0
 800d27c:	e007      	b.n	800d28e <__sfputs_r+0x22>
 800d27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d282:	463a      	mov	r2, r7
 800d284:	4630      	mov	r0, r6
 800d286:	f7ff ffda 	bl	800d23e <__sfputc_r>
 800d28a:	1c43      	adds	r3, r0, #1
 800d28c:	d1f3      	bne.n	800d276 <__sfputs_r+0xa>
 800d28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d290 <_vfiprintf_r>:
 800d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d294:	460d      	mov	r5, r1
 800d296:	b09d      	sub	sp, #116	; 0x74
 800d298:	4614      	mov	r4, r2
 800d29a:	4698      	mov	r8, r3
 800d29c:	4606      	mov	r6, r0
 800d29e:	b118      	cbz	r0, 800d2a8 <_vfiprintf_r+0x18>
 800d2a0:	6983      	ldr	r3, [r0, #24]
 800d2a2:	b90b      	cbnz	r3, 800d2a8 <_vfiprintf_r+0x18>
 800d2a4:	f7ff fec4 	bl	800d030 <__sinit>
 800d2a8:	4b89      	ldr	r3, [pc, #548]	; (800d4d0 <_vfiprintf_r+0x240>)
 800d2aa:	429d      	cmp	r5, r3
 800d2ac:	d11b      	bne.n	800d2e6 <_vfiprintf_r+0x56>
 800d2ae:	6875      	ldr	r5, [r6, #4]
 800d2b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2b2:	07d9      	lsls	r1, r3, #31
 800d2b4:	d405      	bmi.n	800d2c2 <_vfiprintf_r+0x32>
 800d2b6:	89ab      	ldrh	r3, [r5, #12]
 800d2b8:	059a      	lsls	r2, r3, #22
 800d2ba:	d402      	bmi.n	800d2c2 <_vfiprintf_r+0x32>
 800d2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2be:	f7ff ff67 	bl	800d190 <__retarget_lock_acquire_recursive>
 800d2c2:	89ab      	ldrh	r3, [r5, #12]
 800d2c4:	071b      	lsls	r3, r3, #28
 800d2c6:	d501      	bpl.n	800d2cc <_vfiprintf_r+0x3c>
 800d2c8:	692b      	ldr	r3, [r5, #16]
 800d2ca:	b9eb      	cbnz	r3, 800d308 <_vfiprintf_r+0x78>
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	f000 f960 	bl	800d594 <__swsetup_r>
 800d2d4:	b1c0      	cbz	r0, 800d308 <_vfiprintf_r+0x78>
 800d2d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2d8:	07dc      	lsls	r4, r3, #31
 800d2da:	d50e      	bpl.n	800d2fa <_vfiprintf_r+0x6a>
 800d2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e0:	b01d      	add	sp, #116	; 0x74
 800d2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e6:	4b7b      	ldr	r3, [pc, #492]	; (800d4d4 <_vfiprintf_r+0x244>)
 800d2e8:	429d      	cmp	r5, r3
 800d2ea:	d101      	bne.n	800d2f0 <_vfiprintf_r+0x60>
 800d2ec:	68b5      	ldr	r5, [r6, #8]
 800d2ee:	e7df      	b.n	800d2b0 <_vfiprintf_r+0x20>
 800d2f0:	4b79      	ldr	r3, [pc, #484]	; (800d4d8 <_vfiprintf_r+0x248>)
 800d2f2:	429d      	cmp	r5, r3
 800d2f4:	bf08      	it	eq
 800d2f6:	68f5      	ldreq	r5, [r6, #12]
 800d2f8:	e7da      	b.n	800d2b0 <_vfiprintf_r+0x20>
 800d2fa:	89ab      	ldrh	r3, [r5, #12]
 800d2fc:	0598      	lsls	r0, r3, #22
 800d2fe:	d4ed      	bmi.n	800d2dc <_vfiprintf_r+0x4c>
 800d300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d302:	f7ff ff46 	bl	800d192 <__retarget_lock_release_recursive>
 800d306:	e7e9      	b.n	800d2dc <_vfiprintf_r+0x4c>
 800d308:	2300      	movs	r3, #0
 800d30a:	9309      	str	r3, [sp, #36]	; 0x24
 800d30c:	2320      	movs	r3, #32
 800d30e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d312:	f8cd 800c 	str.w	r8, [sp, #12]
 800d316:	2330      	movs	r3, #48	; 0x30
 800d318:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d4dc <_vfiprintf_r+0x24c>
 800d31c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d320:	f04f 0901 	mov.w	r9, #1
 800d324:	4623      	mov	r3, r4
 800d326:	469a      	mov	sl, r3
 800d328:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d32c:	b10a      	cbz	r2, 800d332 <_vfiprintf_r+0xa2>
 800d32e:	2a25      	cmp	r2, #37	; 0x25
 800d330:	d1f9      	bne.n	800d326 <_vfiprintf_r+0x96>
 800d332:	ebba 0b04 	subs.w	fp, sl, r4
 800d336:	d00b      	beq.n	800d350 <_vfiprintf_r+0xc0>
 800d338:	465b      	mov	r3, fp
 800d33a:	4622      	mov	r2, r4
 800d33c:	4629      	mov	r1, r5
 800d33e:	4630      	mov	r0, r6
 800d340:	f7ff ff94 	bl	800d26c <__sfputs_r>
 800d344:	3001      	adds	r0, #1
 800d346:	f000 80aa 	beq.w	800d49e <_vfiprintf_r+0x20e>
 800d34a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d34c:	445a      	add	r2, fp
 800d34e:	9209      	str	r2, [sp, #36]	; 0x24
 800d350:	f89a 3000 	ldrb.w	r3, [sl]
 800d354:	2b00      	cmp	r3, #0
 800d356:	f000 80a2 	beq.w	800d49e <_vfiprintf_r+0x20e>
 800d35a:	2300      	movs	r3, #0
 800d35c:	f04f 32ff 	mov.w	r2, #4294967295
 800d360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d364:	f10a 0a01 	add.w	sl, sl, #1
 800d368:	9304      	str	r3, [sp, #16]
 800d36a:	9307      	str	r3, [sp, #28]
 800d36c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d370:	931a      	str	r3, [sp, #104]	; 0x68
 800d372:	4654      	mov	r4, sl
 800d374:	2205      	movs	r2, #5
 800d376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d37a:	4858      	ldr	r0, [pc, #352]	; (800d4dc <_vfiprintf_r+0x24c>)
 800d37c:	f7f2 ff40 	bl	8000200 <memchr>
 800d380:	9a04      	ldr	r2, [sp, #16]
 800d382:	b9d8      	cbnz	r0, 800d3bc <_vfiprintf_r+0x12c>
 800d384:	06d1      	lsls	r1, r2, #27
 800d386:	bf44      	itt	mi
 800d388:	2320      	movmi	r3, #32
 800d38a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d38e:	0713      	lsls	r3, r2, #28
 800d390:	bf44      	itt	mi
 800d392:	232b      	movmi	r3, #43	; 0x2b
 800d394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d398:	f89a 3000 	ldrb.w	r3, [sl]
 800d39c:	2b2a      	cmp	r3, #42	; 0x2a
 800d39e:	d015      	beq.n	800d3cc <_vfiprintf_r+0x13c>
 800d3a0:	9a07      	ldr	r2, [sp, #28]
 800d3a2:	4654      	mov	r4, sl
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	f04f 0c0a 	mov.w	ip, #10
 800d3aa:	4621      	mov	r1, r4
 800d3ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3b0:	3b30      	subs	r3, #48	; 0x30
 800d3b2:	2b09      	cmp	r3, #9
 800d3b4:	d94e      	bls.n	800d454 <_vfiprintf_r+0x1c4>
 800d3b6:	b1b0      	cbz	r0, 800d3e6 <_vfiprintf_r+0x156>
 800d3b8:	9207      	str	r2, [sp, #28]
 800d3ba:	e014      	b.n	800d3e6 <_vfiprintf_r+0x156>
 800d3bc:	eba0 0308 	sub.w	r3, r0, r8
 800d3c0:	fa09 f303 	lsl.w	r3, r9, r3
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	9304      	str	r3, [sp, #16]
 800d3c8:	46a2      	mov	sl, r4
 800d3ca:	e7d2      	b.n	800d372 <_vfiprintf_r+0xe2>
 800d3cc:	9b03      	ldr	r3, [sp, #12]
 800d3ce:	1d19      	adds	r1, r3, #4
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	9103      	str	r1, [sp, #12]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	bfbb      	ittet	lt
 800d3d8:	425b      	neglt	r3, r3
 800d3da:	f042 0202 	orrlt.w	r2, r2, #2
 800d3de:	9307      	strge	r3, [sp, #28]
 800d3e0:	9307      	strlt	r3, [sp, #28]
 800d3e2:	bfb8      	it	lt
 800d3e4:	9204      	strlt	r2, [sp, #16]
 800d3e6:	7823      	ldrb	r3, [r4, #0]
 800d3e8:	2b2e      	cmp	r3, #46	; 0x2e
 800d3ea:	d10c      	bne.n	800d406 <_vfiprintf_r+0x176>
 800d3ec:	7863      	ldrb	r3, [r4, #1]
 800d3ee:	2b2a      	cmp	r3, #42	; 0x2a
 800d3f0:	d135      	bne.n	800d45e <_vfiprintf_r+0x1ce>
 800d3f2:	9b03      	ldr	r3, [sp, #12]
 800d3f4:	1d1a      	adds	r2, r3, #4
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	9203      	str	r2, [sp, #12]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	bfb8      	it	lt
 800d3fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800d402:	3402      	adds	r4, #2
 800d404:	9305      	str	r3, [sp, #20]
 800d406:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4ec <_vfiprintf_r+0x25c>
 800d40a:	7821      	ldrb	r1, [r4, #0]
 800d40c:	2203      	movs	r2, #3
 800d40e:	4650      	mov	r0, sl
 800d410:	f7f2 fef6 	bl	8000200 <memchr>
 800d414:	b140      	cbz	r0, 800d428 <_vfiprintf_r+0x198>
 800d416:	2340      	movs	r3, #64	; 0x40
 800d418:	eba0 000a 	sub.w	r0, r0, sl
 800d41c:	fa03 f000 	lsl.w	r0, r3, r0
 800d420:	9b04      	ldr	r3, [sp, #16]
 800d422:	4303      	orrs	r3, r0
 800d424:	3401      	adds	r4, #1
 800d426:	9304      	str	r3, [sp, #16]
 800d428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d42c:	482c      	ldr	r0, [pc, #176]	; (800d4e0 <_vfiprintf_r+0x250>)
 800d42e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d432:	2206      	movs	r2, #6
 800d434:	f7f2 fee4 	bl	8000200 <memchr>
 800d438:	2800      	cmp	r0, #0
 800d43a:	d03f      	beq.n	800d4bc <_vfiprintf_r+0x22c>
 800d43c:	4b29      	ldr	r3, [pc, #164]	; (800d4e4 <_vfiprintf_r+0x254>)
 800d43e:	bb1b      	cbnz	r3, 800d488 <_vfiprintf_r+0x1f8>
 800d440:	9b03      	ldr	r3, [sp, #12]
 800d442:	3307      	adds	r3, #7
 800d444:	f023 0307 	bic.w	r3, r3, #7
 800d448:	3308      	adds	r3, #8
 800d44a:	9303      	str	r3, [sp, #12]
 800d44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d44e:	443b      	add	r3, r7
 800d450:	9309      	str	r3, [sp, #36]	; 0x24
 800d452:	e767      	b.n	800d324 <_vfiprintf_r+0x94>
 800d454:	fb0c 3202 	mla	r2, ip, r2, r3
 800d458:	460c      	mov	r4, r1
 800d45a:	2001      	movs	r0, #1
 800d45c:	e7a5      	b.n	800d3aa <_vfiprintf_r+0x11a>
 800d45e:	2300      	movs	r3, #0
 800d460:	3401      	adds	r4, #1
 800d462:	9305      	str	r3, [sp, #20]
 800d464:	4619      	mov	r1, r3
 800d466:	f04f 0c0a 	mov.w	ip, #10
 800d46a:	4620      	mov	r0, r4
 800d46c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d470:	3a30      	subs	r2, #48	; 0x30
 800d472:	2a09      	cmp	r2, #9
 800d474:	d903      	bls.n	800d47e <_vfiprintf_r+0x1ee>
 800d476:	2b00      	cmp	r3, #0
 800d478:	d0c5      	beq.n	800d406 <_vfiprintf_r+0x176>
 800d47a:	9105      	str	r1, [sp, #20]
 800d47c:	e7c3      	b.n	800d406 <_vfiprintf_r+0x176>
 800d47e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d482:	4604      	mov	r4, r0
 800d484:	2301      	movs	r3, #1
 800d486:	e7f0      	b.n	800d46a <_vfiprintf_r+0x1da>
 800d488:	ab03      	add	r3, sp, #12
 800d48a:	9300      	str	r3, [sp, #0]
 800d48c:	462a      	mov	r2, r5
 800d48e:	4b16      	ldr	r3, [pc, #88]	; (800d4e8 <_vfiprintf_r+0x258>)
 800d490:	a904      	add	r1, sp, #16
 800d492:	4630      	mov	r0, r6
 800d494:	f7fb f9ce 	bl	8008834 <_printf_float>
 800d498:	4607      	mov	r7, r0
 800d49a:	1c78      	adds	r0, r7, #1
 800d49c:	d1d6      	bne.n	800d44c <_vfiprintf_r+0x1bc>
 800d49e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4a0:	07d9      	lsls	r1, r3, #31
 800d4a2:	d405      	bmi.n	800d4b0 <_vfiprintf_r+0x220>
 800d4a4:	89ab      	ldrh	r3, [r5, #12]
 800d4a6:	059a      	lsls	r2, r3, #22
 800d4a8:	d402      	bmi.n	800d4b0 <_vfiprintf_r+0x220>
 800d4aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4ac:	f7ff fe71 	bl	800d192 <__retarget_lock_release_recursive>
 800d4b0:	89ab      	ldrh	r3, [r5, #12]
 800d4b2:	065b      	lsls	r3, r3, #25
 800d4b4:	f53f af12 	bmi.w	800d2dc <_vfiprintf_r+0x4c>
 800d4b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4ba:	e711      	b.n	800d2e0 <_vfiprintf_r+0x50>
 800d4bc:	ab03      	add	r3, sp, #12
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	462a      	mov	r2, r5
 800d4c2:	4b09      	ldr	r3, [pc, #36]	; (800d4e8 <_vfiprintf_r+0x258>)
 800d4c4:	a904      	add	r1, sp, #16
 800d4c6:	4630      	mov	r0, r6
 800d4c8:	f7fb fc58 	bl	8008d7c <_printf_i>
 800d4cc:	e7e4      	b.n	800d498 <_vfiprintf_r+0x208>
 800d4ce:	bf00      	nop
 800d4d0:	0800f38c 	.word	0x0800f38c
 800d4d4:	0800f3ac 	.word	0x0800f3ac
 800d4d8:	0800f36c 	.word	0x0800f36c
 800d4dc:	0800f304 	.word	0x0800f304
 800d4e0:	0800f30e 	.word	0x0800f30e
 800d4e4:	08008835 	.word	0x08008835
 800d4e8:	0800d26d 	.word	0x0800d26d
 800d4ec:	0800f30a 	.word	0x0800f30a

0800d4f0 <__swbuf_r>:
 800d4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f2:	460e      	mov	r6, r1
 800d4f4:	4614      	mov	r4, r2
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	b118      	cbz	r0, 800d502 <__swbuf_r+0x12>
 800d4fa:	6983      	ldr	r3, [r0, #24]
 800d4fc:	b90b      	cbnz	r3, 800d502 <__swbuf_r+0x12>
 800d4fe:	f7ff fd97 	bl	800d030 <__sinit>
 800d502:	4b21      	ldr	r3, [pc, #132]	; (800d588 <__swbuf_r+0x98>)
 800d504:	429c      	cmp	r4, r3
 800d506:	d12b      	bne.n	800d560 <__swbuf_r+0x70>
 800d508:	686c      	ldr	r4, [r5, #4]
 800d50a:	69a3      	ldr	r3, [r4, #24]
 800d50c:	60a3      	str	r3, [r4, #8]
 800d50e:	89a3      	ldrh	r3, [r4, #12]
 800d510:	071a      	lsls	r2, r3, #28
 800d512:	d52f      	bpl.n	800d574 <__swbuf_r+0x84>
 800d514:	6923      	ldr	r3, [r4, #16]
 800d516:	b36b      	cbz	r3, 800d574 <__swbuf_r+0x84>
 800d518:	6923      	ldr	r3, [r4, #16]
 800d51a:	6820      	ldr	r0, [r4, #0]
 800d51c:	1ac0      	subs	r0, r0, r3
 800d51e:	6963      	ldr	r3, [r4, #20]
 800d520:	b2f6      	uxtb	r6, r6
 800d522:	4283      	cmp	r3, r0
 800d524:	4637      	mov	r7, r6
 800d526:	dc04      	bgt.n	800d532 <__swbuf_r+0x42>
 800d528:	4621      	mov	r1, r4
 800d52a:	4628      	mov	r0, r5
 800d52c:	f7ff fcec 	bl	800cf08 <_fflush_r>
 800d530:	bb30      	cbnz	r0, 800d580 <__swbuf_r+0x90>
 800d532:	68a3      	ldr	r3, [r4, #8]
 800d534:	3b01      	subs	r3, #1
 800d536:	60a3      	str	r3, [r4, #8]
 800d538:	6823      	ldr	r3, [r4, #0]
 800d53a:	1c5a      	adds	r2, r3, #1
 800d53c:	6022      	str	r2, [r4, #0]
 800d53e:	701e      	strb	r6, [r3, #0]
 800d540:	6963      	ldr	r3, [r4, #20]
 800d542:	3001      	adds	r0, #1
 800d544:	4283      	cmp	r3, r0
 800d546:	d004      	beq.n	800d552 <__swbuf_r+0x62>
 800d548:	89a3      	ldrh	r3, [r4, #12]
 800d54a:	07db      	lsls	r3, r3, #31
 800d54c:	d506      	bpl.n	800d55c <__swbuf_r+0x6c>
 800d54e:	2e0a      	cmp	r6, #10
 800d550:	d104      	bne.n	800d55c <__swbuf_r+0x6c>
 800d552:	4621      	mov	r1, r4
 800d554:	4628      	mov	r0, r5
 800d556:	f7ff fcd7 	bl	800cf08 <_fflush_r>
 800d55a:	b988      	cbnz	r0, 800d580 <__swbuf_r+0x90>
 800d55c:	4638      	mov	r0, r7
 800d55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d560:	4b0a      	ldr	r3, [pc, #40]	; (800d58c <__swbuf_r+0x9c>)
 800d562:	429c      	cmp	r4, r3
 800d564:	d101      	bne.n	800d56a <__swbuf_r+0x7a>
 800d566:	68ac      	ldr	r4, [r5, #8]
 800d568:	e7cf      	b.n	800d50a <__swbuf_r+0x1a>
 800d56a:	4b09      	ldr	r3, [pc, #36]	; (800d590 <__swbuf_r+0xa0>)
 800d56c:	429c      	cmp	r4, r3
 800d56e:	bf08      	it	eq
 800d570:	68ec      	ldreq	r4, [r5, #12]
 800d572:	e7ca      	b.n	800d50a <__swbuf_r+0x1a>
 800d574:	4621      	mov	r1, r4
 800d576:	4628      	mov	r0, r5
 800d578:	f000 f80c 	bl	800d594 <__swsetup_r>
 800d57c:	2800      	cmp	r0, #0
 800d57e:	d0cb      	beq.n	800d518 <__swbuf_r+0x28>
 800d580:	f04f 37ff 	mov.w	r7, #4294967295
 800d584:	e7ea      	b.n	800d55c <__swbuf_r+0x6c>
 800d586:	bf00      	nop
 800d588:	0800f38c 	.word	0x0800f38c
 800d58c:	0800f3ac 	.word	0x0800f3ac
 800d590:	0800f36c 	.word	0x0800f36c

0800d594 <__swsetup_r>:
 800d594:	4b32      	ldr	r3, [pc, #200]	; (800d660 <__swsetup_r+0xcc>)
 800d596:	b570      	push	{r4, r5, r6, lr}
 800d598:	681d      	ldr	r5, [r3, #0]
 800d59a:	4606      	mov	r6, r0
 800d59c:	460c      	mov	r4, r1
 800d59e:	b125      	cbz	r5, 800d5aa <__swsetup_r+0x16>
 800d5a0:	69ab      	ldr	r3, [r5, #24]
 800d5a2:	b913      	cbnz	r3, 800d5aa <__swsetup_r+0x16>
 800d5a4:	4628      	mov	r0, r5
 800d5a6:	f7ff fd43 	bl	800d030 <__sinit>
 800d5aa:	4b2e      	ldr	r3, [pc, #184]	; (800d664 <__swsetup_r+0xd0>)
 800d5ac:	429c      	cmp	r4, r3
 800d5ae:	d10f      	bne.n	800d5d0 <__swsetup_r+0x3c>
 800d5b0:	686c      	ldr	r4, [r5, #4]
 800d5b2:	89a3      	ldrh	r3, [r4, #12]
 800d5b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5b8:	0719      	lsls	r1, r3, #28
 800d5ba:	d42c      	bmi.n	800d616 <__swsetup_r+0x82>
 800d5bc:	06dd      	lsls	r5, r3, #27
 800d5be:	d411      	bmi.n	800d5e4 <__swsetup_r+0x50>
 800d5c0:	2309      	movs	r3, #9
 800d5c2:	6033      	str	r3, [r6, #0]
 800d5c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5c8:	81a3      	strh	r3, [r4, #12]
 800d5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ce:	e03e      	b.n	800d64e <__swsetup_r+0xba>
 800d5d0:	4b25      	ldr	r3, [pc, #148]	; (800d668 <__swsetup_r+0xd4>)
 800d5d2:	429c      	cmp	r4, r3
 800d5d4:	d101      	bne.n	800d5da <__swsetup_r+0x46>
 800d5d6:	68ac      	ldr	r4, [r5, #8]
 800d5d8:	e7eb      	b.n	800d5b2 <__swsetup_r+0x1e>
 800d5da:	4b24      	ldr	r3, [pc, #144]	; (800d66c <__swsetup_r+0xd8>)
 800d5dc:	429c      	cmp	r4, r3
 800d5de:	bf08      	it	eq
 800d5e0:	68ec      	ldreq	r4, [r5, #12]
 800d5e2:	e7e6      	b.n	800d5b2 <__swsetup_r+0x1e>
 800d5e4:	0758      	lsls	r0, r3, #29
 800d5e6:	d512      	bpl.n	800d60e <__swsetup_r+0x7a>
 800d5e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5ea:	b141      	cbz	r1, 800d5fe <__swsetup_r+0x6a>
 800d5ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5f0:	4299      	cmp	r1, r3
 800d5f2:	d002      	beq.n	800d5fa <__swsetup_r+0x66>
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	f7fe fd51 	bl	800c09c <_free_r>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	6363      	str	r3, [r4, #52]	; 0x34
 800d5fe:	89a3      	ldrh	r3, [r4, #12]
 800d600:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d604:	81a3      	strh	r3, [r4, #12]
 800d606:	2300      	movs	r3, #0
 800d608:	6063      	str	r3, [r4, #4]
 800d60a:	6923      	ldr	r3, [r4, #16]
 800d60c:	6023      	str	r3, [r4, #0]
 800d60e:	89a3      	ldrh	r3, [r4, #12]
 800d610:	f043 0308 	orr.w	r3, r3, #8
 800d614:	81a3      	strh	r3, [r4, #12]
 800d616:	6923      	ldr	r3, [r4, #16]
 800d618:	b94b      	cbnz	r3, 800d62e <__swsetup_r+0x9a>
 800d61a:	89a3      	ldrh	r3, [r4, #12]
 800d61c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d624:	d003      	beq.n	800d62e <__swsetup_r+0x9a>
 800d626:	4621      	mov	r1, r4
 800d628:	4630      	mov	r0, r6
 800d62a:	f000 f84d 	bl	800d6c8 <__smakebuf_r>
 800d62e:	89a0      	ldrh	r0, [r4, #12]
 800d630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d634:	f010 0301 	ands.w	r3, r0, #1
 800d638:	d00a      	beq.n	800d650 <__swsetup_r+0xbc>
 800d63a:	2300      	movs	r3, #0
 800d63c:	60a3      	str	r3, [r4, #8]
 800d63e:	6963      	ldr	r3, [r4, #20]
 800d640:	425b      	negs	r3, r3
 800d642:	61a3      	str	r3, [r4, #24]
 800d644:	6923      	ldr	r3, [r4, #16]
 800d646:	b943      	cbnz	r3, 800d65a <__swsetup_r+0xc6>
 800d648:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d64c:	d1ba      	bne.n	800d5c4 <__swsetup_r+0x30>
 800d64e:	bd70      	pop	{r4, r5, r6, pc}
 800d650:	0781      	lsls	r1, r0, #30
 800d652:	bf58      	it	pl
 800d654:	6963      	ldrpl	r3, [r4, #20]
 800d656:	60a3      	str	r3, [r4, #8]
 800d658:	e7f4      	b.n	800d644 <__swsetup_r+0xb0>
 800d65a:	2000      	movs	r0, #0
 800d65c:	e7f7      	b.n	800d64e <__swsetup_r+0xba>
 800d65e:	bf00      	nop
 800d660:	20000014 	.word	0x20000014
 800d664:	0800f38c 	.word	0x0800f38c
 800d668:	0800f3ac 	.word	0x0800f3ac
 800d66c:	0800f36c 	.word	0x0800f36c

0800d670 <abort>:
 800d670:	b508      	push	{r3, lr}
 800d672:	2006      	movs	r0, #6
 800d674:	f000 f898 	bl	800d7a8 <raise>
 800d678:	2001      	movs	r0, #1
 800d67a:	f7f5 fc23 	bl	8002ec4 <_exit>

0800d67e <__swhatbuf_r>:
 800d67e:	b570      	push	{r4, r5, r6, lr}
 800d680:	460e      	mov	r6, r1
 800d682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d686:	2900      	cmp	r1, #0
 800d688:	b096      	sub	sp, #88	; 0x58
 800d68a:	4614      	mov	r4, r2
 800d68c:	461d      	mov	r5, r3
 800d68e:	da08      	bge.n	800d6a2 <__swhatbuf_r+0x24>
 800d690:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d694:	2200      	movs	r2, #0
 800d696:	602a      	str	r2, [r5, #0]
 800d698:	061a      	lsls	r2, r3, #24
 800d69a:	d410      	bmi.n	800d6be <__swhatbuf_r+0x40>
 800d69c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6a0:	e00e      	b.n	800d6c0 <__swhatbuf_r+0x42>
 800d6a2:	466a      	mov	r2, sp
 800d6a4:	f000 f89c 	bl	800d7e0 <_fstat_r>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	dbf1      	blt.n	800d690 <__swhatbuf_r+0x12>
 800d6ac:	9a01      	ldr	r2, [sp, #4]
 800d6ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d6b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d6b6:	425a      	negs	r2, r3
 800d6b8:	415a      	adcs	r2, r3
 800d6ba:	602a      	str	r2, [r5, #0]
 800d6bc:	e7ee      	b.n	800d69c <__swhatbuf_r+0x1e>
 800d6be:	2340      	movs	r3, #64	; 0x40
 800d6c0:	2000      	movs	r0, #0
 800d6c2:	6023      	str	r3, [r4, #0]
 800d6c4:	b016      	add	sp, #88	; 0x58
 800d6c6:	bd70      	pop	{r4, r5, r6, pc}

0800d6c8 <__smakebuf_r>:
 800d6c8:	898b      	ldrh	r3, [r1, #12]
 800d6ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6cc:	079d      	lsls	r5, r3, #30
 800d6ce:	4606      	mov	r6, r0
 800d6d0:	460c      	mov	r4, r1
 800d6d2:	d507      	bpl.n	800d6e4 <__smakebuf_r+0x1c>
 800d6d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	6123      	str	r3, [r4, #16]
 800d6dc:	2301      	movs	r3, #1
 800d6de:	6163      	str	r3, [r4, #20]
 800d6e0:	b002      	add	sp, #8
 800d6e2:	bd70      	pop	{r4, r5, r6, pc}
 800d6e4:	ab01      	add	r3, sp, #4
 800d6e6:	466a      	mov	r2, sp
 800d6e8:	f7ff ffc9 	bl	800d67e <__swhatbuf_r>
 800d6ec:	9900      	ldr	r1, [sp, #0]
 800d6ee:	4605      	mov	r5, r0
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	f7fe fd3f 	bl	800c174 <_malloc_r>
 800d6f6:	b948      	cbnz	r0, 800d70c <__smakebuf_r+0x44>
 800d6f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6fc:	059a      	lsls	r2, r3, #22
 800d6fe:	d4ef      	bmi.n	800d6e0 <__smakebuf_r+0x18>
 800d700:	f023 0303 	bic.w	r3, r3, #3
 800d704:	f043 0302 	orr.w	r3, r3, #2
 800d708:	81a3      	strh	r3, [r4, #12]
 800d70a:	e7e3      	b.n	800d6d4 <__smakebuf_r+0xc>
 800d70c:	4b0d      	ldr	r3, [pc, #52]	; (800d744 <__smakebuf_r+0x7c>)
 800d70e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d710:	89a3      	ldrh	r3, [r4, #12]
 800d712:	6020      	str	r0, [r4, #0]
 800d714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d718:	81a3      	strh	r3, [r4, #12]
 800d71a:	9b00      	ldr	r3, [sp, #0]
 800d71c:	6163      	str	r3, [r4, #20]
 800d71e:	9b01      	ldr	r3, [sp, #4]
 800d720:	6120      	str	r0, [r4, #16]
 800d722:	b15b      	cbz	r3, 800d73c <__smakebuf_r+0x74>
 800d724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d728:	4630      	mov	r0, r6
 800d72a:	f000 f86b 	bl	800d804 <_isatty_r>
 800d72e:	b128      	cbz	r0, 800d73c <__smakebuf_r+0x74>
 800d730:	89a3      	ldrh	r3, [r4, #12]
 800d732:	f023 0303 	bic.w	r3, r3, #3
 800d736:	f043 0301 	orr.w	r3, r3, #1
 800d73a:	81a3      	strh	r3, [r4, #12]
 800d73c:	89a0      	ldrh	r0, [r4, #12]
 800d73e:	4305      	orrs	r5, r0
 800d740:	81a5      	strh	r5, [r4, #12]
 800d742:	e7cd      	b.n	800d6e0 <__smakebuf_r+0x18>
 800d744:	0800cfc9 	.word	0x0800cfc9

0800d748 <_malloc_usable_size_r>:
 800d748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d74c:	1f18      	subs	r0, r3, #4
 800d74e:	2b00      	cmp	r3, #0
 800d750:	bfbc      	itt	lt
 800d752:	580b      	ldrlt	r3, [r1, r0]
 800d754:	18c0      	addlt	r0, r0, r3
 800d756:	4770      	bx	lr

0800d758 <_raise_r>:
 800d758:	291f      	cmp	r1, #31
 800d75a:	b538      	push	{r3, r4, r5, lr}
 800d75c:	4604      	mov	r4, r0
 800d75e:	460d      	mov	r5, r1
 800d760:	d904      	bls.n	800d76c <_raise_r+0x14>
 800d762:	2316      	movs	r3, #22
 800d764:	6003      	str	r3, [r0, #0]
 800d766:	f04f 30ff 	mov.w	r0, #4294967295
 800d76a:	bd38      	pop	{r3, r4, r5, pc}
 800d76c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d76e:	b112      	cbz	r2, 800d776 <_raise_r+0x1e>
 800d770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d774:	b94b      	cbnz	r3, 800d78a <_raise_r+0x32>
 800d776:	4620      	mov	r0, r4
 800d778:	f000 f830 	bl	800d7dc <_getpid_r>
 800d77c:	462a      	mov	r2, r5
 800d77e:	4601      	mov	r1, r0
 800d780:	4620      	mov	r0, r4
 800d782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d786:	f000 b817 	b.w	800d7b8 <_kill_r>
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d00a      	beq.n	800d7a4 <_raise_r+0x4c>
 800d78e:	1c59      	adds	r1, r3, #1
 800d790:	d103      	bne.n	800d79a <_raise_r+0x42>
 800d792:	2316      	movs	r3, #22
 800d794:	6003      	str	r3, [r0, #0]
 800d796:	2001      	movs	r0, #1
 800d798:	e7e7      	b.n	800d76a <_raise_r+0x12>
 800d79a:	2400      	movs	r4, #0
 800d79c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	4798      	blx	r3
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	e7e0      	b.n	800d76a <_raise_r+0x12>

0800d7a8 <raise>:
 800d7a8:	4b02      	ldr	r3, [pc, #8]	; (800d7b4 <raise+0xc>)
 800d7aa:	4601      	mov	r1, r0
 800d7ac:	6818      	ldr	r0, [r3, #0]
 800d7ae:	f7ff bfd3 	b.w	800d758 <_raise_r>
 800d7b2:	bf00      	nop
 800d7b4:	20000014 	.word	0x20000014

0800d7b8 <_kill_r>:
 800d7b8:	b538      	push	{r3, r4, r5, lr}
 800d7ba:	4d07      	ldr	r5, [pc, #28]	; (800d7d8 <_kill_r+0x20>)
 800d7bc:	2300      	movs	r3, #0
 800d7be:	4604      	mov	r4, r0
 800d7c0:	4608      	mov	r0, r1
 800d7c2:	4611      	mov	r1, r2
 800d7c4:	602b      	str	r3, [r5, #0]
 800d7c6:	f7f5 fb6d 	bl	8002ea4 <_kill>
 800d7ca:	1c43      	adds	r3, r0, #1
 800d7cc:	d102      	bne.n	800d7d4 <_kill_r+0x1c>
 800d7ce:	682b      	ldr	r3, [r5, #0]
 800d7d0:	b103      	cbz	r3, 800d7d4 <_kill_r+0x1c>
 800d7d2:	6023      	str	r3, [r4, #0]
 800d7d4:	bd38      	pop	{r3, r4, r5, pc}
 800d7d6:	bf00      	nop
 800d7d8:	20008984 	.word	0x20008984

0800d7dc <_getpid_r>:
 800d7dc:	f7f5 bb5a 	b.w	8002e94 <_getpid>

0800d7e0 <_fstat_r>:
 800d7e0:	b538      	push	{r3, r4, r5, lr}
 800d7e2:	4d07      	ldr	r5, [pc, #28]	; (800d800 <_fstat_r+0x20>)
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	4608      	mov	r0, r1
 800d7ea:	4611      	mov	r1, r2
 800d7ec:	602b      	str	r3, [r5, #0]
 800d7ee:	f7f5 fbb8 	bl	8002f62 <_fstat>
 800d7f2:	1c43      	adds	r3, r0, #1
 800d7f4:	d102      	bne.n	800d7fc <_fstat_r+0x1c>
 800d7f6:	682b      	ldr	r3, [r5, #0]
 800d7f8:	b103      	cbz	r3, 800d7fc <_fstat_r+0x1c>
 800d7fa:	6023      	str	r3, [r4, #0]
 800d7fc:	bd38      	pop	{r3, r4, r5, pc}
 800d7fe:	bf00      	nop
 800d800:	20008984 	.word	0x20008984

0800d804 <_isatty_r>:
 800d804:	b538      	push	{r3, r4, r5, lr}
 800d806:	4d06      	ldr	r5, [pc, #24]	; (800d820 <_isatty_r+0x1c>)
 800d808:	2300      	movs	r3, #0
 800d80a:	4604      	mov	r4, r0
 800d80c:	4608      	mov	r0, r1
 800d80e:	602b      	str	r3, [r5, #0]
 800d810:	f7f5 fbb7 	bl	8002f82 <_isatty>
 800d814:	1c43      	adds	r3, r0, #1
 800d816:	d102      	bne.n	800d81e <_isatty_r+0x1a>
 800d818:	682b      	ldr	r3, [r5, #0]
 800d81a:	b103      	cbz	r3, 800d81e <_isatty_r+0x1a>
 800d81c:	6023      	str	r3, [r4, #0]
 800d81e:	bd38      	pop	{r3, r4, r5, pc}
 800d820:	20008984 	.word	0x20008984
 800d824:	00000000 	.word	0x00000000

0800d828 <atan>:
 800d828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82c:	ec55 4b10 	vmov	r4, r5, d0
 800d830:	4bc3      	ldr	r3, [pc, #780]	; (800db40 <atan+0x318>)
 800d832:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d836:	429e      	cmp	r6, r3
 800d838:	46ab      	mov	fp, r5
 800d83a:	dd18      	ble.n	800d86e <atan+0x46>
 800d83c:	4bc1      	ldr	r3, [pc, #772]	; (800db44 <atan+0x31c>)
 800d83e:	429e      	cmp	r6, r3
 800d840:	dc01      	bgt.n	800d846 <atan+0x1e>
 800d842:	d109      	bne.n	800d858 <atan+0x30>
 800d844:	b144      	cbz	r4, 800d858 <atan+0x30>
 800d846:	4622      	mov	r2, r4
 800d848:	462b      	mov	r3, r5
 800d84a:	4620      	mov	r0, r4
 800d84c:	4629      	mov	r1, r5
 800d84e:	f7f2 fd2d 	bl	80002ac <__adddf3>
 800d852:	4604      	mov	r4, r0
 800d854:	460d      	mov	r5, r1
 800d856:	e006      	b.n	800d866 <atan+0x3e>
 800d858:	f1bb 0f00 	cmp.w	fp, #0
 800d85c:	f300 8131 	bgt.w	800dac2 <atan+0x29a>
 800d860:	a59b      	add	r5, pc, #620	; (adr r5, 800dad0 <atan+0x2a8>)
 800d862:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d866:	ec45 4b10 	vmov	d0, r4, r5
 800d86a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d86e:	4bb6      	ldr	r3, [pc, #728]	; (800db48 <atan+0x320>)
 800d870:	429e      	cmp	r6, r3
 800d872:	dc14      	bgt.n	800d89e <atan+0x76>
 800d874:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d878:	429e      	cmp	r6, r3
 800d87a:	dc0d      	bgt.n	800d898 <atan+0x70>
 800d87c:	a396      	add	r3, pc, #600	; (adr r3, 800dad8 <atan+0x2b0>)
 800d87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d882:	ee10 0a10 	vmov	r0, s0
 800d886:	4629      	mov	r1, r5
 800d888:	f7f2 fd10 	bl	80002ac <__adddf3>
 800d88c:	4baf      	ldr	r3, [pc, #700]	; (800db4c <atan+0x324>)
 800d88e:	2200      	movs	r2, #0
 800d890:	f7f3 f952 	bl	8000b38 <__aeabi_dcmpgt>
 800d894:	2800      	cmp	r0, #0
 800d896:	d1e6      	bne.n	800d866 <atan+0x3e>
 800d898:	f04f 3aff 	mov.w	sl, #4294967295
 800d89c:	e02b      	b.n	800d8f6 <atan+0xce>
 800d89e:	f000 f9b7 	bl	800dc10 <fabs>
 800d8a2:	4bab      	ldr	r3, [pc, #684]	; (800db50 <atan+0x328>)
 800d8a4:	429e      	cmp	r6, r3
 800d8a6:	ec55 4b10 	vmov	r4, r5, d0
 800d8aa:	f300 80bf 	bgt.w	800da2c <atan+0x204>
 800d8ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d8b2:	429e      	cmp	r6, r3
 800d8b4:	f300 80a0 	bgt.w	800d9f8 <atan+0x1d0>
 800d8b8:	ee10 2a10 	vmov	r2, s0
 800d8bc:	ee10 0a10 	vmov	r0, s0
 800d8c0:	462b      	mov	r3, r5
 800d8c2:	4629      	mov	r1, r5
 800d8c4:	f7f2 fcf2 	bl	80002ac <__adddf3>
 800d8c8:	4ba0      	ldr	r3, [pc, #640]	; (800db4c <atan+0x324>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f7f2 fcec 	bl	80002a8 <__aeabi_dsub>
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	4606      	mov	r6, r0
 800d8d4:	460f      	mov	r7, r1
 800d8d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d8da:	4620      	mov	r0, r4
 800d8dc:	4629      	mov	r1, r5
 800d8de:	f7f2 fce5 	bl	80002ac <__adddf3>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	4639      	mov	r1, r7
 800d8ea:	f7f2 ffbf 	bl	800086c <__aeabi_ddiv>
 800d8ee:	f04f 0a00 	mov.w	sl, #0
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	460d      	mov	r5, r1
 800d8f6:	4622      	mov	r2, r4
 800d8f8:	462b      	mov	r3, r5
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	f7f2 fe8b 	bl	8000618 <__aeabi_dmul>
 800d902:	4602      	mov	r2, r0
 800d904:	460b      	mov	r3, r1
 800d906:	4680      	mov	r8, r0
 800d908:	4689      	mov	r9, r1
 800d90a:	f7f2 fe85 	bl	8000618 <__aeabi_dmul>
 800d90e:	a374      	add	r3, pc, #464	; (adr r3, 800dae0 <atan+0x2b8>)
 800d910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d914:	4606      	mov	r6, r0
 800d916:	460f      	mov	r7, r1
 800d918:	f7f2 fe7e 	bl	8000618 <__aeabi_dmul>
 800d91c:	a372      	add	r3, pc, #456	; (adr r3, 800dae8 <atan+0x2c0>)
 800d91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d922:	f7f2 fcc3 	bl	80002ac <__adddf3>
 800d926:	4632      	mov	r2, r6
 800d928:	463b      	mov	r3, r7
 800d92a:	f7f2 fe75 	bl	8000618 <__aeabi_dmul>
 800d92e:	a370      	add	r3, pc, #448	; (adr r3, 800daf0 <atan+0x2c8>)
 800d930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d934:	f7f2 fcba 	bl	80002ac <__adddf3>
 800d938:	4632      	mov	r2, r6
 800d93a:	463b      	mov	r3, r7
 800d93c:	f7f2 fe6c 	bl	8000618 <__aeabi_dmul>
 800d940:	a36d      	add	r3, pc, #436	; (adr r3, 800daf8 <atan+0x2d0>)
 800d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d946:	f7f2 fcb1 	bl	80002ac <__adddf3>
 800d94a:	4632      	mov	r2, r6
 800d94c:	463b      	mov	r3, r7
 800d94e:	f7f2 fe63 	bl	8000618 <__aeabi_dmul>
 800d952:	a36b      	add	r3, pc, #428	; (adr r3, 800db00 <atan+0x2d8>)
 800d954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d958:	f7f2 fca8 	bl	80002ac <__adddf3>
 800d95c:	4632      	mov	r2, r6
 800d95e:	463b      	mov	r3, r7
 800d960:	f7f2 fe5a 	bl	8000618 <__aeabi_dmul>
 800d964:	a368      	add	r3, pc, #416	; (adr r3, 800db08 <atan+0x2e0>)
 800d966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96a:	f7f2 fc9f 	bl	80002ac <__adddf3>
 800d96e:	4642      	mov	r2, r8
 800d970:	464b      	mov	r3, r9
 800d972:	f7f2 fe51 	bl	8000618 <__aeabi_dmul>
 800d976:	a366      	add	r3, pc, #408	; (adr r3, 800db10 <atan+0x2e8>)
 800d978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97c:	4680      	mov	r8, r0
 800d97e:	4689      	mov	r9, r1
 800d980:	4630      	mov	r0, r6
 800d982:	4639      	mov	r1, r7
 800d984:	f7f2 fe48 	bl	8000618 <__aeabi_dmul>
 800d988:	a363      	add	r3, pc, #396	; (adr r3, 800db18 <atan+0x2f0>)
 800d98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98e:	f7f2 fc8b 	bl	80002a8 <__aeabi_dsub>
 800d992:	4632      	mov	r2, r6
 800d994:	463b      	mov	r3, r7
 800d996:	f7f2 fe3f 	bl	8000618 <__aeabi_dmul>
 800d99a:	a361      	add	r3, pc, #388	; (adr r3, 800db20 <atan+0x2f8>)
 800d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a0:	f7f2 fc82 	bl	80002a8 <__aeabi_dsub>
 800d9a4:	4632      	mov	r2, r6
 800d9a6:	463b      	mov	r3, r7
 800d9a8:	f7f2 fe36 	bl	8000618 <__aeabi_dmul>
 800d9ac:	a35e      	add	r3, pc, #376	; (adr r3, 800db28 <atan+0x300>)
 800d9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b2:	f7f2 fc79 	bl	80002a8 <__aeabi_dsub>
 800d9b6:	4632      	mov	r2, r6
 800d9b8:	463b      	mov	r3, r7
 800d9ba:	f7f2 fe2d 	bl	8000618 <__aeabi_dmul>
 800d9be:	a35c      	add	r3, pc, #368	; (adr r3, 800db30 <atan+0x308>)
 800d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c4:	f7f2 fc70 	bl	80002a8 <__aeabi_dsub>
 800d9c8:	4632      	mov	r2, r6
 800d9ca:	463b      	mov	r3, r7
 800d9cc:	f7f2 fe24 	bl	8000618 <__aeabi_dmul>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	4640      	mov	r0, r8
 800d9d6:	4649      	mov	r1, r9
 800d9d8:	f7f2 fc68 	bl	80002ac <__adddf3>
 800d9dc:	4622      	mov	r2, r4
 800d9de:	462b      	mov	r3, r5
 800d9e0:	f7f2 fe1a 	bl	8000618 <__aeabi_dmul>
 800d9e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	d14b      	bne.n	800da86 <atan+0x25e>
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	4629      	mov	r1, r5
 800d9f2:	f7f2 fc59 	bl	80002a8 <__aeabi_dsub>
 800d9f6:	e72c      	b.n	800d852 <atan+0x2a>
 800d9f8:	ee10 0a10 	vmov	r0, s0
 800d9fc:	4b53      	ldr	r3, [pc, #332]	; (800db4c <atan+0x324>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	4629      	mov	r1, r5
 800da02:	f7f2 fc51 	bl	80002a8 <__aeabi_dsub>
 800da06:	4b51      	ldr	r3, [pc, #324]	; (800db4c <atan+0x324>)
 800da08:	4606      	mov	r6, r0
 800da0a:	460f      	mov	r7, r1
 800da0c:	2200      	movs	r2, #0
 800da0e:	4620      	mov	r0, r4
 800da10:	4629      	mov	r1, r5
 800da12:	f7f2 fc4b 	bl	80002ac <__adddf3>
 800da16:	4602      	mov	r2, r0
 800da18:	460b      	mov	r3, r1
 800da1a:	4630      	mov	r0, r6
 800da1c:	4639      	mov	r1, r7
 800da1e:	f7f2 ff25 	bl	800086c <__aeabi_ddiv>
 800da22:	f04f 0a01 	mov.w	sl, #1
 800da26:	4604      	mov	r4, r0
 800da28:	460d      	mov	r5, r1
 800da2a:	e764      	b.n	800d8f6 <atan+0xce>
 800da2c:	4b49      	ldr	r3, [pc, #292]	; (800db54 <atan+0x32c>)
 800da2e:	429e      	cmp	r6, r3
 800da30:	da1d      	bge.n	800da6e <atan+0x246>
 800da32:	ee10 0a10 	vmov	r0, s0
 800da36:	4b48      	ldr	r3, [pc, #288]	; (800db58 <atan+0x330>)
 800da38:	2200      	movs	r2, #0
 800da3a:	4629      	mov	r1, r5
 800da3c:	f7f2 fc34 	bl	80002a8 <__aeabi_dsub>
 800da40:	4b45      	ldr	r3, [pc, #276]	; (800db58 <atan+0x330>)
 800da42:	4606      	mov	r6, r0
 800da44:	460f      	mov	r7, r1
 800da46:	2200      	movs	r2, #0
 800da48:	4620      	mov	r0, r4
 800da4a:	4629      	mov	r1, r5
 800da4c:	f7f2 fde4 	bl	8000618 <__aeabi_dmul>
 800da50:	4b3e      	ldr	r3, [pc, #248]	; (800db4c <atan+0x324>)
 800da52:	2200      	movs	r2, #0
 800da54:	f7f2 fc2a 	bl	80002ac <__adddf3>
 800da58:	4602      	mov	r2, r0
 800da5a:	460b      	mov	r3, r1
 800da5c:	4630      	mov	r0, r6
 800da5e:	4639      	mov	r1, r7
 800da60:	f7f2 ff04 	bl	800086c <__aeabi_ddiv>
 800da64:	f04f 0a02 	mov.w	sl, #2
 800da68:	4604      	mov	r4, r0
 800da6a:	460d      	mov	r5, r1
 800da6c:	e743      	b.n	800d8f6 <atan+0xce>
 800da6e:	462b      	mov	r3, r5
 800da70:	ee10 2a10 	vmov	r2, s0
 800da74:	4939      	ldr	r1, [pc, #228]	; (800db5c <atan+0x334>)
 800da76:	2000      	movs	r0, #0
 800da78:	f7f2 fef8 	bl	800086c <__aeabi_ddiv>
 800da7c:	f04f 0a03 	mov.w	sl, #3
 800da80:	4604      	mov	r4, r0
 800da82:	460d      	mov	r5, r1
 800da84:	e737      	b.n	800d8f6 <atan+0xce>
 800da86:	4b36      	ldr	r3, [pc, #216]	; (800db60 <atan+0x338>)
 800da88:	4e36      	ldr	r6, [pc, #216]	; (800db64 <atan+0x33c>)
 800da8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800da8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800da92:	e9da 2300 	ldrd	r2, r3, [sl]
 800da96:	f7f2 fc07 	bl	80002a8 <__aeabi_dsub>
 800da9a:	4622      	mov	r2, r4
 800da9c:	462b      	mov	r3, r5
 800da9e:	f7f2 fc03 	bl	80002a8 <__aeabi_dsub>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800daaa:	f7f2 fbfd 	bl	80002a8 <__aeabi_dsub>
 800daae:	f1bb 0f00 	cmp.w	fp, #0
 800dab2:	4604      	mov	r4, r0
 800dab4:	460d      	mov	r5, r1
 800dab6:	f6bf aed6 	bge.w	800d866 <atan+0x3e>
 800daba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dabe:	461d      	mov	r5, r3
 800dac0:	e6d1      	b.n	800d866 <atan+0x3e>
 800dac2:	a51d      	add	r5, pc, #116	; (adr r5, 800db38 <atan+0x310>)
 800dac4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dac8:	e6cd      	b.n	800d866 <atan+0x3e>
 800daca:	bf00      	nop
 800dacc:	f3af 8000 	nop.w
 800dad0:	54442d18 	.word	0x54442d18
 800dad4:	bff921fb 	.word	0xbff921fb
 800dad8:	8800759c 	.word	0x8800759c
 800dadc:	7e37e43c 	.word	0x7e37e43c
 800dae0:	e322da11 	.word	0xe322da11
 800dae4:	3f90ad3a 	.word	0x3f90ad3a
 800dae8:	24760deb 	.word	0x24760deb
 800daec:	3fa97b4b 	.word	0x3fa97b4b
 800daf0:	a0d03d51 	.word	0xa0d03d51
 800daf4:	3fb10d66 	.word	0x3fb10d66
 800daf8:	c54c206e 	.word	0xc54c206e
 800dafc:	3fb745cd 	.word	0x3fb745cd
 800db00:	920083ff 	.word	0x920083ff
 800db04:	3fc24924 	.word	0x3fc24924
 800db08:	5555550d 	.word	0x5555550d
 800db0c:	3fd55555 	.word	0x3fd55555
 800db10:	2c6a6c2f 	.word	0x2c6a6c2f
 800db14:	bfa2b444 	.word	0xbfa2b444
 800db18:	52defd9a 	.word	0x52defd9a
 800db1c:	3fadde2d 	.word	0x3fadde2d
 800db20:	af749a6d 	.word	0xaf749a6d
 800db24:	3fb3b0f2 	.word	0x3fb3b0f2
 800db28:	fe231671 	.word	0xfe231671
 800db2c:	3fbc71c6 	.word	0x3fbc71c6
 800db30:	9998ebc4 	.word	0x9998ebc4
 800db34:	3fc99999 	.word	0x3fc99999
 800db38:	54442d18 	.word	0x54442d18
 800db3c:	3ff921fb 	.word	0x3ff921fb
 800db40:	440fffff 	.word	0x440fffff
 800db44:	7ff00000 	.word	0x7ff00000
 800db48:	3fdbffff 	.word	0x3fdbffff
 800db4c:	3ff00000 	.word	0x3ff00000
 800db50:	3ff2ffff 	.word	0x3ff2ffff
 800db54:	40038000 	.word	0x40038000
 800db58:	3ff80000 	.word	0x3ff80000
 800db5c:	bff00000 	.word	0xbff00000
 800db60:	0800f3f0 	.word	0x0800f3f0
 800db64:	0800f3d0 	.word	0x0800f3d0

0800db68 <cos>:
 800db68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db6a:	ec53 2b10 	vmov	r2, r3, d0
 800db6e:	4826      	ldr	r0, [pc, #152]	; (800dc08 <cos+0xa0>)
 800db70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800db74:	4281      	cmp	r1, r0
 800db76:	dc06      	bgt.n	800db86 <cos+0x1e>
 800db78:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800dc00 <cos+0x98>
 800db7c:	b005      	add	sp, #20
 800db7e:	f85d eb04 	ldr.w	lr, [sp], #4
 800db82:	f000 bb3d 	b.w	800e200 <__kernel_cos>
 800db86:	4821      	ldr	r0, [pc, #132]	; (800dc0c <cos+0xa4>)
 800db88:	4281      	cmp	r1, r0
 800db8a:	dd09      	ble.n	800dba0 <cos+0x38>
 800db8c:	ee10 0a10 	vmov	r0, s0
 800db90:	4619      	mov	r1, r3
 800db92:	f7f2 fb89 	bl	80002a8 <__aeabi_dsub>
 800db96:	ec41 0b10 	vmov	d0, r0, r1
 800db9a:	b005      	add	sp, #20
 800db9c:	f85d fb04 	ldr.w	pc, [sp], #4
 800dba0:	4668      	mov	r0, sp
 800dba2:	f000 f86d 	bl	800dc80 <__ieee754_rem_pio2>
 800dba6:	f000 0003 	and.w	r0, r0, #3
 800dbaa:	2801      	cmp	r0, #1
 800dbac:	d00b      	beq.n	800dbc6 <cos+0x5e>
 800dbae:	2802      	cmp	r0, #2
 800dbb0:	d016      	beq.n	800dbe0 <cos+0x78>
 800dbb2:	b9e0      	cbnz	r0, 800dbee <cos+0x86>
 800dbb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dbb8:	ed9d 0b00 	vldr	d0, [sp]
 800dbbc:	f000 fb20 	bl	800e200 <__kernel_cos>
 800dbc0:	ec51 0b10 	vmov	r0, r1, d0
 800dbc4:	e7e7      	b.n	800db96 <cos+0x2e>
 800dbc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dbca:	ed9d 0b00 	vldr	d0, [sp]
 800dbce:	f000 ff2f 	bl	800ea30 <__kernel_sin>
 800dbd2:	ec53 2b10 	vmov	r2, r3, d0
 800dbd6:	ee10 0a10 	vmov	r0, s0
 800dbda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dbde:	e7da      	b.n	800db96 <cos+0x2e>
 800dbe0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dbe4:	ed9d 0b00 	vldr	d0, [sp]
 800dbe8:	f000 fb0a 	bl	800e200 <__kernel_cos>
 800dbec:	e7f1      	b.n	800dbd2 <cos+0x6a>
 800dbee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dbf2:	ed9d 0b00 	vldr	d0, [sp]
 800dbf6:	2001      	movs	r0, #1
 800dbf8:	f000 ff1a 	bl	800ea30 <__kernel_sin>
 800dbfc:	e7e0      	b.n	800dbc0 <cos+0x58>
 800dbfe:	bf00      	nop
	...
 800dc08:	3fe921fb 	.word	0x3fe921fb
 800dc0c:	7fefffff 	.word	0x7fefffff

0800dc10 <fabs>:
 800dc10:	ec51 0b10 	vmov	r0, r1, d0
 800dc14:	ee10 2a10 	vmov	r2, s0
 800dc18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dc1c:	ec43 2b10 	vmov	d0, r2, r3
 800dc20:	4770      	bx	lr

0800dc22 <sqrt>:
 800dc22:	b538      	push	{r3, r4, r5, lr}
 800dc24:	ed2d 8b02 	vpush	{d8}
 800dc28:	ec55 4b10 	vmov	r4, r5, d0
 800dc2c:	f000 fa34 	bl	800e098 <__ieee754_sqrt>
 800dc30:	4622      	mov	r2, r4
 800dc32:	462b      	mov	r3, r5
 800dc34:	4620      	mov	r0, r4
 800dc36:	4629      	mov	r1, r5
 800dc38:	eeb0 8a40 	vmov.f32	s16, s0
 800dc3c:	eef0 8a60 	vmov.f32	s17, s1
 800dc40:	f7f2 ff84 	bl	8000b4c <__aeabi_dcmpun>
 800dc44:	b990      	cbnz	r0, 800dc6c <sqrt+0x4a>
 800dc46:	2200      	movs	r2, #0
 800dc48:	2300      	movs	r3, #0
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	4629      	mov	r1, r5
 800dc4e:	f7f2 ff55 	bl	8000afc <__aeabi_dcmplt>
 800dc52:	b158      	cbz	r0, 800dc6c <sqrt+0x4a>
 800dc54:	f7fa fd0e 	bl	8008674 <__errno>
 800dc58:	2321      	movs	r3, #33	; 0x21
 800dc5a:	6003      	str	r3, [r0, #0]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	2300      	movs	r3, #0
 800dc60:	4610      	mov	r0, r2
 800dc62:	4619      	mov	r1, r3
 800dc64:	f7f2 fe02 	bl	800086c <__aeabi_ddiv>
 800dc68:	ec41 0b18 	vmov	d8, r0, r1
 800dc6c:	eeb0 0a48 	vmov.f32	s0, s16
 800dc70:	eef0 0a68 	vmov.f32	s1, s17
 800dc74:	ecbd 8b02 	vpop	{d8}
 800dc78:	bd38      	pop	{r3, r4, r5, pc}
 800dc7a:	0000      	movs	r0, r0
 800dc7c:	0000      	movs	r0, r0
	...

0800dc80 <__ieee754_rem_pio2>:
 800dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc84:	ed2d 8b02 	vpush	{d8}
 800dc88:	ec55 4b10 	vmov	r4, r5, d0
 800dc8c:	4bca      	ldr	r3, [pc, #808]	; (800dfb8 <__ieee754_rem_pio2+0x338>)
 800dc8e:	b08b      	sub	sp, #44	; 0x2c
 800dc90:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800dc94:	4598      	cmp	r8, r3
 800dc96:	4682      	mov	sl, r0
 800dc98:	9502      	str	r5, [sp, #8]
 800dc9a:	dc08      	bgt.n	800dcae <__ieee754_rem_pio2+0x2e>
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	2300      	movs	r3, #0
 800dca0:	ed80 0b00 	vstr	d0, [r0]
 800dca4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dca8:	f04f 0b00 	mov.w	fp, #0
 800dcac:	e028      	b.n	800dd00 <__ieee754_rem_pio2+0x80>
 800dcae:	4bc3      	ldr	r3, [pc, #780]	; (800dfbc <__ieee754_rem_pio2+0x33c>)
 800dcb0:	4598      	cmp	r8, r3
 800dcb2:	dc78      	bgt.n	800dda6 <__ieee754_rem_pio2+0x126>
 800dcb4:	9b02      	ldr	r3, [sp, #8]
 800dcb6:	4ec2      	ldr	r6, [pc, #776]	; (800dfc0 <__ieee754_rem_pio2+0x340>)
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	ee10 0a10 	vmov	r0, s0
 800dcbe:	a3b0      	add	r3, pc, #704	; (adr r3, 800df80 <__ieee754_rem_pio2+0x300>)
 800dcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	dd39      	ble.n	800dd3c <__ieee754_rem_pio2+0xbc>
 800dcc8:	f7f2 faee 	bl	80002a8 <__aeabi_dsub>
 800dccc:	45b0      	cmp	r8, r6
 800dcce:	4604      	mov	r4, r0
 800dcd0:	460d      	mov	r5, r1
 800dcd2:	d01b      	beq.n	800dd0c <__ieee754_rem_pio2+0x8c>
 800dcd4:	a3ac      	add	r3, pc, #688	; (adr r3, 800df88 <__ieee754_rem_pio2+0x308>)
 800dcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcda:	f7f2 fae5 	bl	80002a8 <__aeabi_dsub>
 800dcde:	4602      	mov	r2, r0
 800dce0:	460b      	mov	r3, r1
 800dce2:	e9ca 2300 	strd	r2, r3, [sl]
 800dce6:	4620      	mov	r0, r4
 800dce8:	4629      	mov	r1, r5
 800dcea:	f7f2 fadd 	bl	80002a8 <__aeabi_dsub>
 800dcee:	a3a6      	add	r3, pc, #664	; (adr r3, 800df88 <__ieee754_rem_pio2+0x308>)
 800dcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf4:	f7f2 fad8 	bl	80002a8 <__aeabi_dsub>
 800dcf8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dcfc:	f04f 0b01 	mov.w	fp, #1
 800dd00:	4658      	mov	r0, fp
 800dd02:	b00b      	add	sp, #44	; 0x2c
 800dd04:	ecbd 8b02 	vpop	{d8}
 800dd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0c:	a3a0      	add	r3, pc, #640	; (adr r3, 800df90 <__ieee754_rem_pio2+0x310>)
 800dd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd12:	f7f2 fac9 	bl	80002a8 <__aeabi_dsub>
 800dd16:	a3a0      	add	r3, pc, #640	; (adr r3, 800df98 <__ieee754_rem_pio2+0x318>)
 800dd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	460d      	mov	r5, r1
 800dd20:	f7f2 fac2 	bl	80002a8 <__aeabi_dsub>
 800dd24:	4602      	mov	r2, r0
 800dd26:	460b      	mov	r3, r1
 800dd28:	e9ca 2300 	strd	r2, r3, [sl]
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	4629      	mov	r1, r5
 800dd30:	f7f2 faba 	bl	80002a8 <__aeabi_dsub>
 800dd34:	a398      	add	r3, pc, #608	; (adr r3, 800df98 <__ieee754_rem_pio2+0x318>)
 800dd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3a:	e7db      	b.n	800dcf4 <__ieee754_rem_pio2+0x74>
 800dd3c:	f7f2 fab6 	bl	80002ac <__adddf3>
 800dd40:	45b0      	cmp	r8, r6
 800dd42:	4604      	mov	r4, r0
 800dd44:	460d      	mov	r5, r1
 800dd46:	d016      	beq.n	800dd76 <__ieee754_rem_pio2+0xf6>
 800dd48:	a38f      	add	r3, pc, #572	; (adr r3, 800df88 <__ieee754_rem_pio2+0x308>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	f7f2 faad 	bl	80002ac <__adddf3>
 800dd52:	4602      	mov	r2, r0
 800dd54:	460b      	mov	r3, r1
 800dd56:	e9ca 2300 	strd	r2, r3, [sl]
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	4629      	mov	r1, r5
 800dd5e:	f7f2 faa3 	bl	80002a8 <__aeabi_dsub>
 800dd62:	a389      	add	r3, pc, #548	; (adr r3, 800df88 <__ieee754_rem_pio2+0x308>)
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	f7f2 faa0 	bl	80002ac <__adddf3>
 800dd6c:	f04f 3bff 	mov.w	fp, #4294967295
 800dd70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd74:	e7c4      	b.n	800dd00 <__ieee754_rem_pio2+0x80>
 800dd76:	a386      	add	r3, pc, #536	; (adr r3, 800df90 <__ieee754_rem_pio2+0x310>)
 800dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7c:	f7f2 fa96 	bl	80002ac <__adddf3>
 800dd80:	a385      	add	r3, pc, #532	; (adr r3, 800df98 <__ieee754_rem_pio2+0x318>)
 800dd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd86:	4604      	mov	r4, r0
 800dd88:	460d      	mov	r5, r1
 800dd8a:	f7f2 fa8f 	bl	80002ac <__adddf3>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	460b      	mov	r3, r1
 800dd92:	e9ca 2300 	strd	r2, r3, [sl]
 800dd96:	4620      	mov	r0, r4
 800dd98:	4629      	mov	r1, r5
 800dd9a:	f7f2 fa85 	bl	80002a8 <__aeabi_dsub>
 800dd9e:	a37e      	add	r3, pc, #504	; (adr r3, 800df98 <__ieee754_rem_pio2+0x318>)
 800dda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda4:	e7e0      	b.n	800dd68 <__ieee754_rem_pio2+0xe8>
 800dda6:	4b87      	ldr	r3, [pc, #540]	; (800dfc4 <__ieee754_rem_pio2+0x344>)
 800dda8:	4598      	cmp	r8, r3
 800ddaa:	f300 80d9 	bgt.w	800df60 <__ieee754_rem_pio2+0x2e0>
 800ddae:	f7ff ff2f 	bl	800dc10 <fabs>
 800ddb2:	ec55 4b10 	vmov	r4, r5, d0
 800ddb6:	ee10 0a10 	vmov	r0, s0
 800ddba:	a379      	add	r3, pc, #484	; (adr r3, 800dfa0 <__ieee754_rem_pio2+0x320>)
 800ddbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	f7f2 fc29 	bl	8000618 <__aeabi_dmul>
 800ddc6:	4b80      	ldr	r3, [pc, #512]	; (800dfc8 <__ieee754_rem_pio2+0x348>)
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f7f2 fa6f 	bl	80002ac <__adddf3>
 800ddce:	f7f2 fed3 	bl	8000b78 <__aeabi_d2iz>
 800ddd2:	4683      	mov	fp, r0
 800ddd4:	f7f2 fbb6 	bl	8000544 <__aeabi_i2d>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	460b      	mov	r3, r1
 800dddc:	ec43 2b18 	vmov	d8, r2, r3
 800dde0:	a367      	add	r3, pc, #412	; (adr r3, 800df80 <__ieee754_rem_pio2+0x300>)
 800dde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde6:	f7f2 fc17 	bl	8000618 <__aeabi_dmul>
 800ddea:	4602      	mov	r2, r0
 800ddec:	460b      	mov	r3, r1
 800ddee:	4620      	mov	r0, r4
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	f7f2 fa59 	bl	80002a8 <__aeabi_dsub>
 800ddf6:	a364      	add	r3, pc, #400	; (adr r3, 800df88 <__ieee754_rem_pio2+0x308>)
 800ddf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfc:	4606      	mov	r6, r0
 800ddfe:	460f      	mov	r7, r1
 800de00:	ec51 0b18 	vmov	r0, r1, d8
 800de04:	f7f2 fc08 	bl	8000618 <__aeabi_dmul>
 800de08:	f1bb 0f1f 	cmp.w	fp, #31
 800de0c:	4604      	mov	r4, r0
 800de0e:	460d      	mov	r5, r1
 800de10:	dc0d      	bgt.n	800de2e <__ieee754_rem_pio2+0x1ae>
 800de12:	4b6e      	ldr	r3, [pc, #440]	; (800dfcc <__ieee754_rem_pio2+0x34c>)
 800de14:	f10b 32ff 	add.w	r2, fp, #4294967295
 800de18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de1c:	4543      	cmp	r3, r8
 800de1e:	d006      	beq.n	800de2e <__ieee754_rem_pio2+0x1ae>
 800de20:	4622      	mov	r2, r4
 800de22:	462b      	mov	r3, r5
 800de24:	4630      	mov	r0, r6
 800de26:	4639      	mov	r1, r7
 800de28:	f7f2 fa3e 	bl	80002a8 <__aeabi_dsub>
 800de2c:	e00f      	b.n	800de4e <__ieee754_rem_pio2+0x1ce>
 800de2e:	462b      	mov	r3, r5
 800de30:	4622      	mov	r2, r4
 800de32:	4630      	mov	r0, r6
 800de34:	4639      	mov	r1, r7
 800de36:	f7f2 fa37 	bl	80002a8 <__aeabi_dsub>
 800de3a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800de3e:	9303      	str	r3, [sp, #12]
 800de40:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800de44:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800de48:	f1b8 0f10 	cmp.w	r8, #16
 800de4c:	dc02      	bgt.n	800de54 <__ieee754_rem_pio2+0x1d4>
 800de4e:	e9ca 0100 	strd	r0, r1, [sl]
 800de52:	e039      	b.n	800dec8 <__ieee754_rem_pio2+0x248>
 800de54:	a34e      	add	r3, pc, #312	; (adr r3, 800df90 <__ieee754_rem_pio2+0x310>)
 800de56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5a:	ec51 0b18 	vmov	r0, r1, d8
 800de5e:	f7f2 fbdb 	bl	8000618 <__aeabi_dmul>
 800de62:	4604      	mov	r4, r0
 800de64:	460d      	mov	r5, r1
 800de66:	4602      	mov	r2, r0
 800de68:	460b      	mov	r3, r1
 800de6a:	4630      	mov	r0, r6
 800de6c:	4639      	mov	r1, r7
 800de6e:	f7f2 fa1b 	bl	80002a8 <__aeabi_dsub>
 800de72:	4602      	mov	r2, r0
 800de74:	460b      	mov	r3, r1
 800de76:	4680      	mov	r8, r0
 800de78:	4689      	mov	r9, r1
 800de7a:	4630      	mov	r0, r6
 800de7c:	4639      	mov	r1, r7
 800de7e:	f7f2 fa13 	bl	80002a8 <__aeabi_dsub>
 800de82:	4622      	mov	r2, r4
 800de84:	462b      	mov	r3, r5
 800de86:	f7f2 fa0f 	bl	80002a8 <__aeabi_dsub>
 800de8a:	a343      	add	r3, pc, #268	; (adr r3, 800df98 <__ieee754_rem_pio2+0x318>)
 800de8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de90:	4604      	mov	r4, r0
 800de92:	460d      	mov	r5, r1
 800de94:	ec51 0b18 	vmov	r0, r1, d8
 800de98:	f7f2 fbbe 	bl	8000618 <__aeabi_dmul>
 800de9c:	4622      	mov	r2, r4
 800de9e:	462b      	mov	r3, r5
 800dea0:	f7f2 fa02 	bl	80002a8 <__aeabi_dsub>
 800dea4:	4602      	mov	r2, r0
 800dea6:	460b      	mov	r3, r1
 800dea8:	4604      	mov	r4, r0
 800deaa:	460d      	mov	r5, r1
 800deac:	4640      	mov	r0, r8
 800deae:	4649      	mov	r1, r9
 800deb0:	f7f2 f9fa 	bl	80002a8 <__aeabi_dsub>
 800deb4:	9a03      	ldr	r2, [sp, #12]
 800deb6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	2b31      	cmp	r3, #49	; 0x31
 800debe:	dc24      	bgt.n	800df0a <__ieee754_rem_pio2+0x28a>
 800dec0:	e9ca 0100 	strd	r0, r1, [sl]
 800dec4:	4646      	mov	r6, r8
 800dec6:	464f      	mov	r7, r9
 800dec8:	e9da 8900 	ldrd	r8, r9, [sl]
 800decc:	4630      	mov	r0, r6
 800dece:	4642      	mov	r2, r8
 800ded0:	464b      	mov	r3, r9
 800ded2:	4639      	mov	r1, r7
 800ded4:	f7f2 f9e8 	bl	80002a8 <__aeabi_dsub>
 800ded8:	462b      	mov	r3, r5
 800deda:	4622      	mov	r2, r4
 800dedc:	f7f2 f9e4 	bl	80002a8 <__aeabi_dsub>
 800dee0:	9b02      	ldr	r3, [sp, #8]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dee8:	f6bf af0a 	bge.w	800dd00 <__ieee754_rem_pio2+0x80>
 800deec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800def0:	f8ca 3004 	str.w	r3, [sl, #4]
 800def4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800def8:	f8ca 8000 	str.w	r8, [sl]
 800defc:	f8ca 0008 	str.w	r0, [sl, #8]
 800df00:	f8ca 300c 	str.w	r3, [sl, #12]
 800df04:	f1cb 0b00 	rsb	fp, fp, #0
 800df08:	e6fa      	b.n	800dd00 <__ieee754_rem_pio2+0x80>
 800df0a:	a327      	add	r3, pc, #156	; (adr r3, 800dfa8 <__ieee754_rem_pio2+0x328>)
 800df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df10:	ec51 0b18 	vmov	r0, r1, d8
 800df14:	f7f2 fb80 	bl	8000618 <__aeabi_dmul>
 800df18:	4604      	mov	r4, r0
 800df1a:	460d      	mov	r5, r1
 800df1c:	4602      	mov	r2, r0
 800df1e:	460b      	mov	r3, r1
 800df20:	4640      	mov	r0, r8
 800df22:	4649      	mov	r1, r9
 800df24:	f7f2 f9c0 	bl	80002a8 <__aeabi_dsub>
 800df28:	4602      	mov	r2, r0
 800df2a:	460b      	mov	r3, r1
 800df2c:	4606      	mov	r6, r0
 800df2e:	460f      	mov	r7, r1
 800df30:	4640      	mov	r0, r8
 800df32:	4649      	mov	r1, r9
 800df34:	f7f2 f9b8 	bl	80002a8 <__aeabi_dsub>
 800df38:	4622      	mov	r2, r4
 800df3a:	462b      	mov	r3, r5
 800df3c:	f7f2 f9b4 	bl	80002a8 <__aeabi_dsub>
 800df40:	a31b      	add	r3, pc, #108	; (adr r3, 800dfb0 <__ieee754_rem_pio2+0x330>)
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	4604      	mov	r4, r0
 800df48:	460d      	mov	r5, r1
 800df4a:	ec51 0b18 	vmov	r0, r1, d8
 800df4e:	f7f2 fb63 	bl	8000618 <__aeabi_dmul>
 800df52:	4622      	mov	r2, r4
 800df54:	462b      	mov	r3, r5
 800df56:	f7f2 f9a7 	bl	80002a8 <__aeabi_dsub>
 800df5a:	4604      	mov	r4, r0
 800df5c:	460d      	mov	r5, r1
 800df5e:	e75f      	b.n	800de20 <__ieee754_rem_pio2+0x1a0>
 800df60:	4b1b      	ldr	r3, [pc, #108]	; (800dfd0 <__ieee754_rem_pio2+0x350>)
 800df62:	4598      	cmp	r8, r3
 800df64:	dd36      	ble.n	800dfd4 <__ieee754_rem_pio2+0x354>
 800df66:	ee10 2a10 	vmov	r2, s0
 800df6a:	462b      	mov	r3, r5
 800df6c:	4620      	mov	r0, r4
 800df6e:	4629      	mov	r1, r5
 800df70:	f7f2 f99a 	bl	80002a8 <__aeabi_dsub>
 800df74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df78:	e9ca 0100 	strd	r0, r1, [sl]
 800df7c:	e694      	b.n	800dca8 <__ieee754_rem_pio2+0x28>
 800df7e:	bf00      	nop
 800df80:	54400000 	.word	0x54400000
 800df84:	3ff921fb 	.word	0x3ff921fb
 800df88:	1a626331 	.word	0x1a626331
 800df8c:	3dd0b461 	.word	0x3dd0b461
 800df90:	1a600000 	.word	0x1a600000
 800df94:	3dd0b461 	.word	0x3dd0b461
 800df98:	2e037073 	.word	0x2e037073
 800df9c:	3ba3198a 	.word	0x3ba3198a
 800dfa0:	6dc9c883 	.word	0x6dc9c883
 800dfa4:	3fe45f30 	.word	0x3fe45f30
 800dfa8:	2e000000 	.word	0x2e000000
 800dfac:	3ba3198a 	.word	0x3ba3198a
 800dfb0:	252049c1 	.word	0x252049c1
 800dfb4:	397b839a 	.word	0x397b839a
 800dfb8:	3fe921fb 	.word	0x3fe921fb
 800dfbc:	4002d97b 	.word	0x4002d97b
 800dfc0:	3ff921fb 	.word	0x3ff921fb
 800dfc4:	413921fb 	.word	0x413921fb
 800dfc8:	3fe00000 	.word	0x3fe00000
 800dfcc:	0800f410 	.word	0x0800f410
 800dfd0:	7fefffff 	.word	0x7fefffff
 800dfd4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800dfd8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800dfdc:	ee10 0a10 	vmov	r0, s0
 800dfe0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800dfe4:	ee10 6a10 	vmov	r6, s0
 800dfe8:	460f      	mov	r7, r1
 800dfea:	f7f2 fdc5 	bl	8000b78 <__aeabi_d2iz>
 800dfee:	f7f2 faa9 	bl	8000544 <__aeabi_i2d>
 800dff2:	4602      	mov	r2, r0
 800dff4:	460b      	mov	r3, r1
 800dff6:	4630      	mov	r0, r6
 800dff8:	4639      	mov	r1, r7
 800dffa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dffe:	f7f2 f953 	bl	80002a8 <__aeabi_dsub>
 800e002:	4b23      	ldr	r3, [pc, #140]	; (800e090 <__ieee754_rem_pio2+0x410>)
 800e004:	2200      	movs	r2, #0
 800e006:	f7f2 fb07 	bl	8000618 <__aeabi_dmul>
 800e00a:	460f      	mov	r7, r1
 800e00c:	4606      	mov	r6, r0
 800e00e:	f7f2 fdb3 	bl	8000b78 <__aeabi_d2iz>
 800e012:	f7f2 fa97 	bl	8000544 <__aeabi_i2d>
 800e016:	4602      	mov	r2, r0
 800e018:	460b      	mov	r3, r1
 800e01a:	4630      	mov	r0, r6
 800e01c:	4639      	mov	r1, r7
 800e01e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e022:	f7f2 f941 	bl	80002a8 <__aeabi_dsub>
 800e026:	4b1a      	ldr	r3, [pc, #104]	; (800e090 <__ieee754_rem_pio2+0x410>)
 800e028:	2200      	movs	r2, #0
 800e02a:	f7f2 faf5 	bl	8000618 <__aeabi_dmul>
 800e02e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e032:	ad04      	add	r5, sp, #16
 800e034:	f04f 0803 	mov.w	r8, #3
 800e038:	46a9      	mov	r9, r5
 800e03a:	2600      	movs	r6, #0
 800e03c:	2700      	movs	r7, #0
 800e03e:	4632      	mov	r2, r6
 800e040:	463b      	mov	r3, r7
 800e042:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e046:	46c3      	mov	fp, r8
 800e048:	3d08      	subs	r5, #8
 800e04a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e04e:	f7f2 fd4b 	bl	8000ae8 <__aeabi_dcmpeq>
 800e052:	2800      	cmp	r0, #0
 800e054:	d1f3      	bne.n	800e03e <__ieee754_rem_pio2+0x3be>
 800e056:	4b0f      	ldr	r3, [pc, #60]	; (800e094 <__ieee754_rem_pio2+0x414>)
 800e058:	9301      	str	r3, [sp, #4]
 800e05a:	2302      	movs	r3, #2
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	4622      	mov	r2, r4
 800e060:	465b      	mov	r3, fp
 800e062:	4651      	mov	r1, sl
 800e064:	4648      	mov	r0, r9
 800e066:	f000 f993 	bl	800e390 <__kernel_rem_pio2>
 800e06a:	9b02      	ldr	r3, [sp, #8]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	4683      	mov	fp, r0
 800e070:	f6bf ae46 	bge.w	800dd00 <__ieee754_rem_pio2+0x80>
 800e074:	e9da 2100 	ldrd	r2, r1, [sl]
 800e078:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e07c:	e9ca 2300 	strd	r2, r3, [sl]
 800e080:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e084:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e088:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e08c:	e73a      	b.n	800df04 <__ieee754_rem_pio2+0x284>
 800e08e:	bf00      	nop
 800e090:	41700000 	.word	0x41700000
 800e094:	0800f490 	.word	0x0800f490

0800e098 <__ieee754_sqrt>:
 800e098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e09c:	ec55 4b10 	vmov	r4, r5, d0
 800e0a0:	4e55      	ldr	r6, [pc, #340]	; (800e1f8 <__ieee754_sqrt+0x160>)
 800e0a2:	43ae      	bics	r6, r5
 800e0a4:	ee10 0a10 	vmov	r0, s0
 800e0a8:	ee10 3a10 	vmov	r3, s0
 800e0ac:	462a      	mov	r2, r5
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	d110      	bne.n	800e0d4 <__ieee754_sqrt+0x3c>
 800e0b2:	ee10 2a10 	vmov	r2, s0
 800e0b6:	462b      	mov	r3, r5
 800e0b8:	f7f2 faae 	bl	8000618 <__aeabi_dmul>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	460b      	mov	r3, r1
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	4629      	mov	r1, r5
 800e0c4:	f7f2 f8f2 	bl	80002ac <__adddf3>
 800e0c8:	4604      	mov	r4, r0
 800e0ca:	460d      	mov	r5, r1
 800e0cc:	ec45 4b10 	vmov	d0, r4, r5
 800e0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d4:	2d00      	cmp	r5, #0
 800e0d6:	dc10      	bgt.n	800e0fa <__ieee754_sqrt+0x62>
 800e0d8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e0dc:	4330      	orrs	r0, r6
 800e0de:	d0f5      	beq.n	800e0cc <__ieee754_sqrt+0x34>
 800e0e0:	b15d      	cbz	r5, 800e0fa <__ieee754_sqrt+0x62>
 800e0e2:	ee10 2a10 	vmov	r2, s0
 800e0e6:	462b      	mov	r3, r5
 800e0e8:	ee10 0a10 	vmov	r0, s0
 800e0ec:	f7f2 f8dc 	bl	80002a8 <__aeabi_dsub>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	f7f2 fbba 	bl	800086c <__aeabi_ddiv>
 800e0f8:	e7e6      	b.n	800e0c8 <__ieee754_sqrt+0x30>
 800e0fa:	1512      	asrs	r2, r2, #20
 800e0fc:	d074      	beq.n	800e1e8 <__ieee754_sqrt+0x150>
 800e0fe:	07d4      	lsls	r4, r2, #31
 800e100:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e104:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e108:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e10c:	bf5e      	ittt	pl
 800e10e:	0fda      	lsrpl	r2, r3, #31
 800e110:	005b      	lslpl	r3, r3, #1
 800e112:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e116:	2400      	movs	r4, #0
 800e118:	0fda      	lsrs	r2, r3, #31
 800e11a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e11e:	107f      	asrs	r7, r7, #1
 800e120:	005b      	lsls	r3, r3, #1
 800e122:	2516      	movs	r5, #22
 800e124:	4620      	mov	r0, r4
 800e126:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e12a:	1886      	adds	r6, r0, r2
 800e12c:	428e      	cmp	r6, r1
 800e12e:	bfde      	ittt	le
 800e130:	1b89      	suble	r1, r1, r6
 800e132:	18b0      	addle	r0, r6, r2
 800e134:	18a4      	addle	r4, r4, r2
 800e136:	0049      	lsls	r1, r1, #1
 800e138:	3d01      	subs	r5, #1
 800e13a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e13e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e142:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e146:	d1f0      	bne.n	800e12a <__ieee754_sqrt+0x92>
 800e148:	462a      	mov	r2, r5
 800e14a:	f04f 0e20 	mov.w	lr, #32
 800e14e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e152:	4281      	cmp	r1, r0
 800e154:	eb06 0c05 	add.w	ip, r6, r5
 800e158:	dc02      	bgt.n	800e160 <__ieee754_sqrt+0xc8>
 800e15a:	d113      	bne.n	800e184 <__ieee754_sqrt+0xec>
 800e15c:	459c      	cmp	ip, r3
 800e15e:	d811      	bhi.n	800e184 <__ieee754_sqrt+0xec>
 800e160:	f1bc 0f00 	cmp.w	ip, #0
 800e164:	eb0c 0506 	add.w	r5, ip, r6
 800e168:	da43      	bge.n	800e1f2 <__ieee754_sqrt+0x15a>
 800e16a:	2d00      	cmp	r5, #0
 800e16c:	db41      	blt.n	800e1f2 <__ieee754_sqrt+0x15a>
 800e16e:	f100 0801 	add.w	r8, r0, #1
 800e172:	1a09      	subs	r1, r1, r0
 800e174:	459c      	cmp	ip, r3
 800e176:	bf88      	it	hi
 800e178:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e17c:	eba3 030c 	sub.w	r3, r3, ip
 800e180:	4432      	add	r2, r6
 800e182:	4640      	mov	r0, r8
 800e184:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e188:	f1be 0e01 	subs.w	lr, lr, #1
 800e18c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e190:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e194:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e198:	d1db      	bne.n	800e152 <__ieee754_sqrt+0xba>
 800e19a:	430b      	orrs	r3, r1
 800e19c:	d006      	beq.n	800e1ac <__ieee754_sqrt+0x114>
 800e19e:	1c50      	adds	r0, r2, #1
 800e1a0:	bf13      	iteet	ne
 800e1a2:	3201      	addne	r2, #1
 800e1a4:	3401      	addeq	r4, #1
 800e1a6:	4672      	moveq	r2, lr
 800e1a8:	f022 0201 	bicne.w	r2, r2, #1
 800e1ac:	1063      	asrs	r3, r4, #1
 800e1ae:	0852      	lsrs	r2, r2, #1
 800e1b0:	07e1      	lsls	r1, r4, #31
 800e1b2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e1b6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e1ba:	bf48      	it	mi
 800e1bc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e1c0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e1c4:	4614      	mov	r4, r2
 800e1c6:	e781      	b.n	800e0cc <__ieee754_sqrt+0x34>
 800e1c8:	0ad9      	lsrs	r1, r3, #11
 800e1ca:	3815      	subs	r0, #21
 800e1cc:	055b      	lsls	r3, r3, #21
 800e1ce:	2900      	cmp	r1, #0
 800e1d0:	d0fa      	beq.n	800e1c8 <__ieee754_sqrt+0x130>
 800e1d2:	02cd      	lsls	r5, r1, #11
 800e1d4:	d50a      	bpl.n	800e1ec <__ieee754_sqrt+0x154>
 800e1d6:	f1c2 0420 	rsb	r4, r2, #32
 800e1da:	fa23 f404 	lsr.w	r4, r3, r4
 800e1de:	1e55      	subs	r5, r2, #1
 800e1e0:	4093      	lsls	r3, r2
 800e1e2:	4321      	orrs	r1, r4
 800e1e4:	1b42      	subs	r2, r0, r5
 800e1e6:	e78a      	b.n	800e0fe <__ieee754_sqrt+0x66>
 800e1e8:	4610      	mov	r0, r2
 800e1ea:	e7f0      	b.n	800e1ce <__ieee754_sqrt+0x136>
 800e1ec:	0049      	lsls	r1, r1, #1
 800e1ee:	3201      	adds	r2, #1
 800e1f0:	e7ef      	b.n	800e1d2 <__ieee754_sqrt+0x13a>
 800e1f2:	4680      	mov	r8, r0
 800e1f4:	e7bd      	b.n	800e172 <__ieee754_sqrt+0xda>
 800e1f6:	bf00      	nop
 800e1f8:	7ff00000 	.word	0x7ff00000
 800e1fc:	00000000 	.word	0x00000000

0800e200 <__kernel_cos>:
 800e200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e204:	ec57 6b10 	vmov	r6, r7, d0
 800e208:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e20c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e210:	ed8d 1b00 	vstr	d1, [sp]
 800e214:	da07      	bge.n	800e226 <__kernel_cos+0x26>
 800e216:	ee10 0a10 	vmov	r0, s0
 800e21a:	4639      	mov	r1, r7
 800e21c:	f7f2 fcac 	bl	8000b78 <__aeabi_d2iz>
 800e220:	2800      	cmp	r0, #0
 800e222:	f000 8088 	beq.w	800e336 <__kernel_cos+0x136>
 800e226:	4632      	mov	r2, r6
 800e228:	463b      	mov	r3, r7
 800e22a:	4630      	mov	r0, r6
 800e22c:	4639      	mov	r1, r7
 800e22e:	f7f2 f9f3 	bl	8000618 <__aeabi_dmul>
 800e232:	4b51      	ldr	r3, [pc, #324]	; (800e378 <__kernel_cos+0x178>)
 800e234:	2200      	movs	r2, #0
 800e236:	4604      	mov	r4, r0
 800e238:	460d      	mov	r5, r1
 800e23a:	f7f2 f9ed 	bl	8000618 <__aeabi_dmul>
 800e23e:	a340      	add	r3, pc, #256	; (adr r3, 800e340 <__kernel_cos+0x140>)
 800e240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e244:	4682      	mov	sl, r0
 800e246:	468b      	mov	fp, r1
 800e248:	4620      	mov	r0, r4
 800e24a:	4629      	mov	r1, r5
 800e24c:	f7f2 f9e4 	bl	8000618 <__aeabi_dmul>
 800e250:	a33d      	add	r3, pc, #244	; (adr r3, 800e348 <__kernel_cos+0x148>)
 800e252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e256:	f7f2 f829 	bl	80002ac <__adddf3>
 800e25a:	4622      	mov	r2, r4
 800e25c:	462b      	mov	r3, r5
 800e25e:	f7f2 f9db 	bl	8000618 <__aeabi_dmul>
 800e262:	a33b      	add	r3, pc, #236	; (adr r3, 800e350 <__kernel_cos+0x150>)
 800e264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e268:	f7f2 f81e 	bl	80002a8 <__aeabi_dsub>
 800e26c:	4622      	mov	r2, r4
 800e26e:	462b      	mov	r3, r5
 800e270:	f7f2 f9d2 	bl	8000618 <__aeabi_dmul>
 800e274:	a338      	add	r3, pc, #224	; (adr r3, 800e358 <__kernel_cos+0x158>)
 800e276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27a:	f7f2 f817 	bl	80002ac <__adddf3>
 800e27e:	4622      	mov	r2, r4
 800e280:	462b      	mov	r3, r5
 800e282:	f7f2 f9c9 	bl	8000618 <__aeabi_dmul>
 800e286:	a336      	add	r3, pc, #216	; (adr r3, 800e360 <__kernel_cos+0x160>)
 800e288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28c:	f7f2 f80c 	bl	80002a8 <__aeabi_dsub>
 800e290:	4622      	mov	r2, r4
 800e292:	462b      	mov	r3, r5
 800e294:	f7f2 f9c0 	bl	8000618 <__aeabi_dmul>
 800e298:	a333      	add	r3, pc, #204	; (adr r3, 800e368 <__kernel_cos+0x168>)
 800e29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29e:	f7f2 f805 	bl	80002ac <__adddf3>
 800e2a2:	4622      	mov	r2, r4
 800e2a4:	462b      	mov	r3, r5
 800e2a6:	f7f2 f9b7 	bl	8000618 <__aeabi_dmul>
 800e2aa:	4622      	mov	r2, r4
 800e2ac:	462b      	mov	r3, r5
 800e2ae:	f7f2 f9b3 	bl	8000618 <__aeabi_dmul>
 800e2b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	460d      	mov	r5, r1
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	4639      	mov	r1, r7
 800e2be:	f7f2 f9ab 	bl	8000618 <__aeabi_dmul>
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	4629      	mov	r1, r5
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f7f1 ffed 	bl	80002a8 <__aeabi_dsub>
 800e2ce:	4b2b      	ldr	r3, [pc, #172]	; (800e37c <__kernel_cos+0x17c>)
 800e2d0:	4598      	cmp	r8, r3
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	460f      	mov	r7, r1
 800e2d6:	dc10      	bgt.n	800e2fa <__kernel_cos+0xfa>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	460b      	mov	r3, r1
 800e2dc:	4650      	mov	r0, sl
 800e2de:	4659      	mov	r1, fp
 800e2e0:	f7f1 ffe2 	bl	80002a8 <__aeabi_dsub>
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	4926      	ldr	r1, [pc, #152]	; (800e380 <__kernel_cos+0x180>)
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	2000      	movs	r0, #0
 800e2ec:	f7f1 ffdc 	bl	80002a8 <__aeabi_dsub>
 800e2f0:	ec41 0b10 	vmov	d0, r0, r1
 800e2f4:	b003      	add	sp, #12
 800e2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2fa:	4b22      	ldr	r3, [pc, #136]	; (800e384 <__kernel_cos+0x184>)
 800e2fc:	4920      	ldr	r1, [pc, #128]	; (800e380 <__kernel_cos+0x180>)
 800e2fe:	4598      	cmp	r8, r3
 800e300:	bfcc      	ite	gt
 800e302:	4d21      	ldrgt	r5, [pc, #132]	; (800e388 <__kernel_cos+0x188>)
 800e304:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e308:	2400      	movs	r4, #0
 800e30a:	4622      	mov	r2, r4
 800e30c:	462b      	mov	r3, r5
 800e30e:	2000      	movs	r0, #0
 800e310:	f7f1 ffca 	bl	80002a8 <__aeabi_dsub>
 800e314:	4622      	mov	r2, r4
 800e316:	4680      	mov	r8, r0
 800e318:	4689      	mov	r9, r1
 800e31a:	462b      	mov	r3, r5
 800e31c:	4650      	mov	r0, sl
 800e31e:	4659      	mov	r1, fp
 800e320:	f7f1 ffc2 	bl	80002a8 <__aeabi_dsub>
 800e324:	4632      	mov	r2, r6
 800e326:	463b      	mov	r3, r7
 800e328:	f7f1 ffbe 	bl	80002a8 <__aeabi_dsub>
 800e32c:	4602      	mov	r2, r0
 800e32e:	460b      	mov	r3, r1
 800e330:	4640      	mov	r0, r8
 800e332:	4649      	mov	r1, r9
 800e334:	e7da      	b.n	800e2ec <__kernel_cos+0xec>
 800e336:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e370 <__kernel_cos+0x170>
 800e33a:	e7db      	b.n	800e2f4 <__kernel_cos+0xf4>
 800e33c:	f3af 8000 	nop.w
 800e340:	be8838d4 	.word	0xbe8838d4
 800e344:	bda8fae9 	.word	0xbda8fae9
 800e348:	bdb4b1c4 	.word	0xbdb4b1c4
 800e34c:	3e21ee9e 	.word	0x3e21ee9e
 800e350:	809c52ad 	.word	0x809c52ad
 800e354:	3e927e4f 	.word	0x3e927e4f
 800e358:	19cb1590 	.word	0x19cb1590
 800e35c:	3efa01a0 	.word	0x3efa01a0
 800e360:	16c15177 	.word	0x16c15177
 800e364:	3f56c16c 	.word	0x3f56c16c
 800e368:	5555554c 	.word	0x5555554c
 800e36c:	3fa55555 	.word	0x3fa55555
 800e370:	00000000 	.word	0x00000000
 800e374:	3ff00000 	.word	0x3ff00000
 800e378:	3fe00000 	.word	0x3fe00000
 800e37c:	3fd33332 	.word	0x3fd33332
 800e380:	3ff00000 	.word	0x3ff00000
 800e384:	3fe90000 	.word	0x3fe90000
 800e388:	3fd20000 	.word	0x3fd20000
 800e38c:	00000000 	.word	0x00000000

0800e390 <__kernel_rem_pio2>:
 800e390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e394:	ed2d 8b02 	vpush	{d8}
 800e398:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e39c:	f112 0f14 	cmn.w	r2, #20
 800e3a0:	9308      	str	r3, [sp, #32]
 800e3a2:	9101      	str	r1, [sp, #4]
 800e3a4:	4bc4      	ldr	r3, [pc, #784]	; (800e6b8 <__kernel_rem_pio2+0x328>)
 800e3a6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e3a8:	900b      	str	r0, [sp, #44]	; 0x2c
 800e3aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e3ae:	9302      	str	r3, [sp, #8]
 800e3b0:	9b08      	ldr	r3, [sp, #32]
 800e3b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e3b6:	bfa8      	it	ge
 800e3b8:	1ed4      	subge	r4, r2, #3
 800e3ba:	9306      	str	r3, [sp, #24]
 800e3bc:	bfb2      	itee	lt
 800e3be:	2400      	movlt	r4, #0
 800e3c0:	2318      	movge	r3, #24
 800e3c2:	fb94 f4f3 	sdivge	r4, r4, r3
 800e3c6:	f06f 0317 	mvn.w	r3, #23
 800e3ca:	fb04 3303 	mla	r3, r4, r3, r3
 800e3ce:	eb03 0a02 	add.w	sl, r3, r2
 800e3d2:	9b02      	ldr	r3, [sp, #8]
 800e3d4:	9a06      	ldr	r2, [sp, #24]
 800e3d6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e6a8 <__kernel_rem_pio2+0x318>
 800e3da:	eb03 0802 	add.w	r8, r3, r2
 800e3de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e3e0:	1aa7      	subs	r7, r4, r2
 800e3e2:	ae22      	add	r6, sp, #136	; 0x88
 800e3e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e3e8:	2500      	movs	r5, #0
 800e3ea:	4545      	cmp	r5, r8
 800e3ec:	dd13      	ble.n	800e416 <__kernel_rem_pio2+0x86>
 800e3ee:	9b08      	ldr	r3, [sp, #32]
 800e3f0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e6a8 <__kernel_rem_pio2+0x318>
 800e3f4:	aa22      	add	r2, sp, #136	; 0x88
 800e3f6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e3fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e3fe:	f04f 0800 	mov.w	r8, #0
 800e402:	9b02      	ldr	r3, [sp, #8]
 800e404:	4598      	cmp	r8, r3
 800e406:	dc2f      	bgt.n	800e468 <__kernel_rem_pio2+0xd8>
 800e408:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e40c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e410:	462f      	mov	r7, r5
 800e412:	2600      	movs	r6, #0
 800e414:	e01b      	b.n	800e44e <__kernel_rem_pio2+0xbe>
 800e416:	42ef      	cmn	r7, r5
 800e418:	d407      	bmi.n	800e42a <__kernel_rem_pio2+0x9a>
 800e41a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e41e:	f7f2 f891 	bl	8000544 <__aeabi_i2d>
 800e422:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e426:	3501      	adds	r5, #1
 800e428:	e7df      	b.n	800e3ea <__kernel_rem_pio2+0x5a>
 800e42a:	ec51 0b18 	vmov	r0, r1, d8
 800e42e:	e7f8      	b.n	800e422 <__kernel_rem_pio2+0x92>
 800e430:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e434:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e438:	f7f2 f8ee 	bl	8000618 <__aeabi_dmul>
 800e43c:	4602      	mov	r2, r0
 800e43e:	460b      	mov	r3, r1
 800e440:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e444:	f7f1 ff32 	bl	80002ac <__adddf3>
 800e448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e44c:	3601      	adds	r6, #1
 800e44e:	9b06      	ldr	r3, [sp, #24]
 800e450:	429e      	cmp	r6, r3
 800e452:	f1a7 0708 	sub.w	r7, r7, #8
 800e456:	ddeb      	ble.n	800e430 <__kernel_rem_pio2+0xa0>
 800e458:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e45c:	f108 0801 	add.w	r8, r8, #1
 800e460:	ecab 7b02 	vstmia	fp!, {d7}
 800e464:	3508      	adds	r5, #8
 800e466:	e7cc      	b.n	800e402 <__kernel_rem_pio2+0x72>
 800e468:	9b02      	ldr	r3, [sp, #8]
 800e46a:	aa0e      	add	r2, sp, #56	; 0x38
 800e46c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e470:	930d      	str	r3, [sp, #52]	; 0x34
 800e472:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e474:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e478:	9c02      	ldr	r4, [sp, #8]
 800e47a:	930c      	str	r3, [sp, #48]	; 0x30
 800e47c:	00e3      	lsls	r3, r4, #3
 800e47e:	930a      	str	r3, [sp, #40]	; 0x28
 800e480:	ab9a      	add	r3, sp, #616	; 0x268
 800e482:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e486:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e48a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e48e:	ab72      	add	r3, sp, #456	; 0x1c8
 800e490:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e494:	46c3      	mov	fp, r8
 800e496:	46a1      	mov	r9, r4
 800e498:	f1b9 0f00 	cmp.w	r9, #0
 800e49c:	f1a5 0508 	sub.w	r5, r5, #8
 800e4a0:	dc77      	bgt.n	800e592 <__kernel_rem_pio2+0x202>
 800e4a2:	ec47 6b10 	vmov	d0, r6, r7
 800e4a6:	4650      	mov	r0, sl
 800e4a8:	f000 fc02 	bl	800ecb0 <scalbn>
 800e4ac:	ec57 6b10 	vmov	r6, r7, d0
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e4b6:	ee10 0a10 	vmov	r0, s0
 800e4ba:	4639      	mov	r1, r7
 800e4bc:	f7f2 f8ac 	bl	8000618 <__aeabi_dmul>
 800e4c0:	ec41 0b10 	vmov	d0, r0, r1
 800e4c4:	f000 fb74 	bl	800ebb0 <floor>
 800e4c8:	4b7c      	ldr	r3, [pc, #496]	; (800e6bc <__kernel_rem_pio2+0x32c>)
 800e4ca:	ec51 0b10 	vmov	r0, r1, d0
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f7f2 f8a2 	bl	8000618 <__aeabi_dmul>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	4630      	mov	r0, r6
 800e4da:	4639      	mov	r1, r7
 800e4dc:	f7f1 fee4 	bl	80002a8 <__aeabi_dsub>
 800e4e0:	460f      	mov	r7, r1
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	f7f2 fb48 	bl	8000b78 <__aeabi_d2iz>
 800e4e8:	9004      	str	r0, [sp, #16]
 800e4ea:	f7f2 f82b 	bl	8000544 <__aeabi_i2d>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	4639      	mov	r1, r7
 800e4f6:	f7f1 fed7 	bl	80002a8 <__aeabi_dsub>
 800e4fa:	f1ba 0f00 	cmp.w	sl, #0
 800e4fe:	4606      	mov	r6, r0
 800e500:	460f      	mov	r7, r1
 800e502:	dd6d      	ble.n	800e5e0 <__kernel_rem_pio2+0x250>
 800e504:	1e62      	subs	r2, r4, #1
 800e506:	ab0e      	add	r3, sp, #56	; 0x38
 800e508:	9d04      	ldr	r5, [sp, #16]
 800e50a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e50e:	f1ca 0118 	rsb	r1, sl, #24
 800e512:	fa40 f301 	asr.w	r3, r0, r1
 800e516:	441d      	add	r5, r3
 800e518:	408b      	lsls	r3, r1
 800e51a:	1ac0      	subs	r0, r0, r3
 800e51c:	ab0e      	add	r3, sp, #56	; 0x38
 800e51e:	9504      	str	r5, [sp, #16]
 800e520:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e524:	f1ca 0317 	rsb	r3, sl, #23
 800e528:	fa40 fb03 	asr.w	fp, r0, r3
 800e52c:	f1bb 0f00 	cmp.w	fp, #0
 800e530:	dd65      	ble.n	800e5fe <__kernel_rem_pio2+0x26e>
 800e532:	9b04      	ldr	r3, [sp, #16]
 800e534:	2200      	movs	r2, #0
 800e536:	3301      	adds	r3, #1
 800e538:	9304      	str	r3, [sp, #16]
 800e53a:	4615      	mov	r5, r2
 800e53c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e540:	4294      	cmp	r4, r2
 800e542:	f300 809c 	bgt.w	800e67e <__kernel_rem_pio2+0x2ee>
 800e546:	f1ba 0f00 	cmp.w	sl, #0
 800e54a:	dd07      	ble.n	800e55c <__kernel_rem_pio2+0x1cc>
 800e54c:	f1ba 0f01 	cmp.w	sl, #1
 800e550:	f000 80c0 	beq.w	800e6d4 <__kernel_rem_pio2+0x344>
 800e554:	f1ba 0f02 	cmp.w	sl, #2
 800e558:	f000 80c6 	beq.w	800e6e8 <__kernel_rem_pio2+0x358>
 800e55c:	f1bb 0f02 	cmp.w	fp, #2
 800e560:	d14d      	bne.n	800e5fe <__kernel_rem_pio2+0x26e>
 800e562:	4632      	mov	r2, r6
 800e564:	463b      	mov	r3, r7
 800e566:	4956      	ldr	r1, [pc, #344]	; (800e6c0 <__kernel_rem_pio2+0x330>)
 800e568:	2000      	movs	r0, #0
 800e56a:	f7f1 fe9d 	bl	80002a8 <__aeabi_dsub>
 800e56e:	4606      	mov	r6, r0
 800e570:	460f      	mov	r7, r1
 800e572:	2d00      	cmp	r5, #0
 800e574:	d043      	beq.n	800e5fe <__kernel_rem_pio2+0x26e>
 800e576:	4650      	mov	r0, sl
 800e578:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e6b0 <__kernel_rem_pio2+0x320>
 800e57c:	f000 fb98 	bl	800ecb0 <scalbn>
 800e580:	4630      	mov	r0, r6
 800e582:	4639      	mov	r1, r7
 800e584:	ec53 2b10 	vmov	r2, r3, d0
 800e588:	f7f1 fe8e 	bl	80002a8 <__aeabi_dsub>
 800e58c:	4606      	mov	r6, r0
 800e58e:	460f      	mov	r7, r1
 800e590:	e035      	b.n	800e5fe <__kernel_rem_pio2+0x26e>
 800e592:	4b4c      	ldr	r3, [pc, #304]	; (800e6c4 <__kernel_rem_pio2+0x334>)
 800e594:	2200      	movs	r2, #0
 800e596:	4630      	mov	r0, r6
 800e598:	4639      	mov	r1, r7
 800e59a:	f7f2 f83d 	bl	8000618 <__aeabi_dmul>
 800e59e:	f7f2 faeb 	bl	8000b78 <__aeabi_d2iz>
 800e5a2:	f7f1 ffcf 	bl	8000544 <__aeabi_i2d>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	ec43 2b18 	vmov	d8, r2, r3
 800e5ae:	4b46      	ldr	r3, [pc, #280]	; (800e6c8 <__kernel_rem_pio2+0x338>)
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	f7f2 f831 	bl	8000618 <__aeabi_dmul>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	4639      	mov	r1, r7
 800e5be:	f7f1 fe73 	bl	80002a8 <__aeabi_dsub>
 800e5c2:	f7f2 fad9 	bl	8000b78 <__aeabi_d2iz>
 800e5c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e5ca:	f84b 0b04 	str.w	r0, [fp], #4
 800e5ce:	ec51 0b18 	vmov	r0, r1, d8
 800e5d2:	f7f1 fe6b 	bl	80002ac <__adddf3>
 800e5d6:	f109 39ff 	add.w	r9, r9, #4294967295
 800e5da:	4606      	mov	r6, r0
 800e5dc:	460f      	mov	r7, r1
 800e5de:	e75b      	b.n	800e498 <__kernel_rem_pio2+0x108>
 800e5e0:	d106      	bne.n	800e5f0 <__kernel_rem_pio2+0x260>
 800e5e2:	1e63      	subs	r3, r4, #1
 800e5e4:	aa0e      	add	r2, sp, #56	; 0x38
 800e5e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e5ea:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e5ee:	e79d      	b.n	800e52c <__kernel_rem_pio2+0x19c>
 800e5f0:	4b36      	ldr	r3, [pc, #216]	; (800e6cc <__kernel_rem_pio2+0x33c>)
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f7f2 fa96 	bl	8000b24 <__aeabi_dcmpge>
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	d13d      	bne.n	800e678 <__kernel_rem_pio2+0x2e8>
 800e5fc:	4683      	mov	fp, r0
 800e5fe:	2200      	movs	r2, #0
 800e600:	2300      	movs	r3, #0
 800e602:	4630      	mov	r0, r6
 800e604:	4639      	mov	r1, r7
 800e606:	f7f2 fa6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800e60a:	2800      	cmp	r0, #0
 800e60c:	f000 80c0 	beq.w	800e790 <__kernel_rem_pio2+0x400>
 800e610:	1e65      	subs	r5, r4, #1
 800e612:	462b      	mov	r3, r5
 800e614:	2200      	movs	r2, #0
 800e616:	9902      	ldr	r1, [sp, #8]
 800e618:	428b      	cmp	r3, r1
 800e61a:	da6c      	bge.n	800e6f6 <__kernel_rem_pio2+0x366>
 800e61c:	2a00      	cmp	r2, #0
 800e61e:	f000 8089 	beq.w	800e734 <__kernel_rem_pio2+0x3a4>
 800e622:	ab0e      	add	r3, sp, #56	; 0x38
 800e624:	f1aa 0a18 	sub.w	sl, sl, #24
 800e628:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f000 80ad 	beq.w	800e78c <__kernel_rem_pio2+0x3fc>
 800e632:	4650      	mov	r0, sl
 800e634:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e6b0 <__kernel_rem_pio2+0x320>
 800e638:	f000 fb3a 	bl	800ecb0 <scalbn>
 800e63c:	ab9a      	add	r3, sp, #616	; 0x268
 800e63e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e642:	ec57 6b10 	vmov	r6, r7, d0
 800e646:	00ec      	lsls	r4, r5, #3
 800e648:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e64c:	46aa      	mov	sl, r5
 800e64e:	f1ba 0f00 	cmp.w	sl, #0
 800e652:	f280 80d6 	bge.w	800e802 <__kernel_rem_pio2+0x472>
 800e656:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e6a8 <__kernel_rem_pio2+0x318>
 800e65a:	462e      	mov	r6, r5
 800e65c:	2e00      	cmp	r6, #0
 800e65e:	f2c0 8104 	blt.w	800e86a <__kernel_rem_pio2+0x4da>
 800e662:	ab72      	add	r3, sp, #456	; 0x1c8
 800e664:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e668:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e6d0 <__kernel_rem_pio2+0x340>
 800e66c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e670:	f04f 0800 	mov.w	r8, #0
 800e674:	1baf      	subs	r7, r5, r6
 800e676:	e0ea      	b.n	800e84e <__kernel_rem_pio2+0x4be>
 800e678:	f04f 0b02 	mov.w	fp, #2
 800e67c:	e759      	b.n	800e532 <__kernel_rem_pio2+0x1a2>
 800e67e:	f8d8 3000 	ldr.w	r3, [r8]
 800e682:	b955      	cbnz	r5, 800e69a <__kernel_rem_pio2+0x30a>
 800e684:	b123      	cbz	r3, 800e690 <__kernel_rem_pio2+0x300>
 800e686:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e68a:	f8c8 3000 	str.w	r3, [r8]
 800e68e:	2301      	movs	r3, #1
 800e690:	3201      	adds	r2, #1
 800e692:	f108 0804 	add.w	r8, r8, #4
 800e696:	461d      	mov	r5, r3
 800e698:	e752      	b.n	800e540 <__kernel_rem_pio2+0x1b0>
 800e69a:	1acb      	subs	r3, r1, r3
 800e69c:	f8c8 3000 	str.w	r3, [r8]
 800e6a0:	462b      	mov	r3, r5
 800e6a2:	e7f5      	b.n	800e690 <__kernel_rem_pio2+0x300>
 800e6a4:	f3af 8000 	nop.w
	...
 800e6b4:	3ff00000 	.word	0x3ff00000
 800e6b8:	0800f5d8 	.word	0x0800f5d8
 800e6bc:	40200000 	.word	0x40200000
 800e6c0:	3ff00000 	.word	0x3ff00000
 800e6c4:	3e700000 	.word	0x3e700000
 800e6c8:	41700000 	.word	0x41700000
 800e6cc:	3fe00000 	.word	0x3fe00000
 800e6d0:	0800f598 	.word	0x0800f598
 800e6d4:	1e62      	subs	r2, r4, #1
 800e6d6:	ab0e      	add	r3, sp, #56	; 0x38
 800e6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e6e0:	a90e      	add	r1, sp, #56	; 0x38
 800e6e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e6e6:	e739      	b.n	800e55c <__kernel_rem_pio2+0x1cc>
 800e6e8:	1e62      	subs	r2, r4, #1
 800e6ea:	ab0e      	add	r3, sp, #56	; 0x38
 800e6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e6f4:	e7f4      	b.n	800e6e0 <__kernel_rem_pio2+0x350>
 800e6f6:	a90e      	add	r1, sp, #56	; 0x38
 800e6f8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e6fc:	3b01      	subs	r3, #1
 800e6fe:	430a      	orrs	r2, r1
 800e700:	e789      	b.n	800e616 <__kernel_rem_pio2+0x286>
 800e702:	3301      	adds	r3, #1
 800e704:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e708:	2900      	cmp	r1, #0
 800e70a:	d0fa      	beq.n	800e702 <__kernel_rem_pio2+0x372>
 800e70c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e70e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e712:	446a      	add	r2, sp
 800e714:	3a98      	subs	r2, #152	; 0x98
 800e716:	920a      	str	r2, [sp, #40]	; 0x28
 800e718:	9a08      	ldr	r2, [sp, #32]
 800e71a:	18e3      	adds	r3, r4, r3
 800e71c:	18a5      	adds	r5, r4, r2
 800e71e:	aa22      	add	r2, sp, #136	; 0x88
 800e720:	f104 0801 	add.w	r8, r4, #1
 800e724:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e728:	9304      	str	r3, [sp, #16]
 800e72a:	9b04      	ldr	r3, [sp, #16]
 800e72c:	4543      	cmp	r3, r8
 800e72e:	da04      	bge.n	800e73a <__kernel_rem_pio2+0x3aa>
 800e730:	461c      	mov	r4, r3
 800e732:	e6a3      	b.n	800e47c <__kernel_rem_pio2+0xec>
 800e734:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e736:	2301      	movs	r3, #1
 800e738:	e7e4      	b.n	800e704 <__kernel_rem_pio2+0x374>
 800e73a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e73c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e740:	f7f1 ff00 	bl	8000544 <__aeabi_i2d>
 800e744:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e74a:	46ab      	mov	fp, r5
 800e74c:	461c      	mov	r4, r3
 800e74e:	f04f 0900 	mov.w	r9, #0
 800e752:	2600      	movs	r6, #0
 800e754:	2700      	movs	r7, #0
 800e756:	9b06      	ldr	r3, [sp, #24]
 800e758:	4599      	cmp	r9, r3
 800e75a:	dd06      	ble.n	800e76a <__kernel_rem_pio2+0x3da>
 800e75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e75e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e762:	f108 0801 	add.w	r8, r8, #1
 800e766:	930a      	str	r3, [sp, #40]	; 0x28
 800e768:	e7df      	b.n	800e72a <__kernel_rem_pio2+0x39a>
 800e76a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e76e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e772:	f7f1 ff51 	bl	8000618 <__aeabi_dmul>
 800e776:	4602      	mov	r2, r0
 800e778:	460b      	mov	r3, r1
 800e77a:	4630      	mov	r0, r6
 800e77c:	4639      	mov	r1, r7
 800e77e:	f7f1 fd95 	bl	80002ac <__adddf3>
 800e782:	f109 0901 	add.w	r9, r9, #1
 800e786:	4606      	mov	r6, r0
 800e788:	460f      	mov	r7, r1
 800e78a:	e7e4      	b.n	800e756 <__kernel_rem_pio2+0x3c6>
 800e78c:	3d01      	subs	r5, #1
 800e78e:	e748      	b.n	800e622 <__kernel_rem_pio2+0x292>
 800e790:	ec47 6b10 	vmov	d0, r6, r7
 800e794:	f1ca 0000 	rsb	r0, sl, #0
 800e798:	f000 fa8a 	bl	800ecb0 <scalbn>
 800e79c:	ec57 6b10 	vmov	r6, r7, d0
 800e7a0:	4ba0      	ldr	r3, [pc, #640]	; (800ea24 <__kernel_rem_pio2+0x694>)
 800e7a2:	ee10 0a10 	vmov	r0, s0
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	4639      	mov	r1, r7
 800e7aa:	f7f2 f9bb 	bl	8000b24 <__aeabi_dcmpge>
 800e7ae:	b1f8      	cbz	r0, 800e7f0 <__kernel_rem_pio2+0x460>
 800e7b0:	4b9d      	ldr	r3, [pc, #628]	; (800ea28 <__kernel_rem_pio2+0x698>)
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	4639      	mov	r1, r7
 800e7b8:	f7f1 ff2e 	bl	8000618 <__aeabi_dmul>
 800e7bc:	f7f2 f9dc 	bl	8000b78 <__aeabi_d2iz>
 800e7c0:	4680      	mov	r8, r0
 800e7c2:	f7f1 febf 	bl	8000544 <__aeabi_i2d>
 800e7c6:	4b97      	ldr	r3, [pc, #604]	; (800ea24 <__kernel_rem_pio2+0x694>)
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f7f1 ff25 	bl	8000618 <__aeabi_dmul>
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	4630      	mov	r0, r6
 800e7d6:	f7f1 fd67 	bl	80002a8 <__aeabi_dsub>
 800e7da:	f7f2 f9cd 	bl	8000b78 <__aeabi_d2iz>
 800e7de:	1c65      	adds	r5, r4, #1
 800e7e0:	ab0e      	add	r3, sp, #56	; 0x38
 800e7e2:	f10a 0a18 	add.w	sl, sl, #24
 800e7e6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e7ea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e7ee:	e720      	b.n	800e632 <__kernel_rem_pio2+0x2a2>
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	4639      	mov	r1, r7
 800e7f4:	f7f2 f9c0 	bl	8000b78 <__aeabi_d2iz>
 800e7f8:	ab0e      	add	r3, sp, #56	; 0x38
 800e7fa:	4625      	mov	r5, r4
 800e7fc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e800:	e717      	b.n	800e632 <__kernel_rem_pio2+0x2a2>
 800e802:	ab0e      	add	r3, sp, #56	; 0x38
 800e804:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e808:	f7f1 fe9c 	bl	8000544 <__aeabi_i2d>
 800e80c:	4632      	mov	r2, r6
 800e80e:	463b      	mov	r3, r7
 800e810:	f7f1 ff02 	bl	8000618 <__aeabi_dmul>
 800e814:	4b84      	ldr	r3, [pc, #528]	; (800ea28 <__kernel_rem_pio2+0x698>)
 800e816:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e81a:	2200      	movs	r2, #0
 800e81c:	4630      	mov	r0, r6
 800e81e:	4639      	mov	r1, r7
 800e820:	f7f1 fefa 	bl	8000618 <__aeabi_dmul>
 800e824:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e828:	4606      	mov	r6, r0
 800e82a:	460f      	mov	r7, r1
 800e82c:	e70f      	b.n	800e64e <__kernel_rem_pio2+0x2be>
 800e82e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e832:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e836:	f7f1 feef 	bl	8000618 <__aeabi_dmul>
 800e83a:	4602      	mov	r2, r0
 800e83c:	460b      	mov	r3, r1
 800e83e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e842:	f7f1 fd33 	bl	80002ac <__adddf3>
 800e846:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e84a:	f108 0801 	add.w	r8, r8, #1
 800e84e:	9b02      	ldr	r3, [sp, #8]
 800e850:	4598      	cmp	r8, r3
 800e852:	dc01      	bgt.n	800e858 <__kernel_rem_pio2+0x4c8>
 800e854:	45b8      	cmp	r8, r7
 800e856:	ddea      	ble.n	800e82e <__kernel_rem_pio2+0x49e>
 800e858:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e85c:	ab4a      	add	r3, sp, #296	; 0x128
 800e85e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e862:	ed87 7b00 	vstr	d7, [r7]
 800e866:	3e01      	subs	r6, #1
 800e868:	e6f8      	b.n	800e65c <__kernel_rem_pio2+0x2cc>
 800e86a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e86c:	2b02      	cmp	r3, #2
 800e86e:	dc0b      	bgt.n	800e888 <__kernel_rem_pio2+0x4f8>
 800e870:	2b00      	cmp	r3, #0
 800e872:	dc35      	bgt.n	800e8e0 <__kernel_rem_pio2+0x550>
 800e874:	d059      	beq.n	800e92a <__kernel_rem_pio2+0x59a>
 800e876:	9b04      	ldr	r3, [sp, #16]
 800e878:	f003 0007 	and.w	r0, r3, #7
 800e87c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e880:	ecbd 8b02 	vpop	{d8}
 800e884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e888:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e88a:	2b03      	cmp	r3, #3
 800e88c:	d1f3      	bne.n	800e876 <__kernel_rem_pio2+0x4e6>
 800e88e:	ab4a      	add	r3, sp, #296	; 0x128
 800e890:	4423      	add	r3, r4
 800e892:	9306      	str	r3, [sp, #24]
 800e894:	461c      	mov	r4, r3
 800e896:	469a      	mov	sl, r3
 800e898:	9502      	str	r5, [sp, #8]
 800e89a:	9b02      	ldr	r3, [sp, #8]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f1aa 0a08 	sub.w	sl, sl, #8
 800e8a2:	dc6b      	bgt.n	800e97c <__kernel_rem_pio2+0x5ec>
 800e8a4:	46aa      	mov	sl, r5
 800e8a6:	f1ba 0f01 	cmp.w	sl, #1
 800e8aa:	f1a4 0408 	sub.w	r4, r4, #8
 800e8ae:	f300 8085 	bgt.w	800e9bc <__kernel_rem_pio2+0x62c>
 800e8b2:	9c06      	ldr	r4, [sp, #24]
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	3408      	adds	r4, #8
 800e8b8:	2100      	movs	r1, #0
 800e8ba:	2d01      	cmp	r5, #1
 800e8bc:	f300 809d 	bgt.w	800e9fa <__kernel_rem_pio2+0x66a>
 800e8c0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e8c4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e8c8:	f1bb 0f00 	cmp.w	fp, #0
 800e8cc:	f040 809b 	bne.w	800ea06 <__kernel_rem_pio2+0x676>
 800e8d0:	9b01      	ldr	r3, [sp, #4]
 800e8d2:	e9c3 5600 	strd	r5, r6, [r3]
 800e8d6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e8da:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e8de:	e7ca      	b.n	800e876 <__kernel_rem_pio2+0x4e6>
 800e8e0:	3408      	adds	r4, #8
 800e8e2:	ab4a      	add	r3, sp, #296	; 0x128
 800e8e4:	441c      	add	r4, r3
 800e8e6:	462e      	mov	r6, r5
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	2e00      	cmp	r6, #0
 800e8ee:	da36      	bge.n	800e95e <__kernel_rem_pio2+0x5ce>
 800e8f0:	f1bb 0f00 	cmp.w	fp, #0
 800e8f4:	d039      	beq.n	800e96a <__kernel_rem_pio2+0x5da>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8fc:	9c01      	ldr	r4, [sp, #4]
 800e8fe:	e9c4 2300 	strd	r2, r3, [r4]
 800e902:	4602      	mov	r2, r0
 800e904:	460b      	mov	r3, r1
 800e906:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e90a:	f7f1 fccd 	bl	80002a8 <__aeabi_dsub>
 800e90e:	ae4c      	add	r6, sp, #304	; 0x130
 800e910:	2401      	movs	r4, #1
 800e912:	42a5      	cmp	r5, r4
 800e914:	da2c      	bge.n	800e970 <__kernel_rem_pio2+0x5e0>
 800e916:	f1bb 0f00 	cmp.w	fp, #0
 800e91a:	d002      	beq.n	800e922 <__kernel_rem_pio2+0x592>
 800e91c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e920:	4619      	mov	r1, r3
 800e922:	9b01      	ldr	r3, [sp, #4]
 800e924:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e928:	e7a5      	b.n	800e876 <__kernel_rem_pio2+0x4e6>
 800e92a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e92e:	eb0d 0403 	add.w	r4, sp, r3
 800e932:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e936:	2000      	movs	r0, #0
 800e938:	2100      	movs	r1, #0
 800e93a:	2d00      	cmp	r5, #0
 800e93c:	da09      	bge.n	800e952 <__kernel_rem_pio2+0x5c2>
 800e93e:	f1bb 0f00 	cmp.w	fp, #0
 800e942:	d002      	beq.n	800e94a <__kernel_rem_pio2+0x5ba>
 800e944:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e948:	4619      	mov	r1, r3
 800e94a:	9b01      	ldr	r3, [sp, #4]
 800e94c:	e9c3 0100 	strd	r0, r1, [r3]
 800e950:	e791      	b.n	800e876 <__kernel_rem_pio2+0x4e6>
 800e952:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e956:	f7f1 fca9 	bl	80002ac <__adddf3>
 800e95a:	3d01      	subs	r5, #1
 800e95c:	e7ed      	b.n	800e93a <__kernel_rem_pio2+0x5aa>
 800e95e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e962:	f7f1 fca3 	bl	80002ac <__adddf3>
 800e966:	3e01      	subs	r6, #1
 800e968:	e7c0      	b.n	800e8ec <__kernel_rem_pio2+0x55c>
 800e96a:	4602      	mov	r2, r0
 800e96c:	460b      	mov	r3, r1
 800e96e:	e7c5      	b.n	800e8fc <__kernel_rem_pio2+0x56c>
 800e970:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e974:	f7f1 fc9a 	bl	80002ac <__adddf3>
 800e978:	3401      	adds	r4, #1
 800e97a:	e7ca      	b.n	800e912 <__kernel_rem_pio2+0x582>
 800e97c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e980:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e984:	9b02      	ldr	r3, [sp, #8]
 800e986:	3b01      	subs	r3, #1
 800e988:	9302      	str	r3, [sp, #8]
 800e98a:	4632      	mov	r2, r6
 800e98c:	463b      	mov	r3, r7
 800e98e:	4640      	mov	r0, r8
 800e990:	4649      	mov	r1, r9
 800e992:	f7f1 fc8b 	bl	80002ac <__adddf3>
 800e996:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e99a:	4602      	mov	r2, r0
 800e99c:	460b      	mov	r3, r1
 800e99e:	4640      	mov	r0, r8
 800e9a0:	4649      	mov	r1, r9
 800e9a2:	f7f1 fc81 	bl	80002a8 <__aeabi_dsub>
 800e9a6:	4632      	mov	r2, r6
 800e9a8:	463b      	mov	r3, r7
 800e9aa:	f7f1 fc7f 	bl	80002ac <__adddf3>
 800e9ae:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e9b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e9b6:	ed8a 7b00 	vstr	d7, [sl]
 800e9ba:	e76e      	b.n	800e89a <__kernel_rem_pio2+0x50a>
 800e9bc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e9c0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e9c4:	4640      	mov	r0, r8
 800e9c6:	4632      	mov	r2, r6
 800e9c8:	463b      	mov	r3, r7
 800e9ca:	4649      	mov	r1, r9
 800e9cc:	f7f1 fc6e 	bl	80002ac <__adddf3>
 800e9d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	4640      	mov	r0, r8
 800e9da:	4649      	mov	r1, r9
 800e9dc:	f7f1 fc64 	bl	80002a8 <__aeabi_dsub>
 800e9e0:	4632      	mov	r2, r6
 800e9e2:	463b      	mov	r3, r7
 800e9e4:	f7f1 fc62 	bl	80002ac <__adddf3>
 800e9e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e9ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e9f0:	ed84 7b00 	vstr	d7, [r4]
 800e9f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9f8:	e755      	b.n	800e8a6 <__kernel_rem_pio2+0x516>
 800e9fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e9fe:	f7f1 fc55 	bl	80002ac <__adddf3>
 800ea02:	3d01      	subs	r5, #1
 800ea04:	e759      	b.n	800e8ba <__kernel_rem_pio2+0x52a>
 800ea06:	9b01      	ldr	r3, [sp, #4]
 800ea08:	9a01      	ldr	r2, [sp, #4]
 800ea0a:	601d      	str	r5, [r3, #0]
 800ea0c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ea10:	605c      	str	r4, [r3, #4]
 800ea12:	609f      	str	r7, [r3, #8]
 800ea14:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ea18:	60d3      	str	r3, [r2, #12]
 800ea1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea1e:	6110      	str	r0, [r2, #16]
 800ea20:	6153      	str	r3, [r2, #20]
 800ea22:	e728      	b.n	800e876 <__kernel_rem_pio2+0x4e6>
 800ea24:	41700000 	.word	0x41700000
 800ea28:	3e700000 	.word	0x3e700000
 800ea2c:	00000000 	.word	0x00000000

0800ea30 <__kernel_sin>:
 800ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea34:	ed2d 8b04 	vpush	{d8-d9}
 800ea38:	eeb0 8a41 	vmov.f32	s16, s2
 800ea3c:	eef0 8a61 	vmov.f32	s17, s3
 800ea40:	ec55 4b10 	vmov	r4, r5, d0
 800ea44:	b083      	sub	sp, #12
 800ea46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ea4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ea4e:	9001      	str	r0, [sp, #4]
 800ea50:	da06      	bge.n	800ea60 <__kernel_sin+0x30>
 800ea52:	ee10 0a10 	vmov	r0, s0
 800ea56:	4629      	mov	r1, r5
 800ea58:	f7f2 f88e 	bl	8000b78 <__aeabi_d2iz>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d051      	beq.n	800eb04 <__kernel_sin+0xd4>
 800ea60:	4622      	mov	r2, r4
 800ea62:	462b      	mov	r3, r5
 800ea64:	4620      	mov	r0, r4
 800ea66:	4629      	mov	r1, r5
 800ea68:	f7f1 fdd6 	bl	8000618 <__aeabi_dmul>
 800ea6c:	4682      	mov	sl, r0
 800ea6e:	468b      	mov	fp, r1
 800ea70:	4602      	mov	r2, r0
 800ea72:	460b      	mov	r3, r1
 800ea74:	4620      	mov	r0, r4
 800ea76:	4629      	mov	r1, r5
 800ea78:	f7f1 fdce 	bl	8000618 <__aeabi_dmul>
 800ea7c:	a341      	add	r3, pc, #260	; (adr r3, 800eb84 <__kernel_sin+0x154>)
 800ea7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea82:	4680      	mov	r8, r0
 800ea84:	4689      	mov	r9, r1
 800ea86:	4650      	mov	r0, sl
 800ea88:	4659      	mov	r1, fp
 800ea8a:	f7f1 fdc5 	bl	8000618 <__aeabi_dmul>
 800ea8e:	a33f      	add	r3, pc, #252	; (adr r3, 800eb8c <__kernel_sin+0x15c>)
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	f7f1 fc08 	bl	80002a8 <__aeabi_dsub>
 800ea98:	4652      	mov	r2, sl
 800ea9a:	465b      	mov	r3, fp
 800ea9c:	f7f1 fdbc 	bl	8000618 <__aeabi_dmul>
 800eaa0:	a33c      	add	r3, pc, #240	; (adr r3, 800eb94 <__kernel_sin+0x164>)
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	f7f1 fc01 	bl	80002ac <__adddf3>
 800eaaa:	4652      	mov	r2, sl
 800eaac:	465b      	mov	r3, fp
 800eaae:	f7f1 fdb3 	bl	8000618 <__aeabi_dmul>
 800eab2:	a33a      	add	r3, pc, #232	; (adr r3, 800eb9c <__kernel_sin+0x16c>)
 800eab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab8:	f7f1 fbf6 	bl	80002a8 <__aeabi_dsub>
 800eabc:	4652      	mov	r2, sl
 800eabe:	465b      	mov	r3, fp
 800eac0:	f7f1 fdaa 	bl	8000618 <__aeabi_dmul>
 800eac4:	a337      	add	r3, pc, #220	; (adr r3, 800eba4 <__kernel_sin+0x174>)
 800eac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaca:	f7f1 fbef 	bl	80002ac <__adddf3>
 800eace:	9b01      	ldr	r3, [sp, #4]
 800ead0:	4606      	mov	r6, r0
 800ead2:	460f      	mov	r7, r1
 800ead4:	b9eb      	cbnz	r3, 800eb12 <__kernel_sin+0xe2>
 800ead6:	4602      	mov	r2, r0
 800ead8:	460b      	mov	r3, r1
 800eada:	4650      	mov	r0, sl
 800eadc:	4659      	mov	r1, fp
 800eade:	f7f1 fd9b 	bl	8000618 <__aeabi_dmul>
 800eae2:	a325      	add	r3, pc, #148	; (adr r3, 800eb78 <__kernel_sin+0x148>)
 800eae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae8:	f7f1 fbde 	bl	80002a8 <__aeabi_dsub>
 800eaec:	4642      	mov	r2, r8
 800eaee:	464b      	mov	r3, r9
 800eaf0:	f7f1 fd92 	bl	8000618 <__aeabi_dmul>
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	460b      	mov	r3, r1
 800eaf8:	4620      	mov	r0, r4
 800eafa:	4629      	mov	r1, r5
 800eafc:	f7f1 fbd6 	bl	80002ac <__adddf3>
 800eb00:	4604      	mov	r4, r0
 800eb02:	460d      	mov	r5, r1
 800eb04:	ec45 4b10 	vmov	d0, r4, r5
 800eb08:	b003      	add	sp, #12
 800eb0a:	ecbd 8b04 	vpop	{d8-d9}
 800eb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb12:	4b1b      	ldr	r3, [pc, #108]	; (800eb80 <__kernel_sin+0x150>)
 800eb14:	ec51 0b18 	vmov	r0, r1, d8
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f7f1 fd7d 	bl	8000618 <__aeabi_dmul>
 800eb1e:	4632      	mov	r2, r6
 800eb20:	ec41 0b19 	vmov	d9, r0, r1
 800eb24:	463b      	mov	r3, r7
 800eb26:	4640      	mov	r0, r8
 800eb28:	4649      	mov	r1, r9
 800eb2a:	f7f1 fd75 	bl	8000618 <__aeabi_dmul>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	460b      	mov	r3, r1
 800eb32:	ec51 0b19 	vmov	r0, r1, d9
 800eb36:	f7f1 fbb7 	bl	80002a8 <__aeabi_dsub>
 800eb3a:	4652      	mov	r2, sl
 800eb3c:	465b      	mov	r3, fp
 800eb3e:	f7f1 fd6b 	bl	8000618 <__aeabi_dmul>
 800eb42:	ec53 2b18 	vmov	r2, r3, d8
 800eb46:	f7f1 fbaf 	bl	80002a8 <__aeabi_dsub>
 800eb4a:	a30b      	add	r3, pc, #44	; (adr r3, 800eb78 <__kernel_sin+0x148>)
 800eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb50:	4606      	mov	r6, r0
 800eb52:	460f      	mov	r7, r1
 800eb54:	4640      	mov	r0, r8
 800eb56:	4649      	mov	r1, r9
 800eb58:	f7f1 fd5e 	bl	8000618 <__aeabi_dmul>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	460b      	mov	r3, r1
 800eb60:	4630      	mov	r0, r6
 800eb62:	4639      	mov	r1, r7
 800eb64:	f7f1 fba2 	bl	80002ac <__adddf3>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	4629      	mov	r1, r5
 800eb70:	f7f1 fb9a 	bl	80002a8 <__aeabi_dsub>
 800eb74:	e7c4      	b.n	800eb00 <__kernel_sin+0xd0>
 800eb76:	bf00      	nop
 800eb78:	55555549 	.word	0x55555549
 800eb7c:	3fc55555 	.word	0x3fc55555
 800eb80:	3fe00000 	.word	0x3fe00000
 800eb84:	5acfd57c 	.word	0x5acfd57c
 800eb88:	3de5d93a 	.word	0x3de5d93a
 800eb8c:	8a2b9ceb 	.word	0x8a2b9ceb
 800eb90:	3e5ae5e6 	.word	0x3e5ae5e6
 800eb94:	57b1fe7d 	.word	0x57b1fe7d
 800eb98:	3ec71de3 	.word	0x3ec71de3
 800eb9c:	19c161d5 	.word	0x19c161d5
 800eba0:	3f2a01a0 	.word	0x3f2a01a0
 800eba4:	1110f8a6 	.word	0x1110f8a6
 800eba8:	3f811111 	.word	0x3f811111
 800ebac:	00000000 	.word	0x00000000

0800ebb0 <floor>:
 800ebb0:	ec51 0b10 	vmov	r0, r1, d0
 800ebb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ebbc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ebc0:	2e13      	cmp	r6, #19
 800ebc2:	ee10 5a10 	vmov	r5, s0
 800ebc6:	ee10 8a10 	vmov	r8, s0
 800ebca:	460c      	mov	r4, r1
 800ebcc:	dc32      	bgt.n	800ec34 <floor+0x84>
 800ebce:	2e00      	cmp	r6, #0
 800ebd0:	da14      	bge.n	800ebfc <floor+0x4c>
 800ebd2:	a333      	add	r3, pc, #204	; (adr r3, 800eca0 <floor+0xf0>)
 800ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd8:	f7f1 fb68 	bl	80002ac <__adddf3>
 800ebdc:	2200      	movs	r2, #0
 800ebde:	2300      	movs	r3, #0
 800ebe0:	f7f1 ffaa 	bl	8000b38 <__aeabi_dcmpgt>
 800ebe4:	b138      	cbz	r0, 800ebf6 <floor+0x46>
 800ebe6:	2c00      	cmp	r4, #0
 800ebe8:	da57      	bge.n	800ec9a <floor+0xea>
 800ebea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ebee:	431d      	orrs	r5, r3
 800ebf0:	d001      	beq.n	800ebf6 <floor+0x46>
 800ebf2:	4c2d      	ldr	r4, [pc, #180]	; (800eca8 <floor+0xf8>)
 800ebf4:	2500      	movs	r5, #0
 800ebf6:	4621      	mov	r1, r4
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	e025      	b.n	800ec48 <floor+0x98>
 800ebfc:	4f2b      	ldr	r7, [pc, #172]	; (800ecac <floor+0xfc>)
 800ebfe:	4137      	asrs	r7, r6
 800ec00:	ea01 0307 	and.w	r3, r1, r7
 800ec04:	4303      	orrs	r3, r0
 800ec06:	d01f      	beq.n	800ec48 <floor+0x98>
 800ec08:	a325      	add	r3, pc, #148	; (adr r3, 800eca0 <floor+0xf0>)
 800ec0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0e:	f7f1 fb4d 	bl	80002ac <__adddf3>
 800ec12:	2200      	movs	r2, #0
 800ec14:	2300      	movs	r3, #0
 800ec16:	f7f1 ff8f 	bl	8000b38 <__aeabi_dcmpgt>
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	d0eb      	beq.n	800ebf6 <floor+0x46>
 800ec1e:	2c00      	cmp	r4, #0
 800ec20:	bfbe      	ittt	lt
 800ec22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ec26:	fa43 f606 	asrlt.w	r6, r3, r6
 800ec2a:	19a4      	addlt	r4, r4, r6
 800ec2c:	ea24 0407 	bic.w	r4, r4, r7
 800ec30:	2500      	movs	r5, #0
 800ec32:	e7e0      	b.n	800ebf6 <floor+0x46>
 800ec34:	2e33      	cmp	r6, #51	; 0x33
 800ec36:	dd0b      	ble.n	800ec50 <floor+0xa0>
 800ec38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ec3c:	d104      	bne.n	800ec48 <floor+0x98>
 800ec3e:	ee10 2a10 	vmov	r2, s0
 800ec42:	460b      	mov	r3, r1
 800ec44:	f7f1 fb32 	bl	80002ac <__adddf3>
 800ec48:	ec41 0b10 	vmov	d0, r0, r1
 800ec4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec50:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ec54:	f04f 33ff 	mov.w	r3, #4294967295
 800ec58:	fa23 f707 	lsr.w	r7, r3, r7
 800ec5c:	4207      	tst	r7, r0
 800ec5e:	d0f3      	beq.n	800ec48 <floor+0x98>
 800ec60:	a30f      	add	r3, pc, #60	; (adr r3, 800eca0 <floor+0xf0>)
 800ec62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec66:	f7f1 fb21 	bl	80002ac <__adddf3>
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	f7f1 ff63 	bl	8000b38 <__aeabi_dcmpgt>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	d0bf      	beq.n	800ebf6 <floor+0x46>
 800ec76:	2c00      	cmp	r4, #0
 800ec78:	da02      	bge.n	800ec80 <floor+0xd0>
 800ec7a:	2e14      	cmp	r6, #20
 800ec7c:	d103      	bne.n	800ec86 <floor+0xd6>
 800ec7e:	3401      	adds	r4, #1
 800ec80:	ea25 0507 	bic.w	r5, r5, r7
 800ec84:	e7b7      	b.n	800ebf6 <floor+0x46>
 800ec86:	2301      	movs	r3, #1
 800ec88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ec8c:	fa03 f606 	lsl.w	r6, r3, r6
 800ec90:	4435      	add	r5, r6
 800ec92:	4545      	cmp	r5, r8
 800ec94:	bf38      	it	cc
 800ec96:	18e4      	addcc	r4, r4, r3
 800ec98:	e7f2      	b.n	800ec80 <floor+0xd0>
 800ec9a:	2500      	movs	r5, #0
 800ec9c:	462c      	mov	r4, r5
 800ec9e:	e7aa      	b.n	800ebf6 <floor+0x46>
 800eca0:	8800759c 	.word	0x8800759c
 800eca4:	7e37e43c 	.word	0x7e37e43c
 800eca8:	bff00000 	.word	0xbff00000
 800ecac:	000fffff 	.word	0x000fffff

0800ecb0 <scalbn>:
 800ecb0:	b570      	push	{r4, r5, r6, lr}
 800ecb2:	ec55 4b10 	vmov	r4, r5, d0
 800ecb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ecba:	4606      	mov	r6, r0
 800ecbc:	462b      	mov	r3, r5
 800ecbe:	b99a      	cbnz	r2, 800ece8 <scalbn+0x38>
 800ecc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ecc4:	4323      	orrs	r3, r4
 800ecc6:	d036      	beq.n	800ed36 <scalbn+0x86>
 800ecc8:	4b39      	ldr	r3, [pc, #228]	; (800edb0 <scalbn+0x100>)
 800ecca:	4629      	mov	r1, r5
 800eccc:	ee10 0a10 	vmov	r0, s0
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	f7f1 fca1 	bl	8000618 <__aeabi_dmul>
 800ecd6:	4b37      	ldr	r3, [pc, #220]	; (800edb4 <scalbn+0x104>)
 800ecd8:	429e      	cmp	r6, r3
 800ecda:	4604      	mov	r4, r0
 800ecdc:	460d      	mov	r5, r1
 800ecde:	da10      	bge.n	800ed02 <scalbn+0x52>
 800ece0:	a32b      	add	r3, pc, #172	; (adr r3, 800ed90 <scalbn+0xe0>)
 800ece2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece6:	e03a      	b.n	800ed5e <scalbn+0xae>
 800ece8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ecec:	428a      	cmp	r2, r1
 800ecee:	d10c      	bne.n	800ed0a <scalbn+0x5a>
 800ecf0:	ee10 2a10 	vmov	r2, s0
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	4629      	mov	r1, r5
 800ecf8:	f7f1 fad8 	bl	80002ac <__adddf3>
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	460d      	mov	r5, r1
 800ed00:	e019      	b.n	800ed36 <scalbn+0x86>
 800ed02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ed06:	460b      	mov	r3, r1
 800ed08:	3a36      	subs	r2, #54	; 0x36
 800ed0a:	4432      	add	r2, r6
 800ed0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ed10:	428a      	cmp	r2, r1
 800ed12:	dd08      	ble.n	800ed26 <scalbn+0x76>
 800ed14:	2d00      	cmp	r5, #0
 800ed16:	a120      	add	r1, pc, #128	; (adr r1, 800ed98 <scalbn+0xe8>)
 800ed18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed1c:	da1c      	bge.n	800ed58 <scalbn+0xa8>
 800ed1e:	a120      	add	r1, pc, #128	; (adr r1, 800eda0 <scalbn+0xf0>)
 800ed20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed24:	e018      	b.n	800ed58 <scalbn+0xa8>
 800ed26:	2a00      	cmp	r2, #0
 800ed28:	dd08      	ble.n	800ed3c <scalbn+0x8c>
 800ed2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ed32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ed36:	ec45 4b10 	vmov	d0, r4, r5
 800ed3a:	bd70      	pop	{r4, r5, r6, pc}
 800ed3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ed40:	da19      	bge.n	800ed76 <scalbn+0xc6>
 800ed42:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ed46:	429e      	cmp	r6, r3
 800ed48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ed4c:	dd0a      	ble.n	800ed64 <scalbn+0xb4>
 800ed4e:	a112      	add	r1, pc, #72	; (adr r1, 800ed98 <scalbn+0xe8>)
 800ed50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d1e2      	bne.n	800ed1e <scalbn+0x6e>
 800ed58:	a30f      	add	r3, pc, #60	; (adr r3, 800ed98 <scalbn+0xe8>)
 800ed5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5e:	f7f1 fc5b 	bl	8000618 <__aeabi_dmul>
 800ed62:	e7cb      	b.n	800ecfc <scalbn+0x4c>
 800ed64:	a10a      	add	r1, pc, #40	; (adr r1, 800ed90 <scalbn+0xe0>)
 800ed66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d0b8      	beq.n	800ece0 <scalbn+0x30>
 800ed6e:	a10e      	add	r1, pc, #56	; (adr r1, 800eda8 <scalbn+0xf8>)
 800ed70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed74:	e7b4      	b.n	800ece0 <scalbn+0x30>
 800ed76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed7a:	3236      	adds	r2, #54	; 0x36
 800ed7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ed80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ed84:	4620      	mov	r0, r4
 800ed86:	4b0c      	ldr	r3, [pc, #48]	; (800edb8 <scalbn+0x108>)
 800ed88:	2200      	movs	r2, #0
 800ed8a:	e7e8      	b.n	800ed5e <scalbn+0xae>
 800ed8c:	f3af 8000 	nop.w
 800ed90:	c2f8f359 	.word	0xc2f8f359
 800ed94:	01a56e1f 	.word	0x01a56e1f
 800ed98:	8800759c 	.word	0x8800759c
 800ed9c:	7e37e43c 	.word	0x7e37e43c
 800eda0:	8800759c 	.word	0x8800759c
 800eda4:	fe37e43c 	.word	0xfe37e43c
 800eda8:	c2f8f359 	.word	0xc2f8f359
 800edac:	81a56e1f 	.word	0x81a56e1f
 800edb0:	43500000 	.word	0x43500000
 800edb4:	ffff3cb0 	.word	0xffff3cb0
 800edb8:	3c900000 	.word	0x3c900000

0800edbc <_init>:
 800edbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edbe:	bf00      	nop
 800edc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edc2:	bc08      	pop	{r3}
 800edc4:	469e      	mov	lr, r3
 800edc6:	4770      	bx	lr

0800edc8 <_fini>:
 800edc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edca:	bf00      	nop
 800edcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edce:	bc08      	pop	{r3}
 800edd0:	469e      	mov	lr, r3
 800edd2:	4770      	bx	lr
